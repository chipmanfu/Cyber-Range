-- MariaDB dump 10.19  Distrib 10.6.12-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: bookstackapp
-- ------------------------------------------------------
-- Server version	10.6.12-MariaDB-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `activities`
--

DROP TABLE IF EXISTS `activities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `activities` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type` varchar(191) NOT NULL,
  `detail` text NOT NULL,
  `user_id` int(11) NOT NULL,
  `ip` varchar(45) NOT NULL,
  `entity_id` int(11) DEFAULT NULL,
  `entity_type` varchar(191) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `activities_user_id_index` (`user_id`),
  KEY `activities_entity_id_index` (`entity_id`),
  KEY `activities_key_index` (`type`),
  KEY `activities_created_at_index` (`created_at`),
  KEY `activities_ip_index` (`ip`)
) ENGINE=InnoDB AUTO_INCREMENT=129 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `activities`
--

LOCK TABLES `activities` WRITE;
/*!40000 ALTER TABLE `activities` DISABLE KEYS */;
INSERT INTO `activities` VALUES (1,'auth_login','standard; (1) Admin',1,'172.20.0.2',NULL,NULL,'2023-03-28 22:06:37','2023-03-28 22:06:37'),(2,'book_create','(1) test',1,'172.20.0.2',1,'book','2023-03-28 22:06:48','2023-03-28 22:06:48'),(3,'page_create','(1) New Page',1,'172.20.0.2',1,'page','2023-03-28 22:07:12','2023-03-28 22:07:12'),(4,'bookshelf_create','(1) Grayspace',1,'172.20.0.4',1,'bookshelf','2023-03-28 22:35:13','2023-03-28 22:35:13'),(5,'bookshelf_delete','(1) Grayspace',1,'172.20.0.4',1,'bookshelf','2023-03-28 22:35:23','2023-03-28 22:35:23'),(6,'bookshelf_create','(2) Grayspace Documentation',1,'172.20.0.4',2,'bookshelf','2023-03-28 22:35:57','2023-03-28 22:35:57'),(7,'book_create','(2) Network Diagram',1,'172.20.0.4',2,'book','2023-03-28 22:36:18','2023-03-28 22:36:18'),(8,'bookshelf_update','(2) Grayspace Documentation',1,'172.20.0.4',2,'bookshelf','2023-03-28 22:36:18','2023-03-28 22:36:18'),(9,'page_create','(2) Overall network diagram',1,'172.20.0.4',2,'page','2023-03-28 22:58:26','2023-03-28 22:58:26'),(10,'book_delete','(1) test',1,'172.20.0.4',1,'book','2023-03-28 23:24:32','2023-03-28 23:24:32'),(11,'page_create','(3) Network Diagram Notes',1,'172.20.0.4',3,'page','2023-03-28 23:25:21','2023-03-28 23:25:21'),(12,'book_update','(2) Network Diagram',1,'172.20.0.4',2,'book','2023-03-28 23:25:37','2023-03-28 23:25:37'),(13,'page_update','(2) Network Diagram',1,'172.20.0.4',2,'page','2023-03-28 23:26:05','2023-03-28 23:26:05'),(14,'book_update','(2) Network Overview',1,'172.20.0.4',2,'book','2023-03-28 23:26:26','2023-03-28 23:26:26'),(15,'page_update','(3) Network Diagram Notes',1,'172.20.0.4',3,'page','2023-03-28 23:57:46','2023-03-28 23:57:46'),(16,'book_create','(3) Cyber Range Systems Overview',1,'172.20.0.4',3,'book','2023-03-28 23:58:23','2023-03-28 23:58:23'),(17,'bookshelf_update','(2) Grayspace Documentation',1,'172.20.0.4',2,'bookshelf','2023-03-28 23:58:23','2023-03-28 23:58:23'),(18,'page_create','(4) RootDNS',1,'172.20.0.4',4,'page','2023-03-29 00:43:26','2023-03-29 00:43:26'),(19,'page_update','(4) RootDNS',1,'172.20.0.4',4,'page','2023-03-29 01:05:30','2023-03-29 01:05:30'),(20,'page_create','(5) Web-Services',1,'172.20.0.4',5,'page','2023-03-29 01:21:11','2023-03-29 01:21:11'),(21,'page_create','(6) CA-Server',1,'172.20.0.4',6,'page','2023-03-29 01:21:22','2023-03-29 01:21:22'),(22,'page_update','(6) CA-Server',1,'172.20.0.4',6,'page','2023-03-29 01:32:10','2023-03-29 01:32:10'),(23,'page_create','(7) Traffic-Gen',1,'172.20.0.4',7,'page','2023-03-29 01:39:47','2023-03-29 01:39:47'),(24,'page_create','(8) Traffic-WebHost',1,'172.20.0.4',8,'page','2023-03-29 01:41:20','2023-03-29 01:41:20'),(25,'page_create','(9) NRTS',1,'172.20.0.4',9,'page','2023-03-29 01:41:30','2023-03-29 01:41:30'),(26,'page_update','(9) NRTS',1,'172.20.0.4',9,'page','2023-03-29 01:47:28','2023-03-29 01:47:28'),(27,'auth_login','standard; (1) Admin',1,'172.20.0.4',NULL,NULL,'2023-03-29 16:11:29','2023-03-29 16:11:29'),(28,'page_update','(7) Traffic-Gen',1,'172.20.0.4',7,'page','2023-03-29 16:40:12','2023-03-29 16:40:12'),(29,'page_update','(9) NRTS',1,'172.20.0.4',9,'page','2023-03-29 17:34:27','2023-03-29 17:34:27'),(30,'auth_login','standard; (1) Admin',1,'172.20.0.4',NULL,NULL,'2023-03-30 16:35:33','2023-03-30 16:35:33'),(31,'book_create','(4) How to Guides',1,'172.20.0.4',4,'book','2023-03-30 16:36:37','2023-03-30 16:36:37'),(32,'bookshelf_update','(2) Grayspace Documentation',1,'172.20.0.4',2,'bookshelf','2023-03-30 16:36:37','2023-03-30 16:36:37'),(33,'book_create','(5) Register DNS',1,'172.20.0.4',5,'book','2023-03-30 17:46:16','2023-03-30 17:46:16'),(34,'page_create','(10) New Page',1,'172.20.0.4',10,'page','2023-03-30 17:48:42','2023-03-30 17:48:42'),(35,'page_update','(10) New Page',1,'172.20.0.4',10,'page','2023-03-30 18:10:12','2023-03-30 18:10:12'),(36,'page_update','(10) Three ways of registering domains',1,'172.20.0.4',10,'page','2023-03-30 18:10:46','2023-03-30 18:10:46'),(37,'page_update','(10) Three ways of registering domains',1,'172.20.0.4',10,'page','2023-03-30 18:11:30','2023-03-30 18:11:30'),(38,'page_update','(10) Manual Domain Registration',1,'172.20.0.4',10,'page','2023-03-30 19:03:04','2023-03-30 19:03:04'),(39,'auth_login','standard; (1) Admin',1,'172.20.0.4',NULL,NULL,'2023-03-30 19:43:38','2023-03-30 19:43:38'),(40,'page_update','(10) Manual Domain Registration',1,'172.20.0.4',10,'page','2023-03-30 19:44:46','2023-03-30 19:44:46'),(41,'page_update','(10) Manual Domain Registration',1,'172.20.0.4',10,'page','2023-03-30 19:46:00','2023-03-30 19:46:00'),(42,'page_update','(10) Manual Domain Registration',1,'172.20.0.4',10,'page','2023-03-30 19:48:58','2023-03-30 19:48:58'),(43,'page_update','(10) Manual Domain Registration',1,'172.20.0.4',10,'page','2023-03-30 20:01:02','2023-03-30 20:01:02'),(44,'page_move','(10) Manual Domain Registration',1,'172.20.0.4',10,'page','2023-03-30 20:02:13','2023-03-30 20:02:13'),(45,'book_delete','(5) Register DNS',1,'172.20.0.4',5,'book','2023-03-30 20:02:33','2023-03-30 20:02:33'),(46,'auth_login','standard; (1) Admin',1,'172.20.0.4',NULL,NULL,'2023-03-31 00:25:59','2023-03-31 00:25:59'),(47,'auth_login','standard; (1) Admin',1,'172.20.0.4',NULL,NULL,'2023-04-03 16:32:15','2023-04-03 16:32:15'),(48,'page_update','(4) RootDNS',1,'172.20.0.4',4,'page','2023-04-03 16:44:56','2023-04-03 16:44:56'),(49,'page_update','(6) CA-Server',1,'172.20.0.4',6,'page','2023-04-03 16:55:17','2023-04-03 16:55:17'),(50,'page_update','(7) Traffic-Gen',1,'172.20.0.4',7,'page','2023-04-03 17:03:25','2023-04-03 17:03:25'),(51,'page_update','(2) Network Diagram',1,'172.20.0.4',2,'page','2023-04-03 17:21:54','2023-04-03 17:21:54'),(52,'page_update','(2) Network Diagram',1,'172.20.0.4',2,'page','2023-04-03 17:26:13','2023-04-03 17:26:13'),(53,'auth_login','standard; (1) Admin',1,'172.20.0.4',NULL,NULL,'2023-04-03 19:48:13','2023-04-03 19:48:13'),(54,'page_create','(11) Proxy All the things',1,'172.20.0.4',11,'page','2023-04-03 19:54:51','2023-04-03 19:54:51'),(55,'page_update','(11) Proxy All the things',1,'172.20.0.4',11,'page','2023-04-03 20:15:24','2023-04-03 20:15:24'),(56,'page_create','(12) Code Signing Certificates for Binaries',1,'172.20.0.4',12,'page','2023-04-03 20:18:59','2023-04-03 20:18:59'),(57,'page_create','(13) Using the NRTS server',1,'172.20.0.4',13,'page','2023-04-03 21:31:35','2023-04-03 21:31:35'),(58,'chapter_create','(1) test',1,'172.20.0.4',1,'chapter','2023-04-03 21:32:05','2023-04-03 21:32:05'),(59,'chapter_delete','(1) test',1,'172.20.0.4',1,'chapter','2023-04-03 21:32:15','2023-04-03 21:32:15'),(60,'book_create','(6) Using the NRTS',1,'172.20.0.4',6,'book','2023-04-03 21:33:04','2023-04-03 21:33:04'),(61,'page_move','(13) Using the NRTS server',1,'172.20.0.4',13,'page','2023-04-03 21:33:23','2023-04-03 21:33:23'),(62,'book_update','(6) Using the NRTS',1,'172.20.0.4',6,'book','2023-04-03 21:33:40','2023-04-03 21:33:40'),(63,'page_update','(13) Creating Cobalt Strike C2 Profiles',1,'172.20.0.4',13,'page','2023-04-03 21:34:19','2023-04-03 21:34:19'),(64,'book_update','(6) Using the NRTS',1,'172.20.0.4',6,'book','2023-04-03 21:34:31','2023-04-03 21:34:31'),(65,'page_create','(14) Starting a Cobalt Strike Teamserver',1,'172.20.0.4',14,'page','2023-04-03 21:36:18','2023-04-03 21:36:18'),(66,'page_update','(14) Starting a Cobalt Strike Teamserver',1,'172.20.0.4',14,'page','2023-04-03 22:23:02','2023-04-03 22:23:02'),(67,'page_create','(15) Starting a HAProxy Redirector',1,'172.20.0.4',15,'page','2023-04-03 22:23:22','2023-04-03 22:23:22'),(68,'page_update','(14) Starting a Cobalt Strike Teamserver',1,'172.20.0.4',14,'page','2023-04-03 22:23:43','2023-04-03 22:23:43'),(69,'page_update','(15) Starting a HAProxy Redirector',1,'172.20.0.4',15,'page','2023-04-03 22:27:44','2023-04-03 22:27:44'),(70,'page_update','(15) Starting a HAProxy Redirector',1,'172.20.0.4',15,'page','2023-04-03 23:39:39','2023-04-03 23:39:39'),(71,'page_update','(15) Starting a HAProxy Redirector',1,'172.20.0.4',15,'page','2023-04-04 00:13:12','2023-04-04 00:13:12'),(72,'page_update','(15) Making a HAProxy Redirector',1,'172.20.0.4',15,'page','2023-04-04 00:13:32','2023-04-04 00:13:32'),(73,'page_create','(16) Making a NGINX Redirector',1,'172.20.0.4',16,'page','2023-04-04 00:13:47','2023-04-04 00:13:47'),(74,'page_update','(15) Making a HAProxy Redirector',1,'172.20.0.4',15,'page','2023-04-04 00:14:30','2023-04-04 00:14:30'),(75,'page_update','(16) Making a NGINX Redirector',1,'172.20.0.4',16,'page','2023-04-04 01:10:33','2023-04-04 01:10:33'),(76,'page_create','(17) Building a Payload Host',1,'172.20.0.4',17,'page','2023-04-04 01:12:48','2023-04-04 01:12:48'),(77,'page_update','(15) Making a HAProxy Redirector',1,'172.20.0.4',15,'page','2023-04-04 01:13:04','2023-04-04 01:13:04'),(78,'page_update','(17) Building a Payload Host',1,'172.20.0.4',17,'page','2023-04-04 01:52:13','2023-04-04 01:52:13'),(79,'page_create','(18) Setting up a Phishing Attack',1,'172.20.0.4',18,'page','2023-04-04 01:53:10','2023-04-04 01:53:10'),(80,'page_update','(17) Building a Payload Host',1,'172.20.0.4',17,'page','2023-04-04 01:53:26','2023-04-04 01:53:26'),(81,'page_update','(18) Setting up a Phishing Attack',1,'172.20.0.4',18,'page','2023-04-04 01:59:18','2023-04-04 01:59:18'),(82,'auth_login','standard; (1) Admin',1,'172.20.0.4',NULL,NULL,'2023-04-04 16:02:05','2023-04-04 16:02:05'),(83,'page_update','(18) Setting up a Phishing Attack',1,'172.20.0.4',18,'page','2023-04-04 17:13:41','2023-04-04 17:13:41'),(84,'page_create','(19) Managing Services',1,'172.20.0.4',19,'page','2023-04-04 17:42:40','2023-04-04 17:42:40'),(85,'page_update','(13) Creating Cobalt Strike C2 Profiles',1,'172.20.0.4',13,'page','2023-04-04 17:58:13','2023-04-04 17:58:13'),(86,'page_update','(14) Starting a Cobalt Strike Teamserver',1,'172.20.0.4',14,'page','2023-04-04 18:00:18','2023-04-04 18:00:18'),(87,'page_update','(14) Starting a Cobalt Strike Teamserver',1,'172.20.0.4',14,'page','2023-04-04 18:14:30','2023-04-04 18:14:30'),(88,'page_update','(15) Making a HAProxy Redirector',1,'172.20.0.4',15,'page','2023-04-04 18:44:47','2023-04-04 18:44:47'),(89,'page_update','(16) Making a NGINX Redirector',1,'172.20.0.4',16,'page','2023-04-04 19:05:32','2023-04-04 19:05:32'),(90,'page_update','(17) Building a Payload Host',1,'172.20.0.4',17,'page','2023-04-04 19:24:08','2023-04-04 19:24:08'),(91,'page_update','(18) Setting up a Phishing Attack',1,'172.20.0.4',18,'page','2023-04-04 19:38:37','2023-04-04 19:38:37'),(92,'bookshelf_update','(2) Grayspace Documentation',1,'172.20.0.4',2,'bookshelf','2023-04-04 19:41:52','2023-04-04 19:41:52'),(93,'book_update','(2) Network Overview',1,'172.20.0.4',2,'book','2023-04-04 19:52:38','2023-04-04 19:52:38'),(94,'book_update','(3) Cyber Range Systems Overview',1,'172.20.0.4',3,'book','2023-04-04 19:52:55','2023-04-04 19:52:55'),(95,'book_update','(4) How to Guides',1,'172.20.0.4',4,'book','2023-04-04 19:53:12','2023-04-04 19:53:12'),(96,'book_update','(6) Using the NRTS',1,'172.20.0.4',6,'book','2023-04-04 19:55:11','2023-04-04 19:55:11'),(97,'bookshelf_update','(2) Grayspace Documentation',1,'172.20.0.4',2,'bookshelf','2023-04-04 19:57:43','2023-04-04 19:57:43'),(98,'page_update','(3) Network Diagram Notes',1,'172.20.0.4',3,'page','2023-04-04 20:30:23','2023-04-04 20:30:23'),(99,'page_update','(2) Network Diagram',1,'172.20.0.4',2,'page','2023-04-04 20:30:55','2023-04-04 20:30:55'),(100,'page_delete','(3) Network Diagram Notes',1,'172.20.0.4',3,'page','2023-04-04 20:31:12','2023-04-04 20:31:12'),(101,'page_update','(10) Manual Domain Registration',1,'172.20.0.4',10,'page','2023-04-04 22:35:55','2023-04-04 22:35:55'),(102,'page_update','(10) Manual Domain Registration',1,'172.20.0.4',10,'page','2023-04-04 22:39:36','2023-04-04 22:39:36'),(103,'page_update','(13) Creating Cobalt Strike C2 Profiles (buildredteam.sh)',1,'172.20.0.4',13,'page','2023-04-04 22:40:21','2023-04-04 22:40:21'),(104,'page_update','(14) Starting a Cobalt Strike Teamserver (buildredteam.sh)',1,'172.20.0.4',14,'page','2023-04-04 22:40:39','2023-04-04 22:40:39'),(105,'page_update','(15) Making a HAProxy Redirector (buildredteam.sh)',1,'172.20.0.4',15,'page','2023-04-04 22:40:56','2023-04-04 22:40:56'),(106,'page_update','(16) Making a NGINX Redirector (buildredteam.sh)',1,'172.20.0.4',16,'page','2023-04-04 22:41:17','2023-04-04 22:41:17'),(107,'page_update','(17) Building a Payload Host (buildredteam.sh)',1,'172.20.0.4',17,'page','2023-04-04 22:41:36','2023-04-04 22:41:36'),(108,'page_update','(18) Setting up a Phishing Attack (buildredteam.sh)',1,'172.20.0.4',18,'page','2023-04-04 22:41:53','2023-04-04 22:41:53'),(109,'page_update','(19) Managing Services (buildredteam.sh)',1,'172.20.0.4',19,'page','2023-04-04 22:42:09','2023-04-04 22:42:09'),(110,'page_update','(19) Managing Services (buildredteam.sh)',1,'172.20.0.4',19,'page','2023-04-05 00:01:57','2023-04-05 00:01:57'),(111,'book_update','(6) Using the NRTS',1,'172.20.0.4',6,'book','2023-04-05 00:03:09','2023-04-05 00:03:09'),(112,'page_update','(13) Creating Cobalt Strike C2 Profiles',1,'172.20.0.4',13,'page','2023-04-05 00:04:22','2023-04-05 00:04:22'),(113,'page_create','(20) Managing DNS',1,'172.20.0.4',20,'page','2023-04-05 00:09:09','2023-04-05 00:09:09'),(114,'page_update','(20) Managing DNS',1,'172.20.0.4',20,'page','2023-04-05 00:16:02','2023-04-05 00:16:02'),(115,'page_update','(20) Managing DNS (ManageDNS.sh)',1,'172.20.0.4',20,'page','2023-04-05 00:35:13','2023-04-05 00:35:13'),(116,'page_update','(18) Phishing Attack (buildredteam.sh)',1,'172.20.0.4',18,'page','2023-04-05 00:35:38','2023-04-05 00:35:38'),(117,'page_update','(20) Managing DNS (ManageDNS.sh)',1,'172.20.0.4',20,'page','2023-04-05 00:38:36','2023-04-05 00:38:36'),(118,'page_create','(21) Reverting the NRTS',1,'172.20.0.4',21,'page','2023-04-05 00:42:15','2023-04-05 00:42:15'),(119,'user_update','(1) Admin',1,'172.20.0.4',NULL,NULL,'2023-04-05 00:45:35','2023-04-05 00:45:35'),(120,'book_create','(7) Default Creds for all the things',1,'172.20.0.4',7,'book','2023-04-05 00:46:19','2023-04-05 00:46:19'),(121,'bookshelf_update','(2) Grayspace Documentation',1,'172.20.0.4',2,'bookshelf','2023-04-05 00:46:19','2023-04-05 00:46:19'),(122,'book_update','(7) Default Creds for all the things',1,'172.20.0.4',7,'book','2023-04-05 00:47:13','2023-04-05 00:47:13'),(123,'page_create','(22) Cred list',1,'172.20.0.4',22,'page','2023-04-05 00:47:39','2023-04-05 00:47:39'),(124,'page_update','(22) Cred list',1,'172.20.0.4',22,'page','2023-04-05 00:58:07','2023-04-05 00:58:07'),(125,'page_update','(22) Cred list',1,'172.20.0.4',22,'page','2023-04-05 00:58:39','2023-04-05 00:58:39'),(126,'page_update','(22) Cred list',1,'172.20.0.4',22,'page','2023-04-05 00:59:29','2023-04-05 00:59:29'),(127,'auth_login','standard; (1) Admin',1,'172.20.0.4',NULL,NULL,'2023-04-05 01:00:19','2023-04-05 01:00:19'),(128,'settings_update','features',1,'172.20.0.4',NULL,NULL,'2023-04-05 01:00:52','2023-04-05 01:00:52');
/*!40000 ALTER TABLE `activities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `api_tokens`
--

DROP TABLE IF EXISTS `api_tokens`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `api_tokens` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(191) NOT NULL,
  `token_id` varchar(191) NOT NULL,
  `secret` varchar(191) NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `expires_at` date NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `api_tokens_token_id_unique` (`token_id`),
  KEY `api_tokens_user_id_index` (`user_id`),
  KEY `api_tokens_expires_at_index` (`expires_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `api_tokens`
--

LOCK TABLES `api_tokens` WRITE;
/*!40000 ALTER TABLE `api_tokens` DISABLE KEYS */;
/*!40000 ALTER TABLE `api_tokens` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `attachments`
--

DROP TABLE IF EXISTS `attachments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `attachments` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(191) NOT NULL,
  `path` text NOT NULL,
  `extension` varchar(20) NOT NULL,
  `uploaded_to` int(11) NOT NULL,
  `external` tinyint(1) NOT NULL,
  `order` int(11) NOT NULL,
  `created_by` int(11) NOT NULL,
  `updated_by` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `attachments_uploaded_to_index` (`uploaded_to`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `attachments`
--

LOCK TABLES `attachments` WRITE;
/*!40000 ALTER TABLE `attachments` DISABLE KEYS */;
/*!40000 ALTER TABLE `attachments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `books`
--

DROP TABLE IF EXISTS `books`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `books` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(191) NOT NULL,
  `slug` varchar(191) NOT NULL,
  `description` text NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `updated_by` int(11) NOT NULL,
  `image_id` int(11) DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `owned_by` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `books_slug_index` (`slug`),
  KEY `books_created_by_index` (`created_by`),
  KEY `books_updated_by_index` (`updated_by`),
  KEY `books_owned_by_index` (`owned_by`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `books`
--

LOCK TABLES `books` WRITE;
/*!40000 ALTER TABLE `books` DISABLE KEYS */;
INSERT INTO `books` VALUES (1,'test','test','','2023-03-28 22:06:48','2023-03-28 23:24:32',1,1,NULL,'2023-03-28 23:24:32',1),(2,'Network Overview','network-overview','','2023-03-28 22:36:18','2023-04-04 19:52:38',1,1,131,NULL,1),(3,'Cyber Range Systems Overview','cyber-range-systems-overview','','2023-03-28 23:58:23','2023-04-04 19:52:55',1,1,132,NULL,1),(4,'How to Guides','how-to-guides','','2023-03-30 16:36:37','2023-04-04 19:53:12',1,1,133,NULL,1),(5,'Register DNS','register-dns','','2023-03-30 17:46:16','2023-03-30 20:02:33',1,1,NULL,'2023-03-30 20:02:33',1),(6,'Using the NRTS','using-the-nrts','The Not Red Team Server (NRTS) is the swiss army knife for building red team infrastructure.   This guide will provide step by step instructions for using it\'s key features.  For details on the file structure go to -> Cyber Range Systems Overview -> NRTS','2023-04-03 21:33:04','2023-04-05 00:03:09',1,1,134,NULL,1),(7,'Default Creds for all the things','default-creds-for-all-the-things','','2023-04-05 00:46:19','2023-04-05 00:47:13',1,1,154,NULL,1);
/*!40000 ALTER TABLE `books` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `bookshelves`
--

DROP TABLE IF EXISTS `bookshelves`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bookshelves` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(180) NOT NULL,
  `slug` varchar(180) NOT NULL,
  `description` text NOT NULL,
  `created_by` int(11) DEFAULT NULL,
  `updated_by` int(11) DEFAULT NULL,
  `image_id` int(11) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `owned_by` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `bookshelves_slug_index` (`slug`),
  KEY `bookshelves_created_by_index` (`created_by`),
  KEY `bookshelves_updated_by_index` (`updated_by`),
  KEY `bookshelves_owned_by_index` (`owned_by`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bookshelves`
--

LOCK TABLES `bookshelves` WRITE;
/*!40000 ALTER TABLE `bookshelves` DISABLE KEYS */;
INSERT INTO `bookshelves` VALUES (1,'Grayspace','grayspace','',1,1,NULL,'2023-03-28 22:35:13','2023-03-28 22:35:23','2023-03-28 22:35:23',1),(2,'Grayspace Documentation','grayspace-documentation','',1,1,135,'2023-03-28 22:35:57','2023-04-04 19:57:43',NULL,1);
/*!40000 ALTER TABLE `bookshelves` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `bookshelves_books`
--

DROP TABLE IF EXISTS `bookshelves_books`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bookshelves_books` (
  `bookshelf_id` int(10) unsigned NOT NULL,
  `book_id` int(10) unsigned NOT NULL,
  `order` int(10) unsigned NOT NULL,
  PRIMARY KEY (`bookshelf_id`,`book_id`),
  KEY `bookshelves_books_book_id_foreign` (`book_id`),
  CONSTRAINT `bookshelves_books_book_id_foreign` FOREIGN KEY (`book_id`) REFERENCES `books` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `bookshelves_books_bookshelf_id_foreign` FOREIGN KEY (`bookshelf_id`) REFERENCES `bookshelves` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bookshelves_books`
--

LOCK TABLES `bookshelves_books` WRITE;
/*!40000 ALTER TABLE `bookshelves_books` DISABLE KEYS */;
INSERT INTO `bookshelves_books` VALUES (2,2,0),(2,3,1),(2,4,2),(2,6,3),(2,7,4);
/*!40000 ALTER TABLE `bookshelves_books` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cache`
--

DROP TABLE IF EXISTS `cache`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cache` (
  `key` varchar(191) NOT NULL,
  `value` text NOT NULL,
  `expiration` int(11) NOT NULL,
  UNIQUE KEY `cache_key_unique` (`key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cache`
--

LOCK TABLES `cache` WRITE;
/*!40000 ALTER TABLE `cache` DISABLE KEYS */;
/*!40000 ALTER TABLE `cache` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `chapters`
--

DROP TABLE IF EXISTS `chapters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `chapters` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `book_id` int(11) NOT NULL,
  `slug` varchar(191) NOT NULL,
  `name` text NOT NULL,
  `description` text NOT NULL,
  `priority` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `updated_by` int(11) NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `owned_by` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `chapters_slug_index` (`slug`),
  KEY `chapters_book_id_index` (`book_id`),
  KEY `chapters_priority_index` (`priority`),
  KEY `chapters_created_by_index` (`created_by`),
  KEY `chapters_updated_by_index` (`updated_by`),
  KEY `chapters_owned_by_index` (`owned_by`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chapters`
--

LOCK TABLES `chapters` WRITE;
/*!40000 ALTER TABLE `chapters` DISABLE KEYS */;
INSERT INTO `chapters` VALUES (1,4,'test','test','',6,'2023-04-03 21:32:05','2023-04-03 21:32:15',1,1,'2023-04-03 21:32:15',1);
/*!40000 ALTER TABLE `chapters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `entity_id` int(10) unsigned NOT NULL,
  `entity_type` varchar(191) NOT NULL,
  `text` longtext DEFAULT NULL,
  `html` longtext DEFAULT NULL,
  `parent_id` int(10) unsigned DEFAULT NULL,
  `local_id` int(10) unsigned DEFAULT NULL,
  `created_by` int(10) unsigned NOT NULL,
  `updated_by` int(10) unsigned DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `comments_entity_id_entity_type_index` (`entity_id`,`entity_type`),
  KEY `comments_local_id_index` (`local_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `deletions`
--

DROP TABLE IF EXISTS `deletions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `deletions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `deleted_by` int(11) NOT NULL,
  `deletable_type` varchar(100) NOT NULL,
  `deletable_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `deletions_deleted_by_index` (`deleted_by`),
  KEY `deletions_deletable_type_index` (`deletable_type`),
  KEY `deletions_deletable_id_index` (`deletable_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `deletions`
--

LOCK TABLES `deletions` WRITE;
/*!40000 ALTER TABLE `deletions` DISABLE KEYS */;
INSERT INTO `deletions` VALUES (1,1,'bookshelf',1,'2023-03-28 22:35:23','2023-03-28 22:35:23'),(2,1,'book',1,'2023-03-28 23:24:32','2023-03-28 23:24:32'),(3,1,'book',5,'2023-03-30 20:02:33','2023-03-30 20:02:33'),(4,1,'chapter',1,'2023-04-03 21:32:15','2023-04-03 21:32:15'),(5,1,'page',3,'2023-04-04 20:31:12','2023-04-04 20:31:12');
/*!40000 ALTER TABLE `deletions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `email_confirmations`
--

DROP TABLE IF EXISTS `email_confirmations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `email_confirmations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `token` varchar(191) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `email_confirmations_user_id_index` (`user_id`),
  KEY `email_confirmations_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `email_confirmations`
--

LOCK TABLES `email_confirmations` WRITE;
/*!40000 ALTER TABLE `email_confirmations` DISABLE KEYS */;
/*!40000 ALTER TABLE `email_confirmations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `entity_permissions`
--

DROP TABLE IF EXISTS `entity_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `entity_permissions` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `entity_id` int(10) unsigned NOT NULL,
  `entity_type` varchar(25) NOT NULL,
  `role_id` int(10) unsigned NOT NULL,
  `view` tinyint(1) NOT NULL DEFAULT 0,
  `create` tinyint(1) NOT NULL DEFAULT 0,
  `update` tinyint(1) NOT NULL DEFAULT 0,
  `delete` tinyint(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `new_entity_permissions_entity_id_entity_type_index` (`entity_id`,`entity_type`),
  KEY `new_entity_permissions_role_id_index` (`role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `entity_permissions`
--

LOCK TABLES `entity_permissions` WRITE;
/*!40000 ALTER TABLE `entity_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `entity_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `failed_jobs`
--

DROP TABLE IF EXISTS `failed_jobs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `failed_jobs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `uuid` varchar(191) NOT NULL,
  `connection` text NOT NULL,
  `queue` text NOT NULL,
  `payload` longtext NOT NULL,
  `exception` longtext NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `failed_jobs_uuid_unique` (`uuid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `failed_jobs`
--

LOCK TABLES `failed_jobs` WRITE;
/*!40000 ALTER TABLE `failed_jobs` DISABLE KEYS */;
/*!40000 ALTER TABLE `failed_jobs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `favourites`
--

DROP TABLE IF EXISTS `favourites`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `favourites` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `favouritable_id` int(11) NOT NULL,
  `favouritable_type` varchar(100) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `favouritable_index` (`favouritable_id`,`favouritable_type`),
  KEY `favourites_user_id_index` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `favourites`
--

LOCK TABLES `favourites` WRITE;
/*!40000 ALTER TABLE `favourites` DISABLE KEYS */;
/*!40000 ALTER TABLE `favourites` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `images`
--

DROP TABLE IF EXISTS `images`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `images` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(191) NOT NULL,
  `url` varchar(191) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `updated_by` int(11) NOT NULL,
  `path` varchar(400) NOT NULL,
  `type` varchar(191) NOT NULL,
  `uploaded_to` int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `images_type_index` (`type`),
  KEY `images_uploaded_to_index` (`uploaded_to`)
) ENGINE=InnoDB AUTO_INCREMENT=155 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `images`
--

LOCK TABLES `images` WRITE;
/*!40000 ALTER TABLE `images` DISABLE KEYS */;
INSERT INTO `images` VALUES (1,'Drawing-1-1680023230.png','https://redbook.com/uploads/images/drawio/2023-03/drawing-1-1680023230.png','2023-03-28 22:07:10','2023-03-28 22:07:10',1,1,'/uploads/images/drawio/2023-03/drawing-1-1680023230.png','drawio',1),(2,'Drawing-1-1680026302.png','https://redbook.com/uploads/images/drawio/2023-03/drawing-1-1680026302.png','2023-03-28 22:58:22','2023-03-28 22:58:22',1,1,'/uploads/images/drawio/2023-03/drawing-1-1680026302.png','drawio',2),(11,'exampleDNSfile.png','https://redbook.com/uploads/images/gallery/2023-03/examplednsfile.png','2023-03-30 19:46:47','2023-03-30 19:46:47',1,1,'/uploads/images/gallery/2023-03/examplednsfile.png','gallery',10),(12,'RegisterDNS-help.png','https://redbook.com/uploads/images/gallery/2023-03/registerdns-help.png','2023-03-30 19:46:47','2023-03-30 19:46:47',1,1,'/uploads/images/gallery/2023-03/registerdns-help.png','gallery',10),(13,'registerprocess.png','https://redbook.com/uploads/images/gallery/2023-03/registerprocess.png','2023-03-30 19:46:47','2023-03-30 19:46:47',1,1,'/uploads/images/gallery/2023-03/registerprocess.png','gallery',10),(14,'Drawing-1-1680524511.png','https://redbook.com/uploads/images/drawio/2023-04/drawing-1-1680524511.png','2023-04-03 17:21:51','2023-04-03 17:21:51',1,1,'/uploads/images/drawio/2023-04/drawing-1-1680524511.png','drawio',2),(15,'Drawing-1-1680524770.png','https://redbook.com/uploads/images/drawio/2023-04/drawing-1-1680524770.png','2023-04-03 17:26:10','2023-04-03 17:26:10',1,1,'/uploads/images/drawio/2023-04/drawing-1-1680524770.png','drawio',2),(16,'image.png','https://redbook.com/uploads/images/gallery/2023-04/image.png','2023-04-03 21:45:43','2023-04-03 21:45:43',1,1,'/uploads/images/gallery/2023-04/image.png','gallery',14),(17,'image.png','https://redbook.com/uploads/images/gallery/2023-04/hGyimage.png','2023-04-03 21:49:23','2023-04-03 21:49:23',1,1,'/uploads/images/gallery/2023-04/hGyimage.png','gallery',14),(18,'image.png','https://redbook.com/uploads/images/gallery/2023-04/N1Iimage.png','2023-04-03 21:50:24','2023-04-03 21:50:24',1,1,'/uploads/images/gallery/2023-04/N1Iimage.png','gallery',14),(19,'image.png','https://redbook.com/uploads/images/gallery/2023-04/KZNimage.png','2023-04-03 21:53:25','2023-04-03 21:53:25',1,1,'/uploads/images/gallery/2023-04/KZNimage.png','gallery',14),(20,'image.png','https://redbook.com/uploads/images/gallery/2023-04/uPMimage.png','2023-04-03 21:54:45','2023-04-03 21:54:45',1,1,'/uploads/images/gallery/2023-04/uPMimage.png','gallery',14),(21,'image.png','https://redbook.com/uploads/images/gallery/2023-04/vgRimage.png','2023-04-03 21:58:48','2023-04-03 21:58:48',1,1,'/uploads/images/gallery/2023-04/vgRimage.png','gallery',14),(22,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Hlhimage.png','2023-04-03 22:00:02','2023-04-03 22:00:02',1,1,'/uploads/images/gallery/2023-04/Hlhimage.png','gallery',14),(23,'image.png','https://redbook.com/uploads/images/gallery/2023-04/0Ddimage.png','2023-04-03 22:01:32','2023-04-03 22:01:32',1,1,'/uploads/images/gallery/2023-04/0Ddimage.png','gallery',14),(24,'image.png','https://redbook.com/uploads/images/gallery/2023-04/c2Fimage.png','2023-04-03 22:03:40','2023-04-03 22:03:40',1,1,'/uploads/images/gallery/2023-04/c2Fimage.png','gallery',14),(25,'image.png','https://redbook.com/uploads/images/gallery/2023-04/iWuimage.png','2023-04-03 22:07:25','2023-04-03 22:07:25',1,1,'/uploads/images/gallery/2023-04/iWuimage.png','gallery',14),(26,'image.png','https://redbook.com/uploads/images/gallery/2023-04/JHKimage.png','2023-04-03 22:16:09','2023-04-03 22:16:09',1,1,'/uploads/images/gallery/2023-04/JHKimage.png','gallery',14),(27,'image.png','https://redbook.com/uploads/images/gallery/2023-04/3ybimage.png','2023-04-03 22:17:20','2023-04-03 22:17:20',1,1,'/uploads/images/gallery/2023-04/3ybimage.png','gallery',14),(28,'image.png','https://redbook.com/uploads/images/gallery/2023-04/JB2image.png','2023-04-03 22:19:20','2023-04-03 22:19:20',1,1,'/uploads/images/gallery/2023-04/JB2image.png','gallery',14),(29,'image.png','https://redbook.com/uploads/images/gallery/2023-04/b00image.png','2023-04-03 22:20:14','2023-04-03 22:20:14',1,1,'/uploads/images/gallery/2023-04/b00image.png','gallery',14),(30,'image.png','https://redbook.com/uploads/images/gallery/2023-04/BAHimage.png','2023-04-03 22:22:54','2023-04-03 22:22:54',1,1,'/uploads/images/gallery/2023-04/BAHimage.png','gallery',14),(31,'image.png','https://redbook.com/uploads/images/gallery/2023-04/qoiimage.png','2023-04-03 22:35:07','2023-04-03 22:35:07',1,1,'/uploads/images/gallery/2023-04/qoiimage.png','gallery',15),(32,'image.png','https://redbook.com/uploads/images/gallery/2023-04/59Fimage.png','2023-04-03 22:44:09','2023-04-03 22:44:09',1,1,'/uploads/images/gallery/2023-04/59Fimage.png','gallery',15),(33,'image.png','https://redbook.com/uploads/images/gallery/2023-04/vq2image.png','2023-04-03 22:45:28','2023-04-03 22:45:28',1,1,'/uploads/images/gallery/2023-04/vq2image.png','gallery',15),(34,'image.png','https://redbook.com/uploads/images/gallery/2023-04/6itimage.png','2023-04-03 22:48:29','2023-04-03 22:48:29',1,1,'/uploads/images/gallery/2023-04/6itimage.png','gallery',15),(35,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Ycfimage.png','2023-04-03 22:49:48','2023-04-03 22:49:48',1,1,'/uploads/images/gallery/2023-04/Ycfimage.png','gallery',15),(36,'image.png','https://redbook.com/uploads/images/gallery/2023-04/yTwimage.png','2023-04-03 22:51:01','2023-04-03 22:51:01',1,1,'/uploads/images/gallery/2023-04/yTwimage.png','gallery',15),(37,'image.png','https://redbook.com/uploads/images/gallery/2023-04/9RIimage.png','2023-04-03 22:52:25','2023-04-03 22:52:25',1,1,'/uploads/images/gallery/2023-04/9RIimage.png','gallery',15),(38,'image.png','https://redbook.com/uploads/images/gallery/2023-04/B5bimage.png','2023-04-03 22:54:18','2023-04-03 22:54:18',1,1,'/uploads/images/gallery/2023-04/B5bimage.png','gallery',15),(39,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Mc7image.png','2023-04-03 22:57:03','2023-04-03 22:57:03',1,1,'/uploads/images/gallery/2023-04/Mc7image.png','gallery',15),(40,'image.png','https://redbook.com/uploads/images/gallery/2023-04/HVYimage.png','2023-04-03 23:00:21','2023-04-03 23:00:21',1,1,'/uploads/images/gallery/2023-04/HVYimage.png','gallery',15),(41,'image.png','https://redbook.com/uploads/images/gallery/2023-04/jRdimage.png','2023-04-03 23:01:27','2023-04-03 23:01:27',1,1,'/uploads/images/gallery/2023-04/jRdimage.png','gallery',15),(42,'image.png','https://redbook.com/uploads/images/gallery/2023-04/gjaimage.png','2023-04-03 23:03:19','2023-04-03 23:03:19',1,1,'/uploads/images/gallery/2023-04/gjaimage.png','gallery',15),(43,'image.png','https://redbook.com/uploads/images/gallery/2023-04/pYCimage.png','2023-04-03 23:05:36','2023-04-03 23:05:36',1,1,'/uploads/images/gallery/2023-04/pYCimage.png','gallery',15),(44,'image.png','https://redbook.com/uploads/images/gallery/2023-04/XMHimage.png','2023-04-03 23:10:01','2023-04-03 23:10:01',1,1,'/uploads/images/gallery/2023-04/XMHimage.png','gallery',15),(45,'image.png','https://redbook.com/uploads/images/gallery/2023-04/6goimage.png','2023-04-03 23:11:36','2023-04-03 23:11:36',1,1,'/uploads/images/gallery/2023-04/6goimage.png','gallery',15),(46,'image.png','https://redbook.com/uploads/images/gallery/2023-04/hXTimage.png','2023-04-03 23:13:03','2023-04-03 23:13:03',1,1,'/uploads/images/gallery/2023-04/hXTimage.png','gallery',15),(47,'image.png','https://redbook.com/uploads/images/gallery/2023-04/uJUimage.png','2023-04-03 23:15:43','2023-04-03 23:15:43',1,1,'/uploads/images/gallery/2023-04/uJUimage.png','gallery',15),(48,'image.png','https://redbook.com/uploads/images/gallery/2023-04/0XSimage.png','2023-04-03 23:18:20','2023-04-03 23:18:20',1,1,'/uploads/images/gallery/2023-04/0XSimage.png','gallery',15),(49,'image.png','https://redbook.com/uploads/images/gallery/2023-04/pRdimage.png','2023-04-03 23:20:18','2023-04-03 23:20:18',1,1,'/uploads/images/gallery/2023-04/pRdimage.png','gallery',15),(50,'image.png','https://redbook.com/uploads/images/gallery/2023-04/hfkimage.png','2023-04-03 23:22:55','2023-04-03 23:22:55',1,1,'/uploads/images/gallery/2023-04/hfkimage.png','gallery',15),(51,'image.png','https://redbook.com/uploads/images/gallery/2023-04/pxYimage.png','2023-04-03 23:25:16','2023-04-03 23:25:16',1,1,'/uploads/images/gallery/2023-04/pxYimage.png','gallery',15),(52,'image.png','https://redbook.com/uploads/images/gallery/2023-04/cKAimage.png','2023-04-03 23:28:19','2023-04-03 23:28:19',1,1,'/uploads/images/gallery/2023-04/cKAimage.png','gallery',15),(53,'image.png','https://redbook.com/uploads/images/gallery/2023-04/mYQimage.png','2023-04-03 23:29:45','2023-04-03 23:29:45',1,1,'/uploads/images/gallery/2023-04/mYQimage.png','gallery',15),(54,'image.png','https://redbook.com/uploads/images/gallery/2023-04/TjEimage.png','2023-04-03 23:32:23','2023-04-03 23:32:23',1,1,'/uploads/images/gallery/2023-04/TjEimage.png','gallery',15),(55,'image.png','https://redbook.com/uploads/images/gallery/2023-04/2l6image.png','2023-04-03 23:33:10','2023-04-03 23:33:10',1,1,'/uploads/images/gallery/2023-04/2l6image.png','gallery',15),(56,'image.png','https://redbook.com/uploads/images/gallery/2023-04/mx6image.png','2023-04-03 23:34:32','2023-04-03 23:34:32',1,1,'/uploads/images/gallery/2023-04/mx6image.png','gallery',15),(57,'image.png','https://redbook.com/uploads/images/gallery/2023-04/tvzimage.png','2023-04-03 23:35:32','2023-04-03 23:35:32',1,1,'/uploads/images/gallery/2023-04/tvzimage.png','gallery',15),(58,'image.png','https://redbook.com/uploads/images/gallery/2023-04/dhEimage.png','2023-04-03 23:39:21','2023-04-03 23:39:21',1,1,'/uploads/images/gallery/2023-04/dhEimage.png','gallery',15),(59,'image.png','https://redbook.com/uploads/images/gallery/2023-04/B4Aimage.png','2023-04-03 23:46:43','2023-04-03 23:46:43',1,1,'/uploads/images/gallery/2023-04/B4Aimage.png','gallery',15),(60,'image.png','https://redbook.com/uploads/images/gallery/2023-04/iTDimage.png','2023-04-03 23:47:40','2023-04-03 23:47:40',1,1,'/uploads/images/gallery/2023-04/iTDimage.png','gallery',15),(61,'image.png','https://redbook.com/uploads/images/gallery/2023-04/pGyimage.png','2023-04-03 23:48:41','2023-04-03 23:48:41',1,1,'/uploads/images/gallery/2023-04/pGyimage.png','gallery',15),(62,'image.png','https://redbook.com/uploads/images/gallery/2023-04/2I5image.png','2023-04-03 23:50:21','2023-04-03 23:50:21',1,1,'/uploads/images/gallery/2023-04/2I5image.png','gallery',15),(63,'image.png','https://redbook.com/uploads/images/gallery/2023-04/3UBimage.png','2023-04-03 23:51:24','2023-04-03 23:51:24',1,1,'/uploads/images/gallery/2023-04/3UBimage.png','gallery',15),(64,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Nxsimage.png','2023-04-03 23:52:03','2023-04-03 23:52:03',1,1,'/uploads/images/gallery/2023-04/Nxsimage.png','gallery',15),(65,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Dj9image.png','2023-04-03 23:52:50','2023-04-03 23:52:50',1,1,'/uploads/images/gallery/2023-04/Dj9image.png','gallery',15),(66,'image.png','https://redbook.com/uploads/images/gallery/2023-04/h7Iimage.png','2023-04-03 23:53:21','2023-04-03 23:53:21',1,1,'/uploads/images/gallery/2023-04/h7Iimage.png','gallery',15),(67,'image.png','https://redbook.com/uploads/images/gallery/2023-04/vleimage.png','2023-04-04 00:12:47','2023-04-04 00:12:47',1,1,'/uploads/images/gallery/2023-04/vleimage.png','gallery',15),(68,'image.png','https://redbook.com/uploads/images/gallery/2023-04/CBYimage.png','2023-04-04 00:19:16','2023-04-04 00:19:16',1,1,'/uploads/images/gallery/2023-04/CBYimage.png','gallery',16),(69,'image.png','https://redbook.com/uploads/images/gallery/2023-04/ApVimage.png','2023-04-04 00:20:15','2023-04-04 00:20:15',1,1,'/uploads/images/gallery/2023-04/ApVimage.png','gallery',16),(70,'image.png','https://redbook.com/uploads/images/gallery/2023-04/RStimage.png','2023-04-04 00:36:57','2023-04-04 00:36:57',1,1,'/uploads/images/gallery/2023-04/RStimage.png','gallery',16),(71,'image.png','https://redbook.com/uploads/images/gallery/2023-04/VBWimage.png','2023-04-04 00:37:52','2023-04-04 00:37:52',1,1,'/uploads/images/gallery/2023-04/VBWimage.png','gallery',16),(72,'image.png','https://redbook.com/uploads/images/gallery/2023-04/6Qhimage.png','2023-04-04 00:39:06','2023-04-04 00:39:06',1,1,'/uploads/images/gallery/2023-04/6Qhimage.png','gallery',16),(73,'image.png','https://redbook.com/uploads/images/gallery/2023-04/mZUimage.png','2023-04-04 00:40:32','2023-04-04 00:40:32',1,1,'/uploads/images/gallery/2023-04/mZUimage.png','gallery',16),(74,'image.png','https://redbook.com/uploads/images/gallery/2023-04/bTcimage.png','2023-04-04 00:41:43','2023-04-04 00:41:43',1,1,'/uploads/images/gallery/2023-04/bTcimage.png','gallery',16),(75,'image.png','https://redbook.com/uploads/images/gallery/2023-04/X3Rimage.png','2023-04-04 00:43:21','2023-04-04 00:43:21',1,1,'/uploads/images/gallery/2023-04/X3Rimage.png','gallery',16),(76,'image.png','https://redbook.com/uploads/images/gallery/2023-04/hdjimage.png','2023-04-04 00:46:31','2023-04-04 00:46:31',1,1,'/uploads/images/gallery/2023-04/hdjimage.png','gallery',16),(77,'image.png','https://redbook.com/uploads/images/gallery/2023-04/jJGimage.png','2023-04-04 00:47:54','2023-04-04 00:47:54',1,1,'/uploads/images/gallery/2023-04/jJGimage.png','gallery',16),(78,'image.png','https://redbook.com/uploads/images/gallery/2023-04/rocimage.png','2023-04-04 00:49:13','2023-04-04 00:49:13',1,1,'/uploads/images/gallery/2023-04/rocimage.png','gallery',16),(79,'image.png','https://redbook.com/uploads/images/gallery/2023-04/rtkimage.png','2023-04-04 00:53:08','2023-04-04 00:53:08',1,1,'/uploads/images/gallery/2023-04/rtkimage.png','gallery',16),(80,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Dp2image.png','2023-04-04 00:54:27','2023-04-04 00:54:27',1,1,'/uploads/images/gallery/2023-04/Dp2image.png','gallery',16),(81,'image.png','https://redbook.com/uploads/images/gallery/2023-04/LCiimage.png','2023-04-04 00:57:10','2023-04-04 00:57:10',1,1,'/uploads/images/gallery/2023-04/LCiimage.png','gallery',16),(82,'image.png','https://redbook.com/uploads/images/gallery/2023-04/CtSimage.png','2023-04-04 00:58:55','2023-04-04 00:58:55',1,1,'/uploads/images/gallery/2023-04/CtSimage.png','gallery',16),(83,'image.png','https://redbook.com/uploads/images/gallery/2023-04/nkAimage.png','2023-04-04 01:00:29','2023-04-04 01:00:29',1,1,'/uploads/images/gallery/2023-04/nkAimage.png','gallery',16),(84,'image.png','https://redbook.com/uploads/images/gallery/2023-04/J49image.png','2023-04-04 01:02:10','2023-04-04 01:02:10',1,1,'/uploads/images/gallery/2023-04/J49image.png','gallery',16),(85,'image.png','https://redbook.com/uploads/images/gallery/2023-04/sbaimage.png','2023-04-04 01:03:51','2023-04-04 01:03:51',1,1,'/uploads/images/gallery/2023-04/sbaimage.png','gallery',16),(86,'image.png','https://redbook.com/uploads/images/gallery/2023-04/i8Nimage.png','2023-04-04 01:05:33','2023-04-04 01:05:33',1,1,'/uploads/images/gallery/2023-04/i8Nimage.png','gallery',16),(87,'image.png','https://redbook.com/uploads/images/gallery/2023-04/xo4image.png','2023-04-04 01:06:40','2023-04-04 01:06:40',1,1,'/uploads/images/gallery/2023-04/xo4image.png','gallery',16),(88,'image.png','https://redbook.com/uploads/images/gallery/2023-04/ROCimage.png','2023-04-04 01:07:59','2023-04-04 01:07:59',1,1,'/uploads/images/gallery/2023-04/ROCimage.png','gallery',16),(89,'image.png','https://redbook.com/uploads/images/gallery/2023-04/HDTimage.png','2023-04-04 01:09:13','2023-04-04 01:09:13',1,1,'/uploads/images/gallery/2023-04/HDTimage.png','gallery',16),(90,'image.png','https://redbook.com/uploads/images/gallery/2023-04/4KAimage.png','2023-04-04 01:10:26','2023-04-04 01:10:26',1,1,'/uploads/images/gallery/2023-04/4KAimage.png','gallery',16),(91,'image.png','https://redbook.com/uploads/images/gallery/2023-04/jICimage.png','2023-04-04 01:16:01','2023-04-04 01:16:01',1,1,'/uploads/images/gallery/2023-04/jICimage.png','gallery',17),(92,'image.png','https://redbook.com/uploads/images/gallery/2023-04/E0aimage.png','2023-04-04 01:17:21','2023-04-04 01:17:21',1,1,'/uploads/images/gallery/2023-04/E0aimage.png','gallery',17),(93,'image.png','https://redbook.com/uploads/images/gallery/2023-04/hzximage.png','2023-04-04 01:18:53','2023-04-04 01:18:53',1,1,'/uploads/images/gallery/2023-04/hzximage.png','gallery',17),(94,'image.png','https://redbook.com/uploads/images/gallery/2023-04/UQkimage.png','2023-04-04 01:20:38','2023-04-04 01:20:38',1,1,'/uploads/images/gallery/2023-04/UQkimage.png','gallery',17),(95,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Pysimage.png','2023-04-04 01:21:41','2023-04-04 01:21:41',1,1,'/uploads/images/gallery/2023-04/Pysimage.png','gallery',17),(96,'image.png','https://redbook.com/uploads/images/gallery/2023-04/iqfimage.png','2023-04-04 01:23:09','2023-04-04 01:23:09',1,1,'/uploads/images/gallery/2023-04/iqfimage.png','gallery',17),(97,'image.png','https://redbook.com/uploads/images/gallery/2023-04/3Qyimage.png','2023-04-04 01:25:32','2023-04-04 01:25:32',1,1,'/uploads/images/gallery/2023-04/3Qyimage.png','gallery',17),(98,'image.png','https://redbook.com/uploads/images/gallery/2023-04/qstimage.png','2023-04-04 01:27:39','2023-04-04 01:27:39',1,1,'/uploads/images/gallery/2023-04/qstimage.png','gallery',17),(99,'image.png','https://redbook.com/uploads/images/gallery/2023-04/GViimage.png','2023-04-04 01:30:58','2023-04-04 01:30:58',1,1,'/uploads/images/gallery/2023-04/GViimage.png','gallery',17),(100,'image.png','https://redbook.com/uploads/images/gallery/2023-04/EYoimage.png','2023-04-04 01:32:48','2023-04-04 01:32:48',1,1,'/uploads/images/gallery/2023-04/EYoimage.png','gallery',17),(101,'image.png','https://redbook.com/uploads/images/gallery/2023-04/9nzimage.png','2023-04-04 01:34:05','2023-04-04 01:34:05',1,1,'/uploads/images/gallery/2023-04/9nzimage.png','gallery',17),(102,'image.png','https://redbook.com/uploads/images/gallery/2023-04/TOTimage.png','2023-04-04 01:36:08','2023-04-04 01:36:08',1,1,'/uploads/images/gallery/2023-04/TOTimage.png','gallery',17),(103,'image.png','https://redbook.com/uploads/images/gallery/2023-04/HNlimage.png','2023-04-04 01:37:54','2023-04-04 01:37:54',1,1,'/uploads/images/gallery/2023-04/HNlimage.png','gallery',17),(104,'image.png','https://redbook.com/uploads/images/gallery/2023-04/h9Rimage.png','2023-04-04 01:39:08','2023-04-04 01:39:08',1,1,'/uploads/images/gallery/2023-04/h9Rimage.png','gallery',17),(105,'image.png','https://redbook.com/uploads/images/gallery/2023-04/6Mtimage.png','2023-04-04 01:40:27','2023-04-04 01:40:27',1,1,'/uploads/images/gallery/2023-04/6Mtimage.png','gallery',17),(106,'image.png','https://redbook.com/uploads/images/gallery/2023-04/aUSimage.png','2023-04-04 01:42:48','2023-04-04 01:42:48',1,1,'/uploads/images/gallery/2023-04/aUSimage.png','gallery',17),(107,'image.png','https://redbook.com/uploads/images/gallery/2023-04/YcJimage.png','2023-04-04 01:44:28','2023-04-04 01:44:28',1,1,'/uploads/images/gallery/2023-04/YcJimage.png','gallery',17),(108,'image.png','https://redbook.com/uploads/images/gallery/2023-04/i6Timage.png','2023-04-04 01:48:11','2023-04-04 01:48:11',1,1,'/uploads/images/gallery/2023-04/i6Timage.png','gallery',17),(109,'image.png','https://redbook.com/uploads/images/gallery/2023-04/dj1image.png','2023-04-04 01:50:24','2023-04-04 01:50:24',1,1,'/uploads/images/gallery/2023-04/dj1image.png','gallery',17),(110,'image.png','https://redbook.com/uploads/images/gallery/2023-04/2LTimage.png','2023-04-04 01:55:07','2023-04-04 01:55:07',1,1,'/uploads/images/gallery/2023-04/2LTimage.png','gallery',18),(111,'image.png','https://redbook.com/uploads/images/gallery/2023-04/pOSimage.png','2023-04-04 01:55:56','2023-04-04 01:55:56',1,1,'/uploads/images/gallery/2023-04/pOSimage.png','gallery',18),(112,'image.png','https://redbook.com/uploads/images/gallery/2023-04/zhIimage.png','2023-04-04 01:57:19','2023-04-04 01:57:19',1,1,'/uploads/images/gallery/2023-04/zhIimage.png','gallery',18),(113,'image.png','https://redbook.com/uploads/images/gallery/2023-04/HOIimage.png','2023-04-04 01:59:11','2023-04-04 01:59:11',1,1,'/uploads/images/gallery/2023-04/HOIimage.png','gallery',18),(114,'image.png','https://redbook.com/uploads/images/gallery/2023-04/PKKimage.png','2023-04-04 16:03:46','2023-04-04 16:03:46',1,1,'/uploads/images/gallery/2023-04/PKKimage.png','gallery',18),(115,'image.png','https://redbook.com/uploads/images/gallery/2023-04/ntHimage.png','2023-04-04 16:08:05','2023-04-04 16:08:05',1,1,'/uploads/images/gallery/2023-04/ntHimage.png','gallery',18),(116,'image.png','https://redbook.com/uploads/images/gallery/2023-04/HqFimage.png','2023-04-04 16:09:42','2023-04-04 16:09:42',1,1,'/uploads/images/gallery/2023-04/HqFimage.png','gallery',18),(117,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Zjsimage.png','2023-04-04 16:12:42','2023-04-04 16:12:42',1,1,'/uploads/images/gallery/2023-04/Zjsimage.png','gallery',18),(118,'image.png','https://redbook.com/uploads/images/gallery/2023-04/sLCimage.png','2023-04-04 16:16:08','2023-04-04 16:16:08',1,1,'/uploads/images/gallery/2023-04/sLCimage.png','gallery',18),(119,'image.png','https://redbook.com/uploads/images/gallery/2023-04/ABNimage.png','2023-04-04 16:17:12','2023-04-04 16:17:12',1,1,'/uploads/images/gallery/2023-04/ABNimage.png','gallery',18),(120,'image.png','https://redbook.com/uploads/images/gallery/2023-04/KPPimage.png','2023-04-04 16:20:36','2023-04-04 16:20:36',1,1,'/uploads/images/gallery/2023-04/KPPimage.png','gallery',18),(121,'image.png','https://redbook.com/uploads/images/gallery/2023-04/0yJimage.png','2023-04-04 16:21:12','2023-04-04 16:21:12',1,1,'/uploads/images/gallery/2023-04/0yJimage.png','gallery',18),(122,'image.png','https://redbook.com/uploads/images/gallery/2023-04/7saimage.png','2023-04-04 16:24:43','2023-04-04 16:24:43',1,1,'/uploads/images/gallery/2023-04/7saimage.png','gallery',18),(123,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Bxbimage.png','2023-04-04 16:57:55','2023-04-04 16:57:55',1,1,'/uploads/images/gallery/2023-04/Bxbimage.png','gallery',18),(124,'image.png','https://redbook.com/uploads/images/gallery/2023-04/6tXimage.png','2023-04-04 17:04:10','2023-04-04 17:04:10',1,1,'/uploads/images/gallery/2023-04/6tXimage.png','gallery',18),(125,'image.png','https://redbook.com/uploads/images/gallery/2023-04/qcBimage.png','2023-04-04 17:07:36','2023-04-04 17:07:36',1,1,'/uploads/images/gallery/2023-04/qcBimage.png','gallery',18),(126,'image.png','https://redbook.com/uploads/images/gallery/2023-04/xITimage.png','2023-04-04 17:08:06','2023-04-04 17:08:06',1,1,'/uploads/images/gallery/2023-04/xITimage.png','gallery',18),(127,'image.png','https://redbook.com/uploads/images/gallery/2023-04/eUlimage.png','2023-04-04 17:11:32','2023-04-04 17:11:32',1,1,'/uploads/images/gallery/2023-04/eUlimage.png','gallery',18),(128,'image.png','https://redbook.com/uploads/images/gallery/2023-04/b0Yimage.png','2023-04-04 17:40:41','2023-04-04 17:40:41',1,1,'/uploads/images/gallery/2023-04/b0Yimage.png','gallery',19),(129,'image.png','https://redbook.com/uploads/images/gallery/2023-04/HCCimage.png','2023-04-04 17:41:45','2023-04-04 17:41:45',1,1,'/uploads/images/gallery/2023-04/HCCimage.png','gallery',19),(130,'image.png','https://redbook.com/uploads/images/gallery/2023-04/dDwimage.png','2023-04-04 19:23:11','2023-04-04 19:23:11',1,1,'/uploads/images/gallery/2023-04/dDwimage.png','gallery',17),(131,'networkoverview.jpeg','https://redbook.com/uploads/images/cover_book/2023-04/networkoverview.jpeg','2023-04-04 19:52:38','2023-04-04 19:52:38',1,1,'/uploads/images/cover_book/2023-04/networkoverview.jpeg','cover_book',2),(132,'sysoverview.jpeg','https://redbook.com/uploads/images/cover_book/2023-04/sysoverview.jpeg','2023-04-04 19:52:55','2023-04-04 19:52:55',1,1,'/uploads/images/cover_book/2023-04/sysoverview.jpeg','cover_book',3),(133,'howto.png','https://redbook.com/uploads/images/cover_book/2023-04/howto.png','2023-04-04 19:53:12','2023-04-04 19:53:12',1,1,'/uploads/images/cover_book/2023-04/howto.png','cover_book',4),(134,'hacker.jpeg','https://redbook.com/uploads/images/cover_book/2023-04/hacker.jpeg','2023-04-04 19:55:11','2023-04-04 19:55:11',1,1,'/uploads/images/cover_book/2023-04/hacker.jpeg','cover_book',6),(135,'grayspace2.jpeg','https://redbook.com/uploads/images/cover_bookshelf/2023-04/grayspace2.jpeg','2023-04-04 19:57:43','2023-04-04 19:57:43',1,1,'/uploads/images/cover_bookshelf/2023-04/grayspace2.jpeg','cover_bookshelf',2),(136,'image.png','https://redbook.com/uploads/images/gallery/2023-04/llJimage.png','2023-04-04 22:46:15','2023-04-04 22:46:15',1,1,'/uploads/images/gallery/2023-04/llJimage.png','gallery',19),(137,'image.png','https://redbook.com/uploads/images/gallery/2023-04/tHEimage.png','2023-04-04 22:52:39','2023-04-04 22:52:39',1,1,'/uploads/images/gallery/2023-04/tHEimage.png','gallery',19),(138,'image.png','https://redbook.com/uploads/images/gallery/2023-04/s1Nimage.png','2023-04-04 22:53:34','2023-04-04 22:53:34',1,1,'/uploads/images/gallery/2023-04/s1Nimage.png','gallery',19),(139,'image.png','https://redbook.com/uploads/images/gallery/2023-04/oIPimage.png','2023-04-04 22:54:07','2023-04-04 22:54:07',1,1,'/uploads/images/gallery/2023-04/oIPimage.png','gallery',19),(140,'image.png','https://redbook.com/uploads/images/gallery/2023-04/wRNimage.png','2023-04-04 22:59:32','2023-04-04 22:59:32',1,1,'/uploads/images/gallery/2023-04/wRNimage.png','gallery',19),(141,'image.png','https://redbook.com/uploads/images/gallery/2023-04/roTimage.png','2023-04-04 23:02:09','2023-04-04 23:02:09',1,1,'/uploads/images/gallery/2023-04/roTimage.png','gallery',19),(142,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Kb5image.png','2023-04-04 23:47:39','2023-04-04 23:47:39',1,1,'/uploads/images/gallery/2023-04/Kb5image.png','gallery',19),(143,'image.png','https://redbook.com/uploads/images/gallery/2023-04/HB3image.png','2023-04-04 23:58:45','2023-04-04 23:58:45',1,1,'/uploads/images/gallery/2023-04/HB3image.png','gallery',19),(144,'image.png','https://redbook.com/uploads/images/gallery/2023-04/ziwimage.png','2023-04-05 00:00:19','2023-04-05 00:00:19',1,1,'/uploads/images/gallery/2023-04/ziwimage.png','gallery',19),(145,'image.png','https://redbook.com/uploads/images/gallery/2023-04/gLFimage.png','2023-04-05 00:00:44','2023-04-05 00:00:44',1,1,'/uploads/images/gallery/2023-04/gLFimage.png','gallery',19),(146,'image.png','https://redbook.com/uploads/images/gallery/2023-04/X9Ximage.png','2023-04-05 00:11:52','2023-04-05 00:11:52',1,1,'/uploads/images/gallery/2023-04/X9Ximage.png','gallery',20),(147,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Uiqimage.png','2023-04-05 00:13:06','2023-04-05 00:13:06',1,1,'/uploads/images/gallery/2023-04/Uiqimage.png','gallery',20),(148,'image.png','https://redbook.com/uploads/images/gallery/2023-04/HfLimage.png','2023-04-05 00:13:43','2023-04-05 00:13:43',1,1,'/uploads/images/gallery/2023-04/HfLimage.png','gallery',20),(149,'image.png','https://redbook.com/uploads/images/gallery/2023-04/NWzimage.png','2023-04-05 00:29:12','2023-04-05 00:29:12',1,1,'/uploads/images/gallery/2023-04/NWzimage.png','gallery',20),(150,'image.png','https://redbook.com/uploads/images/gallery/2023-04/buTimage.png','2023-04-05 00:31:19','2023-04-05 00:31:19',1,1,'/uploads/images/gallery/2023-04/buTimage.png','gallery',20),(151,'image.png','https://redbook.com/uploads/images/gallery/2023-04/TFUimage.png','2023-04-05 00:33:44','2023-04-05 00:33:44',1,1,'/uploads/images/gallery/2023-04/TFUimage.png','gallery',20),(152,'image.png','https://redbook.com/uploads/images/gallery/2023-04/8awimage.png','2023-04-05 00:35:01','2023-04-05 00:35:01',1,1,'/uploads/images/gallery/2023-04/8awimage.png','gallery',20),(153,'image.png','https://redbook.com/uploads/images/gallery/2023-04/Awbimage.png','2023-04-05 00:41:09','2023-04-05 00:41:09',1,1,'/uploads/images/gallery/2023-04/Awbimage.png','gallery',21),(154,'creds.jpeg','https://redbook.com/uploads/images/cover_book/2023-04/creds.jpeg','2023-04-05 00:47:13','2023-04-05 00:47:13',1,1,'/uploads/images/cover_book/2023-04/creds.jpeg','cover_book',7);
/*!40000 ALTER TABLE `images` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `jobs`
--

DROP TABLE IF EXISTS `jobs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `jobs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `queue` varchar(191) NOT NULL,
  `payload` longtext NOT NULL,
  `attempts` tinyint(3) unsigned NOT NULL,
  `reserved_at` int(10) unsigned DEFAULT NULL,
  `available_at` int(10) unsigned NOT NULL,
  `created_at` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `jobs_queue_index` (`queue`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `jobs`
--

LOCK TABLES `jobs` WRITE;
/*!40000 ALTER TABLE `jobs` DISABLE KEYS */;
/*!40000 ALTER TABLE `jobs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `joint_permissions`
--

DROP TABLE IF EXISTS `joint_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `joint_permissions` (
  `role_id` int(11) NOT NULL,
  `entity_type` varchar(191) NOT NULL,
  `entity_id` int(11) NOT NULL,
  `status` tinyint(3) unsigned NOT NULL,
  `owner_id` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`role_id`,`entity_type`,`entity_id`),
  KEY `joint_permissions_entity_id_entity_type_index` (`entity_id`,`entity_type`),
  KEY `joint_permissions_role_id_index` (`role_id`),
  KEY `joint_permissions_status_index` (`status`),
  KEY `joint_permissions_owner_id_index` (`owner_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `joint_permissions`
--

LOCK TABLES `joint_permissions` WRITE;
/*!40000 ALTER TABLE `joint_permissions` DISABLE KEYS */;
INSERT INTO `joint_permissions` VALUES (1,'book',1,3,1),(1,'book',2,3,1),(1,'book',3,3,1),(1,'book',4,3,1),(1,'book',5,3,1),(1,'book',6,3,1),(1,'book',7,3,1),(1,'bookshelf',1,3,1),(1,'bookshelf',2,3,1),(1,'chapter',1,3,1),(1,'page',1,3,1),(1,'page',2,3,1),(1,'page',3,3,1),(1,'page',4,3,1),(1,'page',5,3,1),(1,'page',6,3,1),(1,'page',7,3,1),(1,'page',8,3,1),(1,'page',9,3,1),(1,'page',10,3,1),(1,'page',11,3,1),(1,'page',12,3,1),(1,'page',13,3,1),(1,'page',14,3,1),(1,'page',15,3,1),(1,'page',16,3,1),(1,'page',17,3,1),(1,'page',18,3,1),(1,'page',19,3,1),(1,'page',20,3,1),(1,'page',21,3,1),(1,'page',22,3,1),(2,'book',1,1,1),(2,'book',2,1,1),(2,'book',3,1,1),(2,'book',4,1,1),(2,'book',5,1,1),(2,'book',6,1,1),(2,'book',7,1,1),(2,'bookshelf',1,1,1),(2,'bookshelf',2,1,1),(2,'chapter',1,1,1),(2,'page',1,1,1),(2,'page',2,1,1),(2,'page',3,1,1),(2,'page',4,1,1),(2,'page',5,1,1),(2,'page',6,1,1),(2,'page',7,1,1),(2,'page',8,1,1),(2,'page',9,1,1),(2,'page',10,1,1),(2,'page',11,1,1),(2,'page',12,1,1),(2,'page',13,1,1),(2,'page',14,1,1),(2,'page',15,1,1),(2,'page',16,1,1),(2,'page',17,1,1),(2,'page',18,1,1),(2,'page',19,1,1),(2,'page',20,1,1),(2,'page',21,1,1),(2,'page',22,1,1),(3,'book',1,1,1),(3,'book',2,1,1),(3,'book',3,1,1),(3,'book',4,1,1),(3,'book',5,1,1),(3,'book',6,1,1),(3,'book',7,1,1),(3,'bookshelf',1,1,1),(3,'bookshelf',2,1,1),(3,'chapter',1,1,1),(3,'page',1,1,1),(3,'page',2,1,1),(3,'page',3,1,1),(3,'page',4,1,1),(3,'page',5,1,1),(3,'page',6,1,1),(3,'page',7,1,1),(3,'page',8,1,1),(3,'page',9,1,1),(3,'page',10,1,1),(3,'page',11,1,1),(3,'page',12,1,1),(3,'page',13,1,1),(3,'page',14,1,1),(3,'page',15,1,1),(3,'page',16,1,1),(3,'page',17,1,1),(3,'page',18,1,1),(3,'page',19,1,1),(3,'page',20,1,1),(3,'page',21,1,1),(3,'page',22,1,1),(4,'book',1,1,1),(4,'book',2,1,1),(4,'book',3,1,1),(4,'book',4,1,1),(4,'book',5,1,1),(4,'book',6,1,1),(4,'book',7,1,1),(4,'bookshelf',1,1,1),(4,'bookshelf',2,1,1),(4,'chapter',1,1,1),(4,'page',1,1,1),(4,'page',2,1,1),(4,'page',3,1,1),(4,'page',4,1,1),(4,'page',5,1,1),(4,'page',6,1,1),(4,'page',7,1,1),(4,'page',8,1,1),(4,'page',9,1,1),(4,'page',10,1,1),(4,'page',11,1,1),(4,'page',12,1,1),(4,'page',13,1,1),(4,'page',14,1,1),(4,'page',15,1,1),(4,'page',16,1,1),(4,'page',17,1,1),(4,'page',18,1,1),(4,'page',19,1,1),(4,'page',20,1,1),(4,'page',21,1,1),(4,'page',22,1,1);
/*!40000 ALTER TABLE `joint_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mfa_values`
--

DROP TABLE IF EXISTS `mfa_values`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mfa_values` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `method` varchar(20) NOT NULL,
  `value` text NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `mfa_values_user_id_index` (`user_id`),
  KEY `mfa_values_method_index` (`method`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mfa_values`
--

LOCK TABLES `mfa_values` WRITE;
/*!40000 ALTER TABLE `mfa_values` DISABLE KEYS */;
/*!40000 ALTER TABLE `mfa_values` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migrations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(191) NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=75 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` VALUES (1,'2014_10_12_000000_create_users_table',1),(2,'2014_10_12_100000_create_password_resets_table',1),(3,'2015_07_12_114933_create_books_table',1),(4,'2015_07_12_190027_create_pages_table',1),(5,'2015_07_13_172121_create_images_table',1),(6,'2015_07_27_172342_create_chapters_table',1),(7,'2015_08_08_200447_add_users_to_entities',1),(8,'2015_08_09_093534_create_page_revisions_table',1),(9,'2015_08_16_142133_create_activities_table',1),(10,'2015_08_29_105422_add_roles_and_permissions',1),(11,'2015_08_30_125859_create_settings_table',1),(12,'2015_08_31_175240_add_search_indexes',1),(13,'2015_09_04_165821_create_social_accounts_table',1),(14,'2015_09_05_164707_add_email_confirmation_table',1),(15,'2015_11_21_145609_create_views_table',1),(16,'2015_11_26_221857_add_entity_indexes',1),(17,'2015_12_05_145049_fulltext_weighting',1),(18,'2015_12_07_195238_add_image_upload_types',1),(19,'2015_12_09_195748_add_user_avatars',1),(20,'2016_01_11_210908_add_external_auth_to_users',1),(21,'2016_02_25_184030_add_slug_to_revisions',1),(22,'2016_02_27_120329_update_permissions_and_roles',1),(23,'2016_02_28_084200_add_entity_access_controls',1),(24,'2016_03_09_203143_add_page_revision_types',1),(25,'2016_03_13_082138_add_page_drafts',1),(26,'2016_03_25_123157_add_markdown_support',1),(27,'2016_04_09_100730_add_view_permissions_to_roles',1),(28,'2016_04_20_192649_create_joint_permissions_table',1),(29,'2016_05_06_185215_create_tags_table',1),(30,'2016_07_07_181521_add_summary_to_page_revisions',1),(31,'2016_09_29_101449_remove_hidden_roles',1),(32,'2016_10_09_142037_create_attachments_table',1),(33,'2017_01_21_163556_create_cache_table',1),(34,'2017_01_21_163602_create_sessions_table',1),(35,'2017_03_19_091553_create_search_index_table',1),(36,'2017_04_20_185112_add_revision_counts',1),(37,'2017_07_02_152834_update_db_encoding_to_ut8mb4',1),(38,'2017_08_01_130541_create_comments_table',1),(39,'2017_08_29_102650_add_cover_image_display',1),(40,'2018_07_15_173514_add_role_external_auth_id',1),(41,'2018_08_04_115700_create_bookshelves_table',1),(42,'2019_07_07_112515_add_template_support',1),(43,'2019_08_17_140214_add_user_invites_table',1),(44,'2019_12_29_120917_add_api_auth',1),(45,'2020_08_04_111754_drop_joint_permissions_id',1),(46,'2020_08_04_131052_remove_role_name_field',1),(47,'2020_09_19_094251_add_activity_indexes',1),(48,'2020_09_27_210059_add_entity_soft_deletes',1),(49,'2020_09_27_210528_create_deletions_table',1),(50,'2020_11_07_232321_simplify_activities_table',1),(51,'2020_12_30_173528_add_owned_by_field_to_entities',1),(52,'2021_01_30_225441_add_settings_type_column',1),(53,'2021_03_08_215138_add_user_slug',1),(54,'2021_05_15_173110_create_favourites_table',1),(55,'2021_06_30_173111_create_mfa_values_table',1),(56,'2021_07_03_085038_add_mfa_enforced_to_roles_table',1),(57,'2021_08_28_161743_add_export_role_permission',1),(58,'2021_09_26_044614_add_activities_ip_column',1),(59,'2021_11_26_070438_add_index_for_user_ip',1),(60,'2021_12_07_111343_create_webhooks_table',1),(61,'2021_12_13_152024_create_jobs_table',1),(62,'2021_12_13_152120_create_failed_jobs_table',1),(63,'2022_01_03_154041_add_webhooks_timeout_error_columns',1),(64,'2022_04_17_101741_add_editor_change_field_and_permission',1),(65,'2022_04_25_140741_update_polymorphic_types',1),(66,'2022_07_16_170051_drop_joint_permission_type',1),(67,'2022_08_17_092941_create_references_table',1),(68,'2022_09_02_082910_fix_shelf_cover_image_types',1),(69,'2022_10_07_091406_flatten_entity_permissions_table',1),(70,'2022_10_08_104202_drop_entity_restricted_field',1),(71,'2023_01_24_104625_refactor_joint_permissions_storage',1),(72,'2023_01_28_141230_copy_color_settings_for_dark_mode',1),(73,'2023_02_20_093655_increase_attachments_path_length',1),(74,'2023_02_23_200227_add_updated_at_index_to_pages',1);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `page_revisions`
--

DROP TABLE IF EXISTS `page_revisions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `page_revisions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `page_id` int(11) NOT NULL,
  `name` varchar(191) NOT NULL,
  `html` longtext NOT NULL,
  `text` longtext NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `slug` varchar(191) NOT NULL,
  `book_slug` varchar(191) NOT NULL,
  `type` varchar(191) NOT NULL DEFAULT 'version',
  `markdown` longtext NOT NULL DEFAULT '',
  `summary` varchar(191) DEFAULT NULL,
  `revision_number` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `page_revisions_page_id_index` (`page_id`),
  KEY `page_revisions_slug_index` (`slug`),
  KEY `page_revisions_book_slug_index` (`book_slug`),
  KEY `page_revisions_type_index` (`type`),
  KEY `page_revisions_revision_number_index` (`revision_number`)
) ENGINE=InnoDB AUTO_INCREMENT=125 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `page_revisions`
--

LOCK TABLES `page_revisions` WRITE;
/*!40000 ALTER TABLE `page_revisions` DISABLE KEYS */;
INSERT INTO `page_revisions` VALUES (1,1,'New Page','<div drawio-diagram=\"1\" contenteditable=\"false\" id=\"bkmrk-\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-03/drawing-1-1680023230.png\"></div>','',1,'2023-03-28 22:07:12','2023-03-28 22:07:12','new-page','test','version','','Initial publish',1),(2,1,'New Page','<div drawio-diagram=\"1\" contenteditable=\"false\" id=\"bkmrk-\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-03/drawing-1-1680023230.png\"></div>','',1,'2023-03-28 22:11:16','2023-03-28 22:11:16','new-page','test','update_draft','',NULL,0),(3,2,'Overall network diagram','<div drawio-diagram=\"2\" contenteditable=\"false\" id=\"bkmrk-\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-03/drawing-1-1680026302.png\"></div>','',1,'2023-03-28 22:58:26','2023-03-28 22:58:26','overall-network-diagram','network-diagram','version','','Initial publish',1),(4,3,'Network Diagram Notes','','',1,'2023-03-28 23:25:21','2023-03-28 23:25:21','network-diagram-notes','network-diagram','version','','Initial publish',1),(5,2,'Network Diagram','<div drawio-diagram=\"2\" contenteditable=\"false\" id=\"bkmrk-\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-03/drawing-1-1680026302.png\"></div>','',1,'2023-03-28 23:26:05','2023-03-28 23:26:05','network-diagram','network-diagram','version','','',2),(7,3,'Network Diagram Notes','<p id=\"bkmrk-si-router---this-is-\">SI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.&nbsp; It has 4 interfaces that connect to the following virtual switches.</p>\r\n<ul id=\"bkmrk-servicesnet---the-si\">\r\n<li class=\"null\">ServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.</li>\r\n<li class=\"null\">Grayspace - The SI-Router will router apprx 1500 IP subnets.&nbsp; These subnets are organized by geo-locations on the NRTS server.&nbsp; To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.&nbsp; The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.</li>\r\n<li class=\"null\">AdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet</li>\r\n<li class=\"null\">RangeWAN - This is where you will connect target domains to the Cyber Range environment.</li>\r\n</ul>\r\n<p id=\"bkmrk-servicenet---esxi-sw\">ServiceNet - ESXI switch that connects to the SI router.&nbsp; Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.</p>\r\n<ul id=\"bkmrk-rootdns---this-is-th\">\r\n<li class=\"null\">RootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.&nbsp; Additionally it has Googles 8.8.8.8 IP address.&nbsp; This server is used for managing grayspace DNS.&nbsp; You can register DNS manually or use the automation scripts build on the NRTS server.&nbsp; For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.</li>\r\n<li class=\"null\">Web-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.&nbsp; These services are build in docker containers and provide the following;\r\n<ul>\r\n<li class=\"null\">Redbook.com - This the bookstack app you are currently looking at.&nbsp; This is used for documentation and covers an overview of the Cyber Range environment.&nbsp; You can also expand upon this with your own documentation for whatever.</li>\r\n<li class=\"null\">dropbox.com - This is an owncloud server to simulated a cloud based file hosting service.&nbsp; It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.&nbsp; See the OPFOR section for some methods.</li>\r\n<li class=\"null\">pastebin.com - This is a haste bin server to simulated the real world pastebin.&nbsp; This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.</li>\r\n<li class=\"null\">diagrams.net - This is draw.io and used for generating whatever diagram you want.&nbsp; Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">CA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.&nbsp; In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.&nbsp; Once that is done, any certs you create with the CA-Server will appear as trusted.&nbsp; For how to generate SSL certs as well as code signing binarys, see CA-Server details.</li>\r\n<li class=\"null\">Traffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.&nbsp; See Traffic-Gen details for more information on this.</li>\r\n<li class=\"null\">Traffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.&nbsp; This exists to allow&nbsp; Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.</li>\r\n</ul>\r\n<p id=\"bkmrk-grayspace---this-is-\">Grayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.&nbsp; By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.&nbsp; Feel free to add whatever else you want.&nbsp;</p>\r\n<ul id=\"bkmrk-nrts-%28not-red-team-s\">\r\n<li class=\"null\">NRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.&nbsp; See NRTS for more details.</li>\r\n<li class=\"null\">Kali - basic kali build, add whatever tools you want.</li>\r\n<li class=\"null\">FlareVM - basic windows VM, but I would advise installing Visual Studios.</li>\r\n</ul>\r\n<p id=\"bkmrk-adminnet---this-is-a\">AdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.&nbsp; There are main servers on this network, AdminNet-DHCP and IA-Proxy.&nbsp; Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.</p>\r\n<ul id=\"bkmrk-adminnet-dhcp---prov\">\r\n<li class=\"null\">Adminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.&nbsp; For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.</li>\r\n<li class=\"null\">IA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.&nbsp; To access real world internet from any VM in the cyber range, just set the proxy to <a href=\"http://172.30.0.2:9999\">http://172.30.0.2:9999</a></li>\r\n</ul>\r\n<p id=\"bkmrk-rangewan---this-is-f\">RangeWAN - This is for connection one or more target domains to the cyber range.&nbsp; Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.&nbsp; Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.&nbsp; More specific details are explained in the target range planning section</p>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','SI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.  It has 4 interfaces that connect to the following virtual switches.\r\n\r\nServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.\r\nGrayspace - The SI-Router will router apprx 1500 IP subnets.  These subnets are organized by geo-locations on the NRTS server.  To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.  The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.\r\nAdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet\r\nRangeWAN - This is where you will connect target domains to the Cyber Range environment.\r\n\r\nServiceNet - ESXI switch that connects to the SI router.  Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.\r\n\r\nRootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.  Additionally it has Googles 8.8.8.8 IP address.  This server is used for managing grayspace DNS.  You can register DNS manually or use the automation scripts build on the NRTS server.  For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.\r\nWeb-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.  These services are build in docker containers and provide the following;\r\n\r\nRedbook.com - This the bookstack app you are currently looking at.  This is used for documentation and covers an overview of the Cyber Range environment.  You can also expand upon this with your own documentation for whatever.\r\ndropbox.com - This is an owncloud server to simulated a cloud based file hosting service.  It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.  See the OPFOR section for some methods.\r\npastebin.com - This is a haste bin server to simulated the real world pastebin.  This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.\r\ndiagrams.net - This is draw.io and used for generating whatever diagram you want.  Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.\r\n\r\n\r\nCA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.  In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.  Once that is done, any certs you create with the CA-Server will appear as trusted.  For how to generate SSL certs as well as code signing binarys, see CA-Server details.\r\nTraffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.  See Traffic-Gen details for more information on this.\r\nTraffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.  This exists to allow  Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.\r\n\r\nGrayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.  By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.  Feel free to add whatever else you want. \r\n\r\nNRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.  See NRTS for more details.\r\nKali - basic kali build, add whatever tools you want.\r\nFlareVM - basic windows VM, but I would advise installing Visual Studios.\r\n\r\nAdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.  There are main servers on this network, AdminNet-DHCP and IA-Proxy.  Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.\r\n\r\nAdminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.  For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.\r\nIA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.  To access real world internet from any VM in the cyber range, just set the proxy to http://172.30.0.2:9999\r\n\r\nRangeWAN - This is for connection one or more target domains to the cyber range.  Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.  Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.  More specific details are explained in the target range planning section\r\n ',1,'2023-03-28 23:57:46','2023-03-28 23:57:46','network-diagram-notes','network-overview','version','','',2),(8,4,'RootDNS','<p id=\"bkmrk-the-rootdns-server-i\">The RootDNS server is built on Ubuntu 22.01 and runs a recursive bind9 server.&nbsp; To simulate real world DNS, the server is configured with the following IP addresses;</p>\r\n<ul id=\"bkmrk-8.8.8.8---simulated-\">\r\n<li class=\"null\">8.8.8.8 - simulated Googles recursive DNS server</li>\r\n<li class=\"null\">198.41.0.4 - simulates the real world A-root server</li>\r\n<li class=\"null\">192.228.79.59 - simulates the real world B-root server</li>\r\n<li class=\"null\">192.33.4.12- simulates the real world C-root server</li>\r\n<li class=\"null\">128.8.10.90- simulates the real world D-root server</li>\r\n<li class=\"null\">192.203.230.10- simulates the real world E-root server</li>\r\n<li class=\"null\">195.5.5.241- simulates the real world F-root server</li>\r\n<li class=\"null\">192.112.36.4- simulates the real world G-root server</li>\r\n<li class=\"null\">128.63.2.53- simulates the real world H-root server</li>\r\n<li class=\"null\">192.36.148.17- simulates the real world I-root server</li>\r\n<li class=\"null\">192.58.128.30- simulates the real world J-root server</li>\r\n<li class=\"null\">193.0.15.129- simulates the real world K-root server</li>\r\n<li class=\"null\">199.7.83.42- simulates the real world L-root server</li>\r\n<li class=\"null\">202.12.27.33- simulates the real world M-root server</li>\r\n</ul>\r\n<p id=\"bkmrk-the-rootdns-server-i-1\">The RootDNS server in the Cyber Range handles all \"grayspace\" DNS.&nbsp; To keep this a bit organized, the configuration for the bind9 server has been broken up into functional sections.&nbsp; Below is a listing of the file/folder structure along with a brief explanation of its purpose.</p>\r\n<p id=\"bkmrk-bind9-configuration-\">BIND9 CONFIGURATION Overview</p>\r\n<ul id=\"bkmrk-configuration-files-\">\r\n<li class=\"null\">Configuration Files\r\n<ul>\r\n<li class=\"null\">/etc/bind/named.conf&nbsp; &nbsp;- Contains \"includes\" for the segmented out \"named.conf\" files.</li>\r\n<li class=\"null\">/etc/bind/named.conf.options&nbsp; - Contains the bind9 options that make it a recursive DNS server.&nbsp; This file also specifies the IPs the server listens on.</li>\r\n<li class=\"null\">/etc/bind/named.conf.default-zones - This is a default zone created by bind9, it has been unmodified.</li>\r\n<li class=\"null\">/etc/bind/named.conf.OPFOR - This contains the domain references for all OPFOR DNS entries.&nbsp; For the most part entries here are managed via scripts on the RootDNS server&nbsp; and NRTS servers.</li>\r\n<li class=\"null\">/etc/bind/named.conf.RANGE - This contains the domain references for all DNS needed by the ServicesNet systems and target domains, with the exception of the traffic-gen and traffic-webhost servers</li>\r\n<li class=\"null\">/etc/bind/named.conf.TRAFFIC - This contains the domain references for all traffic gen systems.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">FOLDERS\r\n<ul>\r\n<li class=\"null\">/etc/bind/OPFOR - Stores all domain zones files for all the referenced domains in the named.conf.OPFOR config file.</li>\r\n<li class=\"null\">/etc/bind/RANGE - Stores all domain zone files for all referenced domains in the named.conf.RANGE config file.</li>\r\n<li class=\"null\">/etc/bind/TRAFFIC - Stores all domain zone files for all the referenced domains in the named.conf.TRAFFIC config file.</li>\r\n<li class=\"null\">/etc/bind/blackhole - This contains two files.\r\n<ul>\r\n<li class=\"null\">db.blackhole - this is a zone file that points to 127.0.0.1</li>\r\n<li class=\"null\">Rangism.zone - this is a conf file that references several domains and pointing them all to the db.blackhole.&nbsp; This is used to capture various auto generated OS and application DNS requests for real world systems that can\'t be reached or replicated in this environment.&nbsp; Things like updateapi.google.com, etc.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-dns-automation-overv\">DNS AUTOMATION Overview</p>\r\n<p id=\"bkmrk-the-root-dns-server-\">The root DNS server has some automation built in to automate OPFOR DNS registration.&nbsp; The scripts and path for adding/removing OPFOR DNS entries are listed below along with an explanation of their functionality.</p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fadd-re\">\r\n<li class=\"null\">/root/scripts/add-REDTEAM-DNS.sh\r\n<ul>\r\n<li class=\"null\">This script will create a PID lock when it\'s executed to prevent the script from running more than one instance.&nbsp; If this was ran concurrently, it would likely result in a corruption of the bind configuration.&nbsp; The way it works is the DNS registration section of the NRTS server\'s /root/scripts/buildredteam.sh script will SCP a dns file containing domain names and IPs using an SSH key, then remotely run the add-REDTEAM-DNS.sh script and feed it the dns file as an argument.&nbsp; The script will take this list, check if the domain already exists in any of the zone file locations, aka, RANGE, OPFOR, and TRAFFIC zone file folders.&nbsp; If it exists in the RANGE or TRAFFIC folder, it will skip that DNS registration request, if it exists in the OPFOR folder, it will assume the user wants to update the record and process it.&nbsp; It then create a zone file for each domain, add it to the OPFOR directory and create a copy of the named.conf.OPFOR config file and append the zone reference in the copy if the reference didn\'t already exist.&nbsp; It will then run a named-check-conf against the copy, if this passed, it will replace the named.conf.OPFOR with the copy, restart the bind9 service to read in the new configurations.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/delete-REDTEAM-DNS.sh\r\n<ul>\r\n<li class=\"null\">This script will remove DNS records from the OPFOR directory as well as remove the zone file references from the named.conf.OPFOR config file.&nbsp; The way this works is when the add-REDTEAM-DNS.sh script runs and originally added the OPFOR DNS, it will tag the zone file as well as the section in the named.conf.OPFOR.&nbsp; This tag is a user added value when the user request DNS registration from an NRTS server.&nbsp; On the NRTS there is a script for managing DNS at /root/scripts/ManageDNS.sh.&nbsp; This script will connect to the rootDNS server and get a list of all OPFOR DNS organized by tags.&nbsp; A user can select OPFOR DNS entries to be removed by selecting its tag.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/makednsfile.sh\r\n<ul>\r\n<li class=\"null\">This script will generate a DNS file to feed to add-REDTEAM-DNS.sh.&nbsp; It\'s for when a user elects randomly generated domains.&nbsp; In this case the NRTS will send a list of IPs to the rootDNS server and this script will randomly select available domains from the masterdomainlist.txt file and pair it to IPs in the list.&nbsp; When it selects a domain from the masterdomainlist, it will edit that domain by adding a \"#\" to the front of the domain to prevent it being reused.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/masterdomainlist.txt\r\n<ul>\r\n<li class=\"null\">This is a file that contains roughly 11000 domain names.&nbsp; This list was generated by scrapping a website that listed expired domain names.&nbsp; The goal here is to have a large pool of domains that aren\'t owned in the real world.&nbsp; The concept here is that these domains would be available to be purchased by an adversary.&nbsp; It wouldn\'t make sense for an adversary to be able to use <a href=\"https://www.microsoft.com\">www.microsoft.com</a> for their C2 would it.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/resetmasterdomainlist.txt\r\n<ul>\r\n<li class=\"null\">This script will remove and \"#\" from the front of any domain names in the list.&nbsp; This is for when you\'d deleted out all red team DNS and want to make all previously used domains from the list available again.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p style=\"padding-left: 40px;\" id=\"bkmrk-%C2%A0\">&nbsp;</p>\r\n<p style=\"padding-left: 40px;\" id=\"bkmrk-%C2%A0-1\">&nbsp;</p>','The RootDNS server is built on Ubuntu 22.01 and runs a recursive bind9 server.  To simulate real world DNS, the server is configured with the following IP addresses;\r\n\r\n8.8.8.8 - simulated Googles recursive DNS server\r\n198.41.0.4 - simulates the real world A-root server\r\n192.228.79.59 - simulates the real world B-root server\r\n192.33.4.12- simulates the real world C-root server\r\n128.8.10.90- simulates the real world D-root server\r\n192.203.230.10- simulates the real world E-root server\r\n195.5.5.241- simulates the real world F-root server\r\n192.112.36.4- simulates the real world G-root server\r\n128.63.2.53- simulates the real world H-root server\r\n192.36.148.17- simulates the real world I-root server\r\n192.58.128.30- simulates the real world J-root server\r\n193.0.15.129- simulates the real world K-root server\r\n199.7.83.42- simulates the real world L-root server\r\n202.12.27.33- simulates the real world M-root server\r\n\r\nThe RootDNS server in the Cyber Range handles all \"grayspace\" DNS.  To keep this a bit organized, the configuration for the bind9 server has been broken up into functional sections.  Below is a listing of the file/folder structure along with a brief explanation of its purpose.\r\nBIND9 CONFIGURATION Overview\r\n\r\nConfiguration Files\r\n\r\n/etc/bind/named.conf   - Contains \"includes\" for the segmented out \"named.conf\" files.\r\n/etc/bind/named.conf.options  - Contains the bind9 options that make it a recursive DNS server.  This file also specifies the IPs the server listens on.\r\n/etc/bind/named.conf.default-zones - This is a default zone created by bind9, it has been unmodified.\r\n/etc/bind/named.conf.OPFOR - This contains the domain references for all OPFOR DNS entries.  For the most part entries here are managed via scripts on the RootDNS server  and NRTS servers.\r\n/etc/bind/named.conf.RANGE - This contains the domain references for all DNS needed by the ServicesNet systems and target domains, with the exception of the traffic-gen and traffic-webhost servers\r\n/etc/bind/named.conf.TRAFFIC - This contains the domain references for all traffic gen systems.\r\n\r\n\r\nFOLDERS\r\n\r\n/etc/bind/OPFOR - Stores all domain zones files for all the referenced domains in the named.conf.OPFOR config file.\r\n/etc/bind/RANGE - Stores all domain zone files for all referenced domains in the named.conf.RANGE config file.\r\n/etc/bind/TRAFFIC - Stores all domain zone files for all the referenced domains in the named.conf.TRAFFIC config file.\r\n/etc/bind/blackhole - This contains two files.\r\n\r\ndb.blackhole - this is a zone file that points to 127.0.0.1\r\nRangism.zone - this is a conf file that references several domains and pointing them all to the db.blackhole.  This is used to capture various auto generated OS and application DNS requests for real world systems that can\'t be reached or replicated in this environment.  Things like updateapi.google.com, etc.\r\n\r\n\r\n\r\n\r\n\r\nDNS AUTOMATION Overview\r\nThe root DNS server has some automation built in to automate OPFOR DNS registration.  The scripts and path for adding/removing OPFOR DNS entries are listed below along with an explanation of their functionality.\r\n\r\n/root/scripts/add-REDTEAM-DNS.sh\r\n\r\nThis script will create a PID lock when it\'s executed to prevent the script from running more than one instance.  If this was ran concurrently, it would likely result in a corruption of the bind configuration.  The way it works is the DNS registration section of the NRTS server\'s /root/scripts/buildredteam.sh script will SCP a dns file containing domain names and IPs using an SSH key, then remotely run the add-REDTEAM-DNS.sh script and feed it the dns file as an argument.  The script will take this list, check if the domain already exists in any of the zone file locations, aka, RANGE, OPFOR, and TRAFFIC zone file folders.  If it exists in the RANGE or TRAFFIC folder, it will skip that DNS registration request, if it exists in the OPFOR folder, it will assume the user wants to update the record and process it.  It then create a zone file for each domain, add it to the OPFOR directory and create a copy of the named.conf.OPFOR config file and append the zone reference in the copy if the reference didn\'t already exist.  It will then run a named-check-conf against the copy, if this passed, it will replace the named.conf.OPFOR with the copy, restart the bind9 service to read in the new configurations.\r\n\r\n\r\n/root/scripts/delete-REDTEAM-DNS.sh\r\n\r\nThis script will remove DNS records from the OPFOR directory as well as remove the zone file references from the named.conf.OPFOR config file.  The way this works is when the add-REDTEAM-DNS.sh script runs and originally added the OPFOR DNS, it will tag the zone file as well as the section in the named.conf.OPFOR.  This tag is a user added value when the user request DNS registration from an NRTS server.  On the NRTS there is a script for managing DNS at /root/scripts/ManageDNS.sh.  This script will connect to the rootDNS server and get a list of all OPFOR DNS organized by tags.  A user can select OPFOR DNS entries to be removed by selecting its tag.\r\n\r\n\r\n/root/scripts/autoredirector/makednsfile.sh\r\n\r\nThis script will generate a DNS file to feed to add-REDTEAM-DNS.sh.  It\'s for when a user elects randomly generated domains.  In this case the NRTS will send a list of IPs to the rootDNS server and this script will randomly select available domains from the masterdomainlist.txt file and pair it to IPs in the list.  When it selects a domain from the masterdomainlist, it will edit that domain by adding a \"#\" to the front of the domain to prevent it being reused.\r\n\r\n\r\n/root/scripts/autoredirector/masterdomainlist.txt\r\n\r\nThis is a file that contains roughly 11000 domain names.  This list was generated by scrapping a website that listed expired domain names.  The goal here is to have a large pool of domains that aren\'t owned in the real world.  The concept here is that these domains would be available to be purchased by an adversary.  It wouldn\'t make sense for an adversary to be able to use www.microsoft.com for their C2 would it.\r\n\r\n\r\n/root/scripts/autoredirector/resetmasterdomainlist.txt\r\n\r\nThis script will remove and \"#\" from the front of any domain names in the list.  This is for when you\'d deleted out all red team DNS and want to make all previously used domains from the list available again.\r\n\r\n\r\n\r\n \r\n ',1,'2023-03-29 00:43:26','2023-03-29 00:43:26','rootdns','cyber-range-systems-overview','version','','Initial publish',1),(10,4,'RootDNS','<p id=\"bkmrk-the-rootdns-server-i\">The RootDNS server is built on Ubuntu 22.01 and runs a recursive bind9 server.&nbsp; To simulate real world DNS, the server is configured with the following IP addresses;</p>\r\n<ul id=\"bkmrk-8.8.8.8---simulated-\">\r\n<li class=\"null\">8.8.8.8 - simulated Googles recursive DNS server</li>\r\n<li class=\"null\">198.41.0.4 - simulates the real world A-root server</li>\r\n<li class=\"null\">192.228.79.59 - simulates the real world B-root server</li>\r\n<li class=\"null\">192.33.4.12- simulates the real world C-root server</li>\r\n<li class=\"null\">128.8.10.90- simulates the real world D-root server</li>\r\n<li class=\"null\">192.203.230.10- simulates the real world E-root server</li>\r\n<li class=\"null\">195.5.5.241- simulates the real world F-root server</li>\r\n<li class=\"null\">192.112.36.4- simulates the real world G-root server</li>\r\n<li class=\"null\">128.63.2.53- simulates the real world H-root server</li>\r\n<li class=\"null\">192.36.148.17- simulates the real world I-root server</li>\r\n<li class=\"null\">192.58.128.30- simulates the real world J-root server</li>\r\n<li class=\"null\">193.0.15.129- simulates the real world K-root server</li>\r\n<li class=\"null\">199.7.83.42- simulates the real world L-root server</li>\r\n<li class=\"null\">202.12.27.33- simulates the real world M-root server</li>\r\n</ul>\r\n<p id=\"bkmrk-the-rootdns-server-i-1\">The RootDNS server in the Cyber Range handles all \"grayspace\" DNS.&nbsp; To keep this a bit organized, the configuration for the bind9 server has been broken up into functional sections.&nbsp; Below is a listing of the file/folder structure along with a brief explanation of its purpose.</p>\r\n<p id=\"bkmrk-bind9-configuration-\">BIND9 CONFIGURATION Overview</p>\r\n<ul id=\"bkmrk-configuration-files-\">\r\n<li class=\"null\">Configuration Files\r\n<ul>\r\n<li class=\"null\">/etc/bind/named.conf&nbsp; &nbsp;- Contains \"includes\" for the segmented out \"named.conf\" files.</li>\r\n<li class=\"null\">/etc/bind/named.conf.options&nbsp; - Contains the bind9 options that make it a recursive DNS server.&nbsp; This file also specifies the IPs the server listens on.</li>\r\n<li class=\"null\">/etc/bind/named.conf.default-zones - This is a default zone created by bind9, it has been unmodified.</li>\r\n<li class=\"null\">/etc/bind/named.conf.OPFOR - This contains the domain references for all OPFOR DNS entries.&nbsp; For the most part entries here are managed via scripts on the RootDNS server&nbsp; and NRTS servers.</li>\r\n<li class=\"null\">/etc/bind/named.conf.RANGE - This contains the domain references for all DNS needed by the ServicesNet systems and target domains, with the exception of the traffic-gen and traffic-webhost servers</li>\r\n<li class=\"null\">/etc/bind/named.conf.TRAFFIC - This contains the domain references for all traffic gen systems.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">FOLDERS\r\n<ul>\r\n<li class=\"null\">/etc/bind/OPFOR - Stores all domain zones files for all the referenced domains in the named.conf.OPFOR config file.</li>\r\n<li class=\"null\">/etc/bind/RANGE - Stores all domain zone files for all referenced domains in the named.conf.RANGE config file.</li>\r\n<li class=\"null\">/etc/bind/TRAFFIC - Stores all domain zone files for all the referenced domains in the named.conf.TRAFFIC config file.</li>\r\n<li class=\"null\">/etc/bind/blackhole - This contains two files.\r\n<ul>\r\n<li class=\"null\">db.blackhole - this is a zone file that points to 127.0.0.1</li>\r\n<li class=\"null\">Rangism.zone - this is a conf file that references several domains and pointing them all to the db.blackhole.&nbsp; This is used to capture various auto generated OS and application DNS requests for real world systems that can\'t be reached or replicated in this environment.&nbsp; Things like updateapi.google.com, etc.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-dns-automation-overv\">DNS AUTOMATION Overview</p>\r\n<p id=\"bkmrk-the-root-dns-server-\">The root DNS server has some automation built in to automate OPFOR DNS registration.&nbsp; The scripts and path for adding/removing OPFOR DNS entries are listed below along with an explanation of their functionality.</p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fadd-re\">\r\n<li class=\"null\">/root/scripts/add-REDTEAM-DNS.sh\r\n<ul>\r\n<li class=\"null\">This script will create a PID lock when it\'s executed to prevent the script from running more than one instance.&nbsp; If this was ran concurrently, it would likely result in a corruption of the bind configuration.&nbsp; The way it works is the DNS registration section of the NRTS server\'s /root/scripts/buildredteam.sh script will SCP a dns file containing domain names and IPs using an SSH key, then remotely run the add-REDTEAM-DNS.sh script and feed it the dns file as an argument.&nbsp; The script will take this list, check if the domain already exists in any of the zone file locations, aka, RANGE, OPFOR, and TRAFFIC zone file folders.&nbsp; If it exists in the RANGE or TRAFFIC folder, it will skip that DNS registration request, if it exists in the OPFOR folder, it will assume the user wants to update the record and process it.&nbsp; It then create a zone file for each domain, add it to the OPFOR directory and create a copy of the named.conf.OPFOR config file and append the zone reference in the copy if the reference didn\'t already exist.&nbsp; It will then run a named-check-conf against the copy, if this passed, it will replace the named.conf.OPFOR with the copy, restart the bind9 service to read in the new configurations.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/delete-REDTEAM-DNS.sh\r\n<ul>\r\n<li class=\"null\">This script will remove DNS records from the OPFOR directory as well as remove the zone file references from the named.conf.OPFOR config file.&nbsp; The way this works is when the add-REDTEAM-DNS.sh script runs and originally added the OPFOR DNS, it will tag the zone file as well as the section in the named.conf.OPFOR.&nbsp; This tag is a user added value when the user request DNS registration from an NRTS server.&nbsp; On the NRTS there is a script for managing DNS at /root/scripts/ManageDNS.sh.&nbsp; This script will connect to the rootDNS server and get a list of all OPFOR DNS organized by tags.&nbsp; A user can select OPFOR DNS entries to be removed by selecting its tag.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/makednsfile.sh\r\n<ul>\r\n<li class=\"null\">This script will generate a DNS file to feed to add-REDTEAM-DNS.sh.&nbsp; It\'s for when a user elects randomly generated domains.&nbsp; In this case the NRTS will send a list of IPs to the rootDNS server and this script will randomly select available domains from the masterdomainlist.txt file and pair it to IPs in the list.&nbsp; When it selects a domain from the masterdomainlist, it will edit that domain by adding a \"#\" to the front of the domain to prevent it being reused.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/masterdomainlist.txt\r\n<ul>\r\n<li class=\"null\">This is a file that contains roughly 11000 domain names.&nbsp; This list was generated by scrapping a website that listed expired domain names.&nbsp; The goal here is to have a large pool of domains that aren\'t owned in the real world.&nbsp; The concept here is that these domains would be available to be purchased by an adversary.&nbsp; It wouldn\'t make sense for an adversary to be able to use <a href=\"https://www.microsoft.com\">www.microsoft.com</a> for their C2 would it.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/resetmasterdomainlist.txt\r\n<ul>\r\n<li class=\"null\">This script will remove and \"#\" from the front of any domain names in the list.&nbsp; This is for when you\'d deleted out all red team DNS and want to make all previously used domains from the list available again.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">NOTE: the other half of DNS automation references on the NRTS, /root/scripts/buildredteam.sh and /root/scripts/ManageDNS.sh are explained on the NRTS overview.</li>\r\n</ul>\r\n<p id=\"bkmrk-how-to-manually-add-\">HOW TO MANUALLY ADD DNS</p>\r\n<ul id=\"bkmrk-to-add-new-target-do\">\r\n<li class=\"null\">To add new target domain records, you will need to create a zone file in the /etc/bind/RANGE and modify the /etc/bind/named.conf.RANGE file to add the reference.&nbsp; There is an example zone file in the /etc/bind/RANGE directory to use as a reference called db.example.com.&nbsp; Then, to add the reference in the named.conf.RANGE file, simply follow the syntax used for other zone files.</li>\r\n<li class=\"null\">Once you have created the zone file and added the reference, you need to run \"service bind9 restart\" to read in the new domain.&nbsp; However, before doing this it\'s a good idea to check your syntax first.&nbsp; To test your zone file run\r\n<ul>\r\n<li class=\"null\">named-checkzone mydomain.com /etc/bind/RANGE/db.mydomain.com&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;- replace \"mydomain.com\" with your domain.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Then to check if you messed up adding the reference run.\r\n<ul>\r\n<li class=\"null\">named-checkconfig /etc/bind/named.conf.RANGE</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If either errors, check your syntax, make corrections and try again.&nbsp; Once they both pass run \"service bind9 restart\"</li>\r\n<li class=\"null\">To add DNS manually in either TRAFFIC or OPFOR, follow the same steps, just make sure you are adding the zone file to the correct directory and you are modifying the correct \"named.conf.xxxx\" file.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\" style=\"padding-left: 40px;\"></p>\r\n<p id=\"bkmrk-%C2%A0-1\" style=\"padding-left: 40px;\"></p>','The RootDNS server is built on Ubuntu 22.01 and runs a recursive bind9 server.  To simulate real world DNS, the server is configured with the following IP addresses;\r\n\r\n8.8.8.8 - simulated Googles recursive DNS server\r\n198.41.0.4 - simulates the real world A-root server\r\n192.228.79.59 - simulates the real world B-root server\r\n192.33.4.12- simulates the real world C-root server\r\n128.8.10.90- simulates the real world D-root server\r\n192.203.230.10- simulates the real world E-root server\r\n195.5.5.241- simulates the real world F-root server\r\n192.112.36.4- simulates the real world G-root server\r\n128.63.2.53- simulates the real world H-root server\r\n192.36.148.17- simulates the real world I-root server\r\n192.58.128.30- simulates the real world J-root server\r\n193.0.15.129- simulates the real world K-root server\r\n199.7.83.42- simulates the real world L-root server\r\n202.12.27.33- simulates the real world M-root server\r\n\r\nThe RootDNS server in the Cyber Range handles all \"grayspace\" DNS.  To keep this a bit organized, the configuration for the bind9 server has been broken up into functional sections.  Below is a listing of the file/folder structure along with a brief explanation of its purpose.\r\nBIND9 CONFIGURATION Overview\r\n\r\nConfiguration Files\r\n\r\n/etc/bind/named.conf   - Contains \"includes\" for the segmented out \"named.conf\" files.\r\n/etc/bind/named.conf.options  - Contains the bind9 options that make it a recursive DNS server.  This file also specifies the IPs the server listens on.\r\n/etc/bind/named.conf.default-zones - This is a default zone created by bind9, it has been unmodified.\r\n/etc/bind/named.conf.OPFOR - This contains the domain references for all OPFOR DNS entries.  For the most part entries here are managed via scripts on the RootDNS server  and NRTS servers.\r\n/etc/bind/named.conf.RANGE - This contains the domain references for all DNS needed by the ServicesNet systems and target domains, with the exception of the traffic-gen and traffic-webhost servers\r\n/etc/bind/named.conf.TRAFFIC - This contains the domain references for all traffic gen systems.\r\n\r\n\r\nFOLDERS\r\n\r\n/etc/bind/OPFOR - Stores all domain zones files for all the referenced domains in the named.conf.OPFOR config file.\r\n/etc/bind/RANGE - Stores all domain zone files for all referenced domains in the named.conf.RANGE config file.\r\n/etc/bind/TRAFFIC - Stores all domain zone files for all the referenced domains in the named.conf.TRAFFIC config file.\r\n/etc/bind/blackhole - This contains two files.\r\n\r\ndb.blackhole - this is a zone file that points to 127.0.0.1\r\nRangism.zone - this is a conf file that references several domains and pointing them all to the db.blackhole.  This is used to capture various auto generated OS and application DNS requests for real world systems that can\'t be reached or replicated in this environment.  Things like updateapi.google.com, etc.\r\n\r\n\r\n\r\n\r\n\r\nDNS AUTOMATION Overview\r\nThe root DNS server has some automation built in to automate OPFOR DNS registration.  The scripts and path for adding/removing OPFOR DNS entries are listed below along with an explanation of their functionality.\r\n\r\n/root/scripts/add-REDTEAM-DNS.sh\r\n\r\nThis script will create a PID lock when it\'s executed to prevent the script from running more than one instance.  If this was ran concurrently, it would likely result in a corruption of the bind configuration.  The way it works is the DNS registration section of the NRTS server\'s /root/scripts/buildredteam.sh script will SCP a dns file containing domain names and IPs using an SSH key, then remotely run the add-REDTEAM-DNS.sh script and feed it the dns file as an argument.  The script will take this list, check if the domain already exists in any of the zone file locations, aka, RANGE, OPFOR, and TRAFFIC zone file folders.  If it exists in the RANGE or TRAFFIC folder, it will skip that DNS registration request, if it exists in the OPFOR folder, it will assume the user wants to update the record and process it.  It then create a zone file for each domain, add it to the OPFOR directory and create a copy of the named.conf.OPFOR config file and append the zone reference in the copy if the reference didn\'t already exist.  It will then run a named-check-conf against the copy, if this passed, it will replace the named.conf.OPFOR with the copy, restart the bind9 service to read in the new configurations.\r\n\r\n\r\n/root/scripts/delete-REDTEAM-DNS.sh\r\n\r\nThis script will remove DNS records from the OPFOR directory as well as remove the zone file references from the named.conf.OPFOR config file.  The way this works is when the add-REDTEAM-DNS.sh script runs and originally added the OPFOR DNS, it will tag the zone file as well as the section in the named.conf.OPFOR.  This tag is a user added value when the user request DNS registration from an NRTS server.  On the NRTS there is a script for managing DNS at /root/scripts/ManageDNS.sh.  This script will connect to the rootDNS server and get a list of all OPFOR DNS organized by tags.  A user can select OPFOR DNS entries to be removed by selecting its tag.\r\n\r\n\r\n/root/scripts/autoredirector/makednsfile.sh\r\n\r\nThis script will generate a DNS file to feed to add-REDTEAM-DNS.sh.  It\'s for when a user elects randomly generated domains.  In this case the NRTS will send a list of IPs to the rootDNS server and this script will randomly select available domains from the masterdomainlist.txt file and pair it to IPs in the list.  When it selects a domain from the masterdomainlist, it will edit that domain by adding a \"#\" to the front of the domain to prevent it being reused.\r\n\r\n\r\n/root/scripts/autoredirector/masterdomainlist.txt\r\n\r\nThis is a file that contains roughly 11000 domain names.  This list was generated by scrapping a website that listed expired domain names.  The goal here is to have a large pool of domains that aren\'t owned in the real world.  The concept here is that these domains would be available to be purchased by an adversary.  It wouldn\'t make sense for an adversary to be able to use www.microsoft.com for their C2 would it.\r\n\r\n\r\n/root/scripts/autoredirector/resetmasterdomainlist.txt\r\n\r\nThis script will remove and \"#\" from the front of any domain names in the list.  This is for when you\'d deleted out all red team DNS and want to make all previously used domains from the list available again.\r\n\r\n\r\nNOTE: the other half of DNS automation references on the NRTS, /root/scripts/buildredteam.sh and /root/scripts/ManageDNS.sh are explained on the NRTS overview.\r\n\r\nHOW TO MANUALLY ADD DNS\r\n\r\nTo add new target domain records, you will need to create a zone file in the /etc/bind/RANGE and modify the /etc/bind/named.conf.RANGE file to add the reference.  There is an example zone file in the /etc/bind/RANGE directory to use as a reference called db.example.com.  Then, to add the reference in the named.conf.RANGE file, simply follow the syntax used for other zone files.\r\nOnce you have created the zone file and added the reference, you need to run \"service bind9 restart\" to read in the new domain.  However, before doing this it\'s a good idea to check your syntax first.  To test your zone file run\r\n\r\nnamed-checkzone mydomain.com /etc/bind/RANGE/db.mydomain.com         <- replace \"mydomain.com\" with your domain.\r\n\r\n\r\nThen to check if you messed up adding the reference run.\r\n\r\nnamed-checkconfig /etc/bind/named.conf.RANGE\r\n\r\n\r\nIf either errors, check your syntax, make corrections and try again.  Once they both pass run \"service bind9 restart\"\r\nTo add DNS manually in either TRAFFIC or OPFOR, follow the same steps, just make sure you are adding the zone file to the correct directory and you are modifying the correct \"named.conf.xxxx\" file.\r\n\r\n\r\n',1,'2023-03-29 01:05:30','2023-03-29 01:05:30','rootdns','cyber-range-systems-overview','version','','',2),(11,5,'Web-Services','<p id=\"bkmrk-the-web-services-vm-\">The web services VM adds the following webservers to the Cyber Range environment;</p>\r\n<ul id=\"bkmrk-pastebin.com---this-\">\r\n<li class=\"null\">pastebin.com - this is a hastebin server running in a docker container that simulates pastebin.com</li>\r\n<li class=\"null\">redbook.com - this is a bookstack server running in a docker container used for Cyber Range documenation, you are using it right now.</li>\r\n<li class=\"null\">dropbox.com - this is a owncloud file share server running in a docker container used to simulate a cloud file sharing service.&nbsp; This could be used for range management, like hosting various apps that you want to install on various target domains, but mostly it\'s there for payload hosting or as an exfiltration point for OPFOR.</li>\r\n<li class=\"null\">diagrams.net - this is draw.io running in a docker container used for creating diagrams on redbook.&nbsp;</li>\r\n</ul>\r\n<p id=\"bkmrk-the-services-above-r\">The services above reside in the following folders on the web-services VM</p>\r\n<ul id=\"bkmrk-%2Froot%2Fpastebin%C2%A0-%2Froo\">\r\n<li class=\"null\">/root/pastebin&nbsp;<br></li>\r\n<li class=\"null\">/root/redbook</li>\r\n<li class=\"null\">/root/owncloud</li>\r\n<li class=\"null\">/root/drawio<br></li>\r\n</ul>\r\n<p id=\"bkmrk-in-each-directory-ar\">In each directory are any config files need for the container along with a docker-compose file.&nbsp; The containers should all start up automatically on reboot.&nbsp; To check the status of the container, I\'d advise googling docker to see how to interact and do things in docker.&nbsp; For a quick check you can run \"docker ps\" and it will list running containers.</p>\r\n<p id=\"bkmrk-note%3A-both-redbook-%28\">NOTE: both redbook (bookstack) and owncloud (dropbox) use a mysql database.&nbsp; If you want to make make backups here is the syntax for creating the backups and for restoring from these backups.</p>\r\n<p id=\"bkmrk-backing-up\">BACKING UP</p>\r\n<ul id=\"bkmrk-for-bookstack-%28redbo\">\r\n<li class=\"null\">FOR BOOKSTACK (redbook.com)\r\n<ul>\r\n<li class=\"null\">docker exec -i bookstack_db mysqldump -uroot -pbookstack bookstackapp &gt; bookstackbackup.sql</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">FOR OWNCLOUD (dropbox.com)\r\n<ul>\r\n<li class=\"null\">docker exec -i owncloud_db mysqldump -uowncloud -powncloud owncloud &gt; owncloudbackup.sql</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-restoring\">RESTORING</p>\r\n<ul id=\"bkmrk-for-bookstack-%28redbo-1\">\r\n<li class=\"null\">FOR BOOKSTACK (redbook.com)\r\n<ul>\r\n<li class=\"null\">docker exec -i bookstack_db mysql -uroot -pbookstack bookstackapp &lt; bookstackbackup.sql</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">FOR OWNCLOUD (dropbox.com)\r\n<ul>\r\n<li class=\"null\">docker exec -i owncloud_db mysql -uowncloud -powncloud owncloud &lt; owncloudbackup.sql</li>\r\n</ul>\r\n</li>\r\n</ul>','The web services VM adds the following webservers to the Cyber Range environment;\r\n\r\npastebin.com - this is a hastebin server running in a docker container that simulates pastebin.com\r\nredbook.com - this is a bookstack server running in a docker container used for Cyber Range documenation, you are using it right now.\r\ndropbox.com - this is a owncloud file share server running in a docker container used to simulate a cloud file sharing service.  This could be used for range management, like hosting various apps that you want to install on various target domains, but mostly it\'s there for payload hosting or as an exfiltration point for OPFOR.\r\ndiagrams.net - this is draw.io running in a docker container used for creating diagrams on redbook. \r\n\r\nThe services above reside in the following folders on the web-services VM\r\n\r\n/root/pastebin \r\n/root/redbook\r\n/root/owncloud\r\n/root/drawio\r\n\r\nIn each directory are any config files need for the container along with a docker-compose file.  The containers should all start up automatically on reboot.  To check the status of the container, I\'d advise googling docker to see how to interact and do things in docker.  For a quick check you can run \"docker ps\" and it will list running containers.\r\nNOTE: both redbook (bookstack) and owncloud (dropbox) use a mysql database.  If you want to make make backups here is the syntax for creating the backups and for restoring from these backups.\r\nBACKING UP\r\n\r\nFOR BOOKSTACK (redbook.com)\r\n\r\ndocker exec -i bookstack_db mysqldump -uroot -pbookstack bookstackapp > bookstackbackup.sql\r\n\r\n\r\nFOR OWNCLOUD (dropbox.com)\r\n\r\ndocker exec -i owncloud_db mysqldump -uowncloud -powncloud owncloud > owncloudbackup.sql\r\n\r\n\r\n\r\nRESTORING\r\n\r\nFOR BOOKSTACK (redbook.com)\r\n\r\ndocker exec -i bookstack_db mysql -uroot -pbookstack bookstackapp < bookstackbackup.sql\r\n\r\n\r\nFOR OWNCLOUD (dropbox.com)\r\n\r\ndocker exec -i owncloud_db mysql -uowncloud -powncloud owncloud < owncloudbackup.sql\r\n\r\n\r\n',1,'2023-03-29 01:21:11','2023-03-29 01:21:11','web-services','cyber-range-systems-overview','version','','Initial publish',1),(12,6,'CA-Server','','',1,'2023-03-29 01:21:22','2023-03-29 01:21:22','ca-server','cyber-range-systems-overview','version','','Initial publish',1),(14,6,'CA-Server','<p id=\"bkmrk-the-ca-server-is-bui\">The CA server is build on ubuntu 22.01 and uses openSSL to create Certificate Authority and intermediate Certificate Authority for signing SSL certs.&nbsp; The CA and intermediate certs have already been created using a domain of globalcerts.com.&nbsp; To create new SSL certs or to sign binaries, you can use scripts that exist on this server.&nbsp; The NRTS will also use these scripts automatically to sign SSL certs for the redirectors and payload host services it builds.&nbsp; More on that is explained in the NRTS server overview.&nbsp; That said, if you want do generate these manually, below is an overview of these scripts on the server to all you to.</p>\r\n<ul id=\"bkmrk-%2Froot%2Fcertmaker.sh-t\">\r\n<li class=\"null\">/root/certmaker.sh\r\n<ul>\r\n<li class=\"null\">This is used to create HTTPS SSL certs.&nbsp; The script has a help menu that is pretty self explanitory.&nbsp; below is the help menu that list the various flags.</li>\r\n<li class=\"null\">REQUIRED Flags<br>&nbsp; &nbsp; &nbsp; &nbsp; -d or --domain FQDN, &nbsp;ex. -d www.example.com<br>&nbsp; &nbsp; &nbsp; &nbsp; -r or --random, this will randomize Country, City, State, and organization info<br>&nbsp; &nbsp; &nbsp; &nbsp; -q or --quiet, will built the certs without showing settings and asking for confirmation<br>OPTIONAL Flags - random values will be used if not set<br>&nbsp; &nbsp; &nbsp; &nbsp; -C or --country 2LetterAbbrv, ex. -C US<br>&nbsp; &nbsp; &nbsp; &nbsp; -ST or --state &nbsp;State, ex -ST \'New York\' NOTE: single quotes need if spaces<br>&nbsp; &nbsp; &nbsp; &nbsp; -L or --locality, ex -L \'New York City\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -O or --organization, ex -O \'example LTD\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -CN or --commonname, ex -CN \'www.example.com\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -A or --alias, ex -A \'example-server\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS1 or --SAN1 &nbsp;Subject Alt Name 1<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS2 or --SAN2 &nbsp;Subject Alt Name 2<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS3 or --SAN3 &nbsp;Subject Alt Name 3<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS4 or --SAN4 &nbsp;Subject Alt Name 4<br></li>\r\n<li class=\"null\">Below is example syntax for created a cert for humanzoo.com\r\n<ul>\r\n<li class=\"null\">./certmaker.sh -d humanzoo.com -C US -ST NY -L \'New York City\' -O \'Human Zoo foundation\' -CN humanzoo.com -A humanzoo -DNS1 <a href=\"https://www.humanzoo.com\">www.humanzoo.com</a> -DNS2 login.humanzoo.com</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/codesigncertmaker.sh</li>\r\n<li class=\"null\">/root/cs_codesigncertmaker.sh</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','The CA server is build on ubuntu 22.01 and uses openSSL to create Certificate Authority and intermediate Certificate Authority for signing SSL certs.  The CA and intermediate certs have already been created using a domain of globalcerts.com.  To create new SSL certs or to sign binaries, you can use scripts that exist on this server.  The NRTS will also use these scripts automatically to sign SSL certs for the redirectors and payload host services it builds.  More on that is explained in the NRTS server overview.  That said, if you want do generate these manually, below is an overview of these scripts on the server to all you to.\r\n\r\n/root/certmaker.sh\r\n\r\nThis is used to create HTTPS SSL certs.  The script has a help menu that is pretty self explanitory.  below is the help menu that list the various flags.\r\nREQUIRED Flags        -d or --domain FQDN,  ex. -d www.example.com        -r or --random, this will randomize Country, City, State, and organization info        -q or --quiet, will built the certs without showing settings and asking for confirmationOPTIONAL Flags - random values will be used if not set        -C or --country 2LetterAbbrv, ex. -C US        -ST or --state  State, ex -ST \'New York\' NOTE: single quotes need if spaces        -L or --locality, ex -L \'New York City\'        -O or --organization, ex -O \'example LTD\'        -CN or --commonname, ex -CN \'www.example.com\'        -A or --alias, ex -A \'example-server\'        -DNS1 or --SAN1  Subject Alt Name 1        -DNS2 or --SAN2  Subject Alt Name 2        -DNS3 or --SAN3  Subject Alt Name 3        -DNS4 or --SAN4  Subject Alt Name 4\r\nBelow is example syntax for created a cert for humanzoo.com\r\n\r\n./certmaker.sh -d humanzoo.com -C US -ST NY -L \'New York City\' -O \'Human Zoo foundation\' -CN humanzoo.com -A humanzoo -DNS1 www.humanzoo.com -DNS2 login.humanzoo.com\r\n\r\n\r\n\r\n\r\n/root/codesigncertmaker.sh\r\n/root/cs_codesigncertmaker.sh\r\n\r\n ',1,'2023-03-29 01:32:10','2023-03-29 01:32:10','ca-server','cyber-range-systems-overview','version','','',2),(15,7,'Traffic-Gen','<p id=\"bkmrk-the-traffic-gen-serv\">The Traffic-gen server was build on ubuntu 22.01 and uses a customized docker container that will use postfix and mutt to send emails to a given list of users.&nbsp; The email context was pulled using the Enron data dump, if you don\'t know, several years ago due the FCC force Enron to make it\'s corporate emails public.&nbsp; Since then several projects have organized these emails into a database.&nbsp; It\'s decent source for pulling out human readable \"subject\" and \"body\" content.&nbsp; The container will use a script that will randomly pull subject and email body content from a CSV file, then randomly select a email address from the user provide list and send an email.&nbsp; The functionality of this is very customizable.&nbsp; Here is an overview of how this functions.</p>\r\n<p id=\"bkmrk-file-structure\">FILE STRUCTURE</p>\r\n<ul id=\"bkmrk-%2Froot%2Fbuildcompose.s\">\r\n<li class=\"null\">/root/buildcompose.sh</li>\r\n</ul>','The Traffic-gen server was build on ubuntu 22.01 and uses a customized docker container that will use postfix and mutt to send emails to a given list of users.  The email context was pulled using the Enron data dump, if you don\'t know, several years ago due the FCC force Enron to make it\'s corporate emails public.  Since then several projects have organized these emails into a database.  It\'s decent source for pulling out human readable \"subject\" and \"body\" content.  The container will use a script that will randomly pull subject and email body content from a CSV file, then randomly select a email address from the user provide list and send an email.  The functionality of this is very customizable.  Here is an overview of how this functions.\r\nFILE STRUCTURE\r\n\r\n/root/buildcompose.sh\r\n',1,'2023-03-29 01:39:47','2023-03-29 01:39:47','traffic-gen','cyber-range-systems-overview','version','','Initial publish',1),(16,8,'Traffic-WebHost','<p id=\"bkmrk-this-hosts-several-w\">This hosts several websites that can be used by Ghost to create outbound http and https traffic from within a target domain.</p>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','This hosts several websites that can be used by Ghost to create outbound http and https traffic from within a target domain.\r\n ',1,'2023-03-29 01:41:20','2023-03-29 01:41:20','traffic-webhost','cyber-range-systems-overview','version','','Initial publish',1),(17,9,'NRTS','','',1,'2023-03-29 01:41:30','2023-03-29 01:41:30','nrts','cyber-range-systems-overview','version','','Initial publish',1),(19,9,'NRTS','<p id=\"bkmrk-the-not-red-team-ser\">The not red team server (NRTS) is build on Ubuntu 22.01 and is used to quickly build out OPFOR infrastructure.&nbsp; It uses docker to containerize each individual infrastructure system so that one NRTS can support multiple services, such as a redirector, cobalt strike teamserver, payload host, or multiple of each.&nbsp; I haven\'t tested the bounds of this so not sure what the maximum is.&nbsp; I have had 3 teamservers, 3 redirectors, and 3 payloads host running successfully simultaneously.&nbsp; However, this server isn\'t meant to be the single server for all OPFOR infrastructure needs.&nbsp; You can clone this VM and make as many NRTS as you would like.&nbsp; This server can do several things and will greatly reduce your OPFOR teams time required to deploy infrastructure systems significantly.</p>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','The not red team server (NRTS) is build on Ubuntu 22.01 and is used to quickly build out OPFOR infrastructure.  It uses docker to containerize each individual infrastructure system so that one NRTS can support multiple services, such as a redirector, cobalt strike teamserver, payload host, or multiple of each.  I haven\'t tested the bounds of this so not sure what the maximum is.  I have had 3 teamservers, 3 redirectors, and 3 payloads host running successfully simultaneously.  However, this server isn\'t meant to be the single server for all OPFOR infrastructure needs.  You can clone this VM and make as many NRTS as you would like.  This server can do several things and will greatly reduce your OPFOR teams time required to deploy infrastructure systems significantly.\r\n ',1,'2023-03-29 01:47:28','2023-03-29 01:47:28','nrts','cyber-range-systems-overview','version','','',2),(21,7,'Traffic-Gen','<p id=\"bkmrk-the-traffic-gen-serv\">The Traffic-gen server was build on Ubuntu 22.01 and uses a customized docker container that will use Postfix and mutt to send emails to a given list of users.&nbsp; The email context was pulled using the Enron data dump, if you don\'t know, several years ago due the FCC force Enron to make it\'s corporate emails public.&nbsp; Since then several projects have organized these emails into a database.&nbsp; It\'s decent source for pulling out human readable \"subject\" and \"body\" content.&nbsp; The container will use a script that will randomly pull subject and email body content from a CSV file, then randomly select a email address from the user provide list and send an email.&nbsp; The functionality of this is very customization.&nbsp; Here is an overview of how this functions.</p>\r\n<p id=\"bkmrk-file-structure\">FILE STRUCTURE</p>\r\n<ul id=\"bkmrk-%2Froot%2Fbuildcompose.s\">\r\n<li class=\"null\">Email Traffic generation scripts\r\n<ul id=\"bkmrk-%C2%A0%2Froot%2Fbuildcompose.\">\r\n<li class=\"null\">&nbsp;/root/buildcompose.sh\r\n<ul id=\"bkmrk-this-script-will-mod\">\r\n<li class=\"null\">This script will modify the docker-compose file based on user input.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/killtrafficgen.sh\r\n<ul id=\"bkmrk-simple-script-that-i\">\r\n<li class=\"null\">Simple script that is basically \"docker-compose up -d\"</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/starttrafficgen.sh\r\n<ul id=\"bkmrk-simple-script-that-i-1\">\r\n<li class=\"null\">Simple script that is basically \"docker-compose down\"</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-folder-structure-of-\">Folder structure of the email traffic generator.&nbsp;&nbsp;</p>\r\n<ul id=\"bkmrk-%2Froot%2Femailerlist.tx\">\r\n<li class=\"null\">/root/emailerlist.txt\r\n<ul id=\"bkmrk-this-file-contains-t\">\r\n<li class=\"null\">This file contains the domains and IPs that will be used by the email traffic generator.&nbsp; This is read in by the buildcompose file to configure a docker container for each one.&nbsp; Then each container will use the contents of the /root/TG folder for composing and sending emails.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">&nbsp;/root/TG\r\n<ul id=\"bkmrk-%2Froot%2Ftg%2Fcontent%2Fema\">\r\n<li class=\"null\">/root/TG/Content/EmailContent.csv\r\n<ul id=\"bkmrk-this-file-is-a-csv-o\">\r\n<li class=\"null\">This file is a CSV of subject, email body content.&nbsp; This content was extracted from old Enron emails that the FCC made publicly available.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/RandomFiles/\r\n<ul id=\"bkmrk-this-directory-conta\">\r\n<li class=\"null\">This directory contains 108 random files of types .doc, .docx, .ppt, .pptx, .pdf, and .xlsx.&nbsp; These files are used as email attachments.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/SendTo/&lt;user defined dir&gt;/sendto.txt\r\n<ul id=\"bkmrk-the-sendto.txt-file-\">\r\n<li class=\"null\">The sendto.txt file should contain a list of email addresses that the traffic generator will send emails to.&nbsp; This is designed to support multiple target domains.&nbsp; The way this works is you create a folder for each target domain email list.&nbsp; This is the &lt;user defined dir&gt;.&nbsp; When you run the buildcompose.sh, it will first ask which of these directories should it build the docker-compose file for.&nbsp; for example, if I made a target domain called widgets.com, I would make a directory at /root/TG/SendTo/widgets.&nbsp; Then in that directory I would make a file called \"sendto.txt\" and fill it with email addresses for the users in the widget domain that I want the email traffic generator to send emails to.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/Senders/senders.txt\r\n<ul id=\"bkmrk-this-file-contains-t-1\">\r\n<li class=\"null\">This file contains the \"from\" names in a firstname.lastname format.&nbsp; The email traffic generator will use this in combination with each containers domain from the emailerlist.txt to generate the \"from\" email address.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">&nbsp;/root/TG/Scripts/StartEmail.sh\r\n<ul id=\"bkmrk-this-is-the-entrypoi\">\r\n<li class=\"null\">This is the entrypoint script for the docker containers.&nbsp; It runs and endless loop that will send emails to the addresses in the \"sendto.txt\" file.&nbsp; This script is customizable where you can adjust the time interval between emails sent, add jitter to that time internal, set a max number of recipients, and set a max number of attachments.&nbsp; These settings can be modified two ways.&nbsp; First you can edit the script and change the default values set for these, or you could modify the docker-compose file and add the appropriate setting flags to the entrypoint script.&nbsp;</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TrafficLog\r\n<ul id=\"bkmrk-this-directory-is-wh\">\r\n<li class=\"null\">This directory is where each container will create a traffic log.&nbsp; The name of each log will be log_&lt;senderdomain&gt;.&nbsp; The log will track a count of emails sent by that container, the time, and who the email was sent to.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>','The Traffic-gen server was build on Ubuntu 22.01 and uses a customized docker container that will use Postfix and mutt to send emails to a given list of users.  The email context was pulled using the Enron data dump, if you don\'t know, several years ago due the FCC force Enron to make it\'s corporate emails public.  Since then several projects have organized these emails into a database.  It\'s decent source for pulling out human readable \"subject\" and \"body\" content.  The container will use a script that will randomly pull subject and email body content from a CSV file, then randomly select a email address from the user provide list and send an email.  The functionality of this is very customization.  Here is an overview of how this functions.\r\nFILE STRUCTURE\r\n\r\nEmail Traffic generation scripts\r\n\r\n /root/buildcompose.sh\r\n\r\nThis script will modify the docker-compose file based on user input.\r\n\r\n\r\n/root/killtrafficgen.sh\r\n\r\nSimple script that is basically \"docker-compose up -d\"\r\n\r\n\r\n/root/starttrafficgen.sh\r\n\r\nSimple script that is basically \"docker-compose down\"\r\n\r\n\r\n\r\n\r\n\r\nFolder structure of the email traffic generator.  \r\n\r\n/root/emailerlist.txt\r\n\r\nThis file contains the domains and IPs that will be used by the email traffic generator.  This is read in by the buildcompose file to configure a docker container for each one.  Then each container will use the contents of the /root/TG folder for composing and sending emails.\r\n\r\n\r\n /root/TG\r\n\r\n/root/TG/Content/EmailContent.csv\r\n\r\nThis file is a CSV of subject, email body content.  This content was extracted from old Enron emails that the FCC made publicly available.\r\n\r\n\r\n/root/TG/RandomFiles/\r\n\r\nThis directory contains 108 random files of types .doc, .docx, .ppt, .pptx, .pdf, and .xlsx.  These files are used as email attachments.\r\n\r\n\r\n/root/TG/SendTo/<user defined dir>/sendto.txt\r\n\r\nThe sendto.txt file should contain a list of email addresses that the traffic generator will send emails to.  This is designed to support multiple target domains.  The way this works is you create a folder for each target domain email list.  This is the <user defined dir>.  When you run the buildcompose.sh, it will first ask which of these directories should it build the docker-compose file for.  for example, if I made a target domain called widgets.com, I would make a directory at /root/TG/SendTo/widgets.  Then in that directory I would make a file called \"sendto.txt\" and fill it with email addresses for the users in the widget domain that I want the email traffic generator to send emails to.\r\n\r\n\r\n/root/TG/Senders/senders.txt\r\n\r\nThis file contains the \"from\" names in a firstname.lastname format.  The email traffic generator will use this in combination with each containers domain from the emailerlist.txt to generate the \"from\" email address.\r\n\r\n\r\n /root/TG/Scripts/StartEmail.sh\r\n\r\nThis is the entrypoint script for the docker containers.  It runs and endless loop that will send emails to the addresses in the \"sendto.txt\" file.  This script is customizable where you can adjust the time interval between emails sent, add jitter to that time internal, set a max number of recipients, and set a max number of attachments.  These settings can be modified two ways.  First you can edit the script and change the default values set for these, or you could modify the docker-compose file and add the appropriate setting flags to the entrypoint script. \r\n\r\n\r\n/root/TrafficLog\r\n\r\nThis directory is where each container will create a traffic log.  The name of each log will be log_<senderdomain>.  The log will track a count of emails sent by that container, the time, and who the email was sent to.\r\n\r\n\r\n\r\n\r\n',1,'2023-03-29 16:40:12','2023-03-29 16:40:12','traffic-gen','cyber-range-systems-overview','version','','',2),(23,9,'NRTS','<p id=\"bkmrk-the-not-red-team-ser\">The not red team server (NRTS) is build on Ubuntu 22.01 and is used to quickly build out OPFOR infrastructure.&nbsp; It uses docker to containerize each individual infrastructure system so that one NRTS can support multiple services, such as a redirector, cobalt strike teamserver, payload host, or multiple of each.&nbsp; I haven\'t tested the bounds of this so not sure what the maximum is.&nbsp; I have had 3 teamservers, 3 redirectors, and 3 payloads host running successfully simultaneously.&nbsp; However, this server isn\'t meant to be the single server for all OPFOR infrastructure needs.&nbsp; You can clone this VM and make as many NRTS as you would like.&nbsp; This server can do several things and will greatly reduce your OPFOR teams time required to deploy infrastructure systems significantly.&nbsp; There is a lot going on in this VM, below is a description of the folder structure, for more details on how to use this VM, see the \"NRTS\" in the How to\" section.</p>\r\n<p id=\"bkmrk-folder-structure\">Folder Structure</p>\r\n<ul id=\"bkmrk-%2Froot%2Fbackbonerouter\">\r\n<li class=\"null\">/root/backbonerouters\r\n<ul>\r\n<li class=\"null\">This directory contains a list of all the IP subnets that the SI-router will route for systems connected to the grayspace esxi switch.&nbsp; Its structure by geo-location, in the following format /root/backbonerouters/&lt;country&gt;/&lt;city.txt&gt;.&nbsp; &nbsp;This folder structure is used by other scripts on the NRTS to generator IP addresses.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/C2concealer\r\n<ul>\r\n<li class=\"null\">This is a tool for generating Cobalt Strike C2 profiles, see the \"NRTS\" section in the \"How to\"</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/cobaltstrike-local\r\n<ul>\r\n<li class=\"null\">This is a copy of cobaltstrike, this is a clean copy and when you build a teamserver using the buildredteam.sh, it will make a copy of this for each teamserver you build.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/go\r\n<ul>\r\n<li class=\"null\">Golang is install for whatever go projects you want to mess with.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/Profiles\r\n<ul>\r\n<li class=\"null\">This is where to put your cobalt strike profiles, this is where the buildredteam.sh will look for profiles when it\'s setting up a teamserver or an HAProxy redirector that will set up ACLs based on C2 profiles.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts\r\n<ul>\r\n<li class=\"null\">This is where most of the custom scripts reside.</li>\r\n<li class=\"null\">/root/scripts/buildreadteam.sh\r\n<ul>\r\n<li class=\"null\">This is the script used to automate the build of OPFOR infastructure, it will create redirectors, payload hosts, phishing hosts, and teamservers in docker containers.&nbsp; See the how to section for more information.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/ManageDNS.sh\r\n<ul>\r\n<li class=\"null\">This script is used to manage DNS records that get added to the rootDNS server.&nbsp; See the how to section for more information.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/RegisterDNS.sh\r\n<ul>\r\n<li class=\"null\">This script is used to create new DNS records that will get added to the rootDNS server.&nbsp; See the how to section for more information.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/phish\r\n<ul>\r\n<li class=\"null\">This directory contains scripts for sending phishing emails.</li>\r\n<li class=\"null\">/root/scripts/phish/phish.sh\r\n<ul>\r\n<li class=\"null\">Used to send a phish to a single target.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/phish/spam.sh\r\n<ul>\r\n<li class=\"null\">Used to send phishing attacks to a list of targets.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/services\r\n<ul>\r\n<li class=\"null\">This directory is used for storing information regarding containers that the buildredteam.sh script creates.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/SourcePoint\r\n<ul>\r\n<li class=\"null\">This is another tool for generating Cobalt Strike profiles, see the \"how to\" section.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>','The not red team server (NRTS) is build on Ubuntu 22.01 and is used to quickly build out OPFOR infrastructure.  It uses docker to containerize each individual infrastructure system so that one NRTS can support multiple services, such as a redirector, cobalt strike teamserver, payload host, or multiple of each.  I haven\'t tested the bounds of this so not sure what the maximum is.  I have had 3 teamservers, 3 redirectors, and 3 payloads host running successfully simultaneously.  However, this server isn\'t meant to be the single server for all OPFOR infrastructure needs.  You can clone this VM and make as many NRTS as you would like.  This server can do several things and will greatly reduce your OPFOR teams time required to deploy infrastructure systems significantly.  There is a lot going on in this VM, below is a description of the folder structure, for more details on how to use this VM, see the \"NRTS\" in the How to\" section.\r\nFolder Structure\r\n\r\n/root/backbonerouters\r\n\r\nThis directory contains a list of all the IP subnets that the SI-router will route for systems connected to the grayspace esxi switch.  Its structure by geo-location, in the following format /root/backbonerouters/<country>/<city.txt>.   This folder structure is used by other scripts on the NRTS to generator IP addresses.\r\n\r\n\r\n/root/C2concealer\r\n\r\nThis is a tool for generating Cobalt Strike C2 profiles, see the \"NRTS\" section in the \"How to\"\r\n\r\n\r\n/root/cobaltstrike-local\r\n\r\nThis is a copy of cobaltstrike, this is a clean copy and when you build a teamserver using the buildredteam.sh, it will make a copy of this for each teamserver you build.\r\n\r\n\r\n/root/go\r\n\r\nGolang is install for whatever go projects you want to mess with.\r\n\r\n\r\n/root/Profiles\r\n\r\nThis is where to put your cobalt strike profiles, this is where the buildredteam.sh will look for profiles when it\'s setting up a teamserver or an HAProxy redirector that will set up ACLs based on C2 profiles.\r\n\r\n\r\n/root/scripts\r\n\r\nThis is where most of the custom scripts reside.\r\n/root/scripts/buildreadteam.sh\r\n\r\nThis is the script used to automate the build of OPFOR infastructure, it will create redirectors, payload hosts, phishing hosts, and teamservers in docker containers.  See the how to section for more information.\r\n\r\n\r\n/root/scripts/ManageDNS.sh\r\n\r\nThis script is used to manage DNS records that get added to the rootDNS server.  See the how to section for more information.\r\n\r\n\r\n/root/scripts/RegisterDNS.sh\r\n\r\nThis script is used to create new DNS records that will get added to the rootDNS server.  See the how to section for more information.\r\n\r\n\r\n/root/scripts/phish\r\n\r\nThis directory contains scripts for sending phishing emails.\r\n/root/scripts/phish/phish.sh\r\n\r\nUsed to send a phish to a single target.\r\n\r\n\r\n/root/scripts/phish/spam.sh\r\n\r\nUsed to send phishing attacks to a list of targets.\r\n\r\n\r\n\r\n\r\n\r\n\r\n/root/services\r\n\r\nThis directory is used for storing information regarding containers that the buildredteam.sh script creates.\r\n\r\n\r\n/root/SourcePoint\r\n\r\nThis is another tool for generating Cobalt Strike profiles, see the \"how to\" section.\r\n\r\n\r\n\r\n',1,'2023-03-29 17:34:27','2023-03-29 17:34:27','nrts','cyber-range-systems-overview','version','','',3),(24,10,'New Page','<h1 id=\"bkmrk-register-domains\">Register Domains</h1>\n<h1 id=\"bkmrk-registering-dns\">Registering DNS</h1>\n<h1 id=\"bkmrk-three-ways-of-regist\">Three ways of registering domains</h1>\n<h2 id=\"bkmrk-rts-server-ip%27s-only\">RTS server IP\'s only (Manually entered Domains)</h2>\n<p id=\"bkmrk-if-you-are-using-an-\">If you are using an RTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.</p>\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records</p>\n<p id=\"bkmrk-\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsmain.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\n<p id=\"bkmrk-step2.-select-option\">Step2. Select option 1 - Manually create domain name/s.</p>\n<p id=\"bkmrk--1\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmain.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\n<p id=\"bkmrk-step3.-on-this-scree\">Step3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.</p>\n<p id=\"bkmrk--2\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmanual.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmanual.png\" alt=\"dnsaddmanual.png\"></a></p>\n<p id=\"bkmrk-step4.-enter-in-a-fq\">Step4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.</p>\n<p id=\"bkmrk--3\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmanualentry.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmanualentry.png\" alt=\"dnsaddmanualentry.png\"></a></p>\n<p id=\"bkmrk-step5.-you-will-see-\">Step5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.</p>\n<p id=\"bkmrk--4\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmanualresult.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmanualresult.png\" alt=\"dnsaddmanualresult.png\"></a></p>\n<p id=\"bkmrk-below-is-the-complet\">Below is the completion screen, your domains have now been registered.</p>\n<p id=\"bkmrk--5\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmanualcompletion.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmanualcompletion.png\" alt=\"dnsaddmanualcompletion.png\"></a></p>\n<h2 id=\"bkmrk-rts-server-ip%27s-only-1\">RTS server IP\'s Only (Randomly generated Domains)</h2>\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr-1\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.</p>\n<p id=\"bkmrk--6\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsmain.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\n<p id=\"bkmrk-step2.-select-option-1\">Step2. Select Option 2 - Use randomly generated one/s.</p>\n<p id=\"bkmrk--7\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmain.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\n<p id=\"bkmrk-step3.-enter-y-and-p\">Step3. Enter y and press enter to continue</p>\n<p id=\"bkmrk--8\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsrandom.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsrandom.png\" alt=\"dnsrandom.png\"></a></p>\n<p id=\"bkmrk-below-is-the-complet-1\">Below is the completion screen, your domains have now been registered.</p>\n<p id=\"bkmrk--9\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/dnsrandomcompletion.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsrandomcompletion.png\" alt=\"dnsrandomcompletion.png\"></a></p>\n<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.</p>\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.</p>\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\n       \n\n</code></pre>\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\n<p id=\"bkmrk--10\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnshelp.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnshelp.png\" alt=\"registerdnshelp.png\"></a></p>\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\n<p id=\"bkmrk--11\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdns-dnsfileex.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdns-dnsfileex.png\" alt=\"registerdns-dnsfileex.png\"></a></p>\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\n<p id=\"bkmrk--12\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnsran.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnsran.png\" alt=\"registerdnsran.png\"></a></p>\n','Register Domains\nRegistering DNS\nThree ways of registering domains\nRTS server IP\'s only (Manually entered Domains)\nIf you are using an RTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records\n\nStep2. Select option 1 - Manually create domain name/s.\n\nStep3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.\n\nStep4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.\n\nStep5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.\n\nBelow is the completion screen, your domains have now been registered.\n\nRTS server IP\'s Only (Randomly generated Domains)\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.\n\nStep2. Select Option 2 - Use randomly generated one/s.\n\nStep3. Enter y and press enter to continue\n\nBelow is the completion screen, your domains have now been registered.\n\nAdd Domains based on User created file\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.\nssh-copy-id root@198.41.0.4   - the password is : toor\n       \n\n\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\n\nStep4. Create a DNS file according to the scripts usage. Below is an example.\n\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\n\n',1,'2023-03-30 17:48:42','2023-03-30 17:48:42','new-page','register-dns','version','# Register Domains\r\n\r\n# Registering DNS\r\n\r\n# Three ways of registering domains\r\n\r\n## RTS server IP\'s only (Manually entered Domains)\r\n\r\nIf you are using an RTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.\r\n\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records\r\n\r\n[![dnsmain.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsmain.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsmain.png)\r\n\r\nStep2. Select option 1 - Manually create domain name/s.\r\n\r\n[![dnsaddmain.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmain.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmain.png)\r\n\r\nStep3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.\r\n\r\n[![dnsaddmanual.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmanual.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmanual.png)\r\n\r\nStep4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.\r\n\r\n[![dnsaddmanualentry.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmanualentry.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmanualentry.png)\r\n\r\nStep5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.\r\n\r\n[![dnsaddmanualresult.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmanualresult.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmanualresult.png)\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\n[![dnsaddmanualcompletion.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmanualcompletion.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmanualcompletion.png)\r\n\r\n## RTS server IP\'s Only (Randomly generated Domains)\r\n\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.\r\n\r\n[![dnsmain.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsmain.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsmain.png)\r\n\r\nStep2. Select Option 2 - Use randomly generated one/s.\r\n\r\n[![dnsaddmain.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsaddmain.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsaddmain.png)\r\n\r\nStep3. Enter y and press enter to continue\r\n\r\n[![dnsrandom.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsrandom.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsrandom.png)\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\n[![dnsrandomcompletion.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/dnsrandomcompletion.png)](http://www.redbook.com/uploads/images/gallery/2022-04/dnsrandomcompletion.png)\r\n\r\n## Add Domains based on User created file\r\n\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.\r\n\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.\r\n\r\n```\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n```\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\n[![registerdnshelp.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnshelp.png)](http://www.redbook.com/uploads/images/gallery/2022-04/registerdnshelp.png)\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\n[![registerdns-dnsfileex.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdns-dnsfileex.png)](http://www.redbook.com/uploads/images/gallery/2022-04/registerdns-dnsfileex.png)\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\\\RegisterDNS.sh mydns.txt\r\n\r\n[![registerdnsran.png](http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnsran.png)](http://www.redbook.com/uploads/images/gallery/2022-04/registerdnsran.png)','Initial publish',1),(26,10,'New Page','<h1 id=\"bkmrk-register-domains\">Register Domains</h1>\r\n<h1 id=\"bkmrk-registering-dns\">Registering DNS</h1>\r\n<h1 id=\"bkmrk-three-ways-of-regist\">Three ways of registering domains</h1>\r\n<h2 id=\"bkmrk-rts-server-ip%27s-only\">RTS server IP\'s only (Manually entered Domains)</h2>\r\n<p id=\"bkmrk-if-you-are-using-an-\">If you are using an RTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.</p>\r\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records</p>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\r\n<p id=\"bkmrk-step2.-select-option\">Step2. Select option 1 - Manually create domain name/s.</p>\r\n<p id=\"bkmrk--1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\r\n<p id=\"bkmrk-step3.-on-this-scree\">Step3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.</p>\r\n<p id=\"bkmrk--2\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanual.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanual.png\" alt=\"dnsaddmanual.png\"></a></p>\r\n<p id=\"bkmrk-step4.-enter-in-a-fq\">Step4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.</p>\r\n<p id=\"bkmrk--3\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualentry.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualentry.png\" alt=\"dnsaddmanualentry.png\"></a></p>\r\n<p id=\"bkmrk-step5.-you-will-see-\">Step5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.</p>\r\n<p id=\"bkmrk--4\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualresult.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualresult.png\" alt=\"dnsaddmanualresult.png\"></a></p>\r\n<p id=\"bkmrk-below-is-the-complet\">Below is the completion screen, your domains have now been registered.</p>\r\n<p id=\"bkmrk--5\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualcompletion.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualcompletion.png\" alt=\"dnsaddmanualcompletion.png\"></a></p>\r\n<h2 id=\"bkmrk-rts-server-ip%27s-only-1\">RTS server IP\'s Only (Randomly generated Domains)</h2>\r\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr-1\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.</p>\r\n<p id=\"bkmrk--6\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\r\n<p id=\"bkmrk-step2.-select-option-1\">Step2. Select Option 2 - Use randomly generated one/s.</p>\r\n<p id=\"bkmrk--7\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\r\n<p id=\"bkmrk-step3.-enter-y-and-p\">Step3. Enter y and press enter to continue</p>\r\n<p id=\"bkmrk--8\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsrandom.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsrandom.png\" alt=\"dnsrandom.png\"></a></p>\r\n<p id=\"bkmrk-below-is-the-complet-1\">Below is the completion screen, your domains have now been registered.</p>\r\n<p id=\"bkmrk--9\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsrandomcompletion.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsrandomcompletion.png\" alt=\"dnsrandomcompletion.png\"></a></p>\r\n<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.</p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\r\n<p id=\"bkmrk--10\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnshelp.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnshelp.png\" alt=\"registerdnshelp.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdns-dnsfileex.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdns-dnsfileex.png\" alt=\"registerdns-dnsfileex.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\r\n<p id=\"bkmrk--12\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnsran.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnsran.png\" alt=\"registerdnsran.png\"></a></p>','Register Domains\r\nRegistering DNS\r\nThree ways of registering domains\r\nRTS server IP\'s only (Manually entered Domains)\r\nIf you are using an RTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records\r\n\r\nStep2. Select option 1 - Manually create domain name/s.\r\n\r\nStep3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.\r\n\r\nStep4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.\r\n\r\nStep5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\nRTS server IP\'s Only (Randomly generated Domains)\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.\r\n\r\nStep2. Select Option 2 - Use randomly generated one/s.\r\n\r\nStep3. Enter y and press enter to continue\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\nAdd Domains based on User created file\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\n',1,'2023-03-30 18:10:12','2023-03-30 18:10:12','new-page','register-dns','version','','',2),(27,10,'Three ways of registering domains','<h2 id=\"bkmrk-rts-server-ip%27s-only\">RTS server IP\'s only (Manually entered Domains)</h2>\r\n<p id=\"bkmrk-if-you-are-using-an-\">If you are using an RTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.</p>\r\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records</p>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\r\n<p id=\"bkmrk-step2.-select-option\">Step2. Select option 1 - Manually create domain name/s.</p>\r\n<p id=\"bkmrk--1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\r\n<p id=\"bkmrk-step3.-on-this-scree\">Step3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.</p>\r\n<p id=\"bkmrk--2\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanual.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanual.png\" alt=\"dnsaddmanual.png\"></a></p>\r\n<p id=\"bkmrk-step4.-enter-in-a-fq\">Step4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.</p>\r\n<p id=\"bkmrk--3\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualentry.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualentry.png\" alt=\"dnsaddmanualentry.png\"></a></p>\r\n<p id=\"bkmrk-step5.-you-will-see-\">Step5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.</p>\r\n<p id=\"bkmrk--4\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualresult.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualresult.png\" alt=\"dnsaddmanualresult.png\"></a></p>\r\n<p id=\"bkmrk-below-is-the-complet\">Below is the completion screen, your domains have now been registered.</p>\r\n<p id=\"bkmrk--5\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualcompletion.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualcompletion.png\" alt=\"dnsaddmanualcompletion.png\"></a></p>\r\n<h2 id=\"bkmrk-rts-server-ip%27s-only-1\">RTS server IP\'s Only (Randomly generated Domains)</h2>\r\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr-1\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.</p>\r\n<p id=\"bkmrk--6\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\r\n<p id=\"bkmrk-step2.-select-option-1\">Step2. Select Option 2 - Use randomly generated one/s.</p>\r\n<p id=\"bkmrk--7\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\r\n<p id=\"bkmrk-step3.-enter-y-and-p\">Step3. Enter y and press enter to continue</p>\r\n<p id=\"bkmrk--8\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsrandom.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsrandom.png\" alt=\"dnsrandom.png\"></a></p>\r\n<p id=\"bkmrk-below-is-the-complet-1\">Below is the completion screen, your domains have now been registered.</p>\r\n<p id=\"bkmrk--9\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsrandomcompletion.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsrandomcompletion.png\" alt=\"dnsrandomcompletion.png\"></a></p>\r\n<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.</p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\r\n<p id=\"bkmrk--10\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnshelp.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnshelp.png\" alt=\"registerdnshelp.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdns-dnsfileex.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdns-dnsfileex.png\" alt=\"registerdns-dnsfileex.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\r\n<p id=\"bkmrk--12\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnsran.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnsran.png\" alt=\"registerdnsran.png\"></a></p>','RTS server IP\'s only (Manually entered Domains)\r\nIf you are using an RTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records\r\n\r\nStep2. Select option 1 - Manually create domain name/s.\r\n\r\nStep3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.\r\n\r\nStep4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.\r\n\r\nStep5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\nRTS server IP\'s Only (Randomly generated Domains)\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.\r\n\r\nStep2. Select Option 2 - Use randomly generated one/s.\r\n\r\nStep3. Enter y and press enter to continue\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\nAdd Domains based on User created file\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\n',1,'2023-03-30 18:10:46','2023-03-30 18:10:46','three-ways-of-registering-domains','register-dns','version','','',3),(29,10,'Three ways of registering domains','<h2 id=\"bkmrk-rts-server-ip%27s-only\">NRTS server IP\'s only (Manually entered Domains)</h2>\r\n<p id=\"bkmrk-if-you-are-using-an-\">If you are using an NRTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.</p>\r\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records</p>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\r\n<p id=\"bkmrk-step2.-select-option\">Step2. Select option 1 - Manually create domain name/s.</p>\r\n<p id=\"bkmrk--1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\r\n<p id=\"bkmrk-step3.-on-this-scree\">Step3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.</p>\r\n<p id=\"bkmrk--2\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanual.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanual.png\" alt=\"dnsaddmanual.png\"></a></p>\r\n<p id=\"bkmrk-step4.-enter-in-a-fq\">Step4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.</p>\r\n<p id=\"bkmrk--3\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualentry.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualentry.png\" alt=\"dnsaddmanualentry.png\"></a></p>\r\n<p id=\"bkmrk-step5.-you-will-see-\">Step5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.</p>\r\n<p id=\"bkmrk--4\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualresult.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualresult.png\" alt=\"dnsaddmanualresult.png\"></a></p>\r\n<p id=\"bkmrk-below-is-the-complet\">Below is the completion screen, your domains have now been registered.</p>\r\n<p id=\"bkmrk--5\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualcompletion.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualcompletion.png\" alt=\"dnsaddmanualcompletion.png\"></a></p>\r\n<h2 id=\"bkmrk-rts-server-ip%27s-only-1\">RTS server IP\'s Only (Randomly generated Domains)</h2>\r\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr-1\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.</p>\r\n<p id=\"bkmrk--6\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\r\n<p id=\"bkmrk-step2.-select-option-1\">Step2. Select Option 2 - Use randomly generated one/s.</p>\r\n<p id=\"bkmrk--7\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\r\n<p id=\"bkmrk-step3.-enter-y-and-p\">Step3. Enter y and press enter to continue</p>\r\n<p id=\"bkmrk--8\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsrandom.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsrandom.png\" alt=\"dnsrandom.png\"></a></p>\r\n<p id=\"bkmrk-below-is-the-complet-1\">Below is the completion screen, your domains have now been registered.</p>\r\n<p id=\"bkmrk--9\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsrandomcompletion.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsrandomcompletion.png\" alt=\"dnsrandomcompletion.png\"></a></p>\r\n<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.</p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\r\n<p id=\"bkmrk--10\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnshelp.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnshelp.png\" alt=\"registerdnshelp.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdns-dnsfileex.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdns-dnsfileex.png\" alt=\"registerdns-dnsfileex.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\r\n<p id=\"bkmrk--12\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnsran.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnsran.png\" alt=\"registerdnsran.png\"></a></p>','NRTS server IP\'s only (Manually entered Domains)\r\nIf you are using an NRTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records\r\n\r\nStep2. Select option 1 - Manually create domain name/s.\r\n\r\nStep3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.\r\n\r\nStep4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.\r\n\r\nStep5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\nRTS server IP\'s Only (Randomly generated Domains)\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.\r\n\r\nStep2. Select Option 2 - Use randomly generated one/s.\r\n\r\nStep3. Enter y and press enter to continue\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\nAdd Domains based on User created file\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\n',1,'2023-03-30 18:11:30','2023-03-30 18:11:30','three-ways-of-registering-domains','register-dns','version','','',4),(30,10,'Manual Domain Registration','<h2 id=\"bkmrk-rts-server-ip%27s-only\">NRTS server IP\'s only (Manually entered Domains)</h2>\r\n<p id=\"bkmrk-if-you-are-using-an-\">If you are using an NRTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.</p>\r\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records</p>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\r\n<p id=\"bkmrk-step2.-select-option\">Step2. Select option 1 - Manually create domain name/s.</p>\r\n<p id=\"bkmrk--1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\r\n<p id=\"bkmrk-step3.-on-this-scree\">Step3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.</p>\r\n<p id=\"bkmrk--2\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanual.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanual.png\" alt=\"dnsaddmanual.png\"></a></p>\r\n<p id=\"bkmrk-step4.-enter-in-a-fq\">Step4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.</p>\r\n<p id=\"bkmrk--3\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualentry.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualentry.png\" alt=\"dnsaddmanualentry.png\"></a></p>\r\n<p id=\"bkmrk-step5.-you-will-see-\">Step5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.</p>\r\n<p id=\"bkmrk--4\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualresult.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualresult.png\" alt=\"dnsaddmanualresult.png\"></a></p>\r\n<p id=\"bkmrk-below-is-the-complet\">Below is the completion screen, your domains have now been registered.</p>\r\n<p id=\"bkmrk--5\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmanualcompletion.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmanualcompletion.png\" alt=\"dnsaddmanualcompletion.png\"></a></p>\r\n<h2 id=\"bkmrk-rts-server-ip%27s-only-1\">RTS server IP\'s Only (Randomly generated Domains)</h2>\r\n<p id=\"bkmrk-step1.-run-%2Froot%2Fscr-1\">Step1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.</p>\r\n<p id=\"bkmrk--6\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsmain.png\" alt=\"dnsmain.png\"></a></p>\r\n<p id=\"bkmrk-step2.-select-option-1\">Step2. Select Option 2 - Use randomly generated one/s.</p>\r\n<p id=\"bkmrk--7\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsaddmain.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsaddmain.png\" alt=\"dnsaddmain.png\"></a></p>\r\n<p id=\"bkmrk-step3.-enter-y-and-p\">Step3. Enter y and press enter to continue</p>\r\n<p id=\"bkmrk--8\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsrandom.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsrandom.png\" alt=\"dnsrandom.png\"></a></p>\r\n<p id=\"bkmrk-below-is-the-complet-1\">Below is the completion screen, your domains have now been registered.</p>\r\n<p id=\"bkmrk--9\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/dnsrandomcompletion.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/dnsrandomcompletion.png\" alt=\"dnsrandomcompletion.png\"></a></p>\r\n<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.</p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\r\n<p id=\"bkmrk--10\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnshelp.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnshelp.png\" alt=\"registerdnshelp.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdns-dnsfileex.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdns-dnsfileex.png\" alt=\"registerdns-dnsfileex.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\r\n<p id=\"bkmrk--12\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnsran.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnsran.png\" alt=\"registerdnsran.png\"></a></p>','NRTS server IP\'s only (Manually entered Domains)\r\nIf you are using an NRTS server, then after you\'ve used the /root/scripts/buildredteam.sh to use as a redirector, teamserver, or payload host. You can add domains to the IP\'s that get built using /root/scripts/ManageDNS.sh.\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records\r\n\r\nStep2. Select option 1 - Manually create domain name/s.\r\n\r\nStep3. On this screen, you can select which IP you want to add a domain for. You can select one or all of them. For this example, I\'ll select option 1 to set a domain for the first IP in the list.\r\n\r\nStep4. Enter in a FQDN at the \"Here:\" prompt and press enter. NOTE: www will be added as a A record for your domains automatically. So for this example, adding widgetking.com will create an A record for widgetking.com as well as www.widgetking.com.\r\n\r\nStep5. You will see your newly added domain to the right of the IP, repeat steps 3 and 4 to add domains to other IPs. When you are done, select option D for done.\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\nRTS server IP\'s Only (Randomly generated Domains)\r\nStep1. Run /root/scripts/ManageDNS.sh, then select Option 1 Add DNS records.\r\n\r\nStep2. Select Option 2 - Use randomly generated one/s.\r\n\r\nStep3. Enter y and press enter to continue\r\n\r\nBelow is the completion screen, your domains have now been registered.\r\n\r\nAdd Domains based on User created file\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any RTS server at /root/scripts. You can use it from the RTS or SCP it over to Kali or most Linux based systems.\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\n',1,'2023-03-30 19:03:04','2023-03-30 19:03:04','manual-domain-registration','register-dns','version','','',5),(32,10,'Manual Domain Registration','<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.</p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\r\n<p id=\"bkmrk--10\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnshelp.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnshelp.png\" alt=\"registerdnshelp.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdns-dnsfileex.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdns-dnsfileex.png\" alt=\"registerdns-dnsfileex.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\r\n<p id=\"bkmrk--12\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnsran.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnsran.png\" alt=\"registerdnsran.png\"></a></p>','Add Domains based on User created file\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\n',1,'2023-03-30 19:44:46','2023-03-30 19:44:46','manual-domain-registration','register-dns','version','','',6),(34,10,'Manual Domain Registration','<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.&nbsp; If you are doing this from an NRTS, you can skip this step since this ssh keys are set up on the initial build of the NRTS.<br></p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\r\n<p id=\"bkmrk--10\"></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdns-dnsfileex.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdns-dnsfileex.png\" alt=\"registerdns-dnsfileex.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\r\n<p id=\"bkmrk--12\"><a href=\"http://www.redbook.com/uploads/images/gallery/2022-04/registerdnsran.png\"><img src=\"http://www.redbook.com/uploads/images/gallery/2022-04/scaled-1680-/registerdnsran.png\" alt=\"registerdnsran.png\"></a></p>','Add Domains based on User created file\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.  If you are doing this from an NRTS, you can skip this step since this ssh keys are set up on the initial build of the NRTS.\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\n',1,'2023-03-30 19:46:00','2023-03-30 19:46:00','manual-domain-registration','register-dns','version','','',7),(36,10,'Manual Domain Registration','<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.&nbsp; If you are doing this from an NRTS, you can skip this step since this ssh keys are set up on the initial build of the NRTS.<br></p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\r\n<p id=\"bkmrk--10\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerdns-help.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerdns-help.png\" alt=\"RegisterDNS-help.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/examplednsfile.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/examplednsfile.png\" alt=\"exampleDNSfile.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\r\n<p id=\"bkmrk--12\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerprocess.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerprocess.png\" alt=\"registerprocess.png\"></a></p>','Add Domains based on User created file\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.  If you are doing this from an NRTS, you can skip this step since this ssh keys are set up on the initial build of the NRTS.\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\n',1,'2023-03-30 19:48:58','2023-03-30 19:48:58','manual-domain-registration','register-dns','version','','',8),(37,10,'Manual Domain Registration','<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on User created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\">Step1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\">Step2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.&nbsp; If you are doing this from an NRTS, you can skip this step since the ssh keys are set up during the initial build of the NRTS.<br></p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code>ssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\">Step3. Look at Register.sh\'s usage. Run the script without passing a file or argument</p>\r\n<p id=\"bkmrk--10\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerdns-help.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerdns-help.png\" alt=\"RegisterDNS-help.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\">Step4. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/examplednsfile.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/examplednsfile.png\" alt=\"exampleDNSfile.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\">Step5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt</p>\r\n<p id=\"bkmrk--12\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerprocess.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerprocess.png\" alt=\"registerprocess.png\"></a></p>','Add Domains based on User created file\r\nStep1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.\r\nStep2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.  If you are doing this from an NRTS, you can skip this step since the ssh keys are set up during the initial build of the NRTS.\r\nssh-copy-id root@198.41.0.4   - the password is : toor\r\n       \r\n\r\n\r\nStep3. Look at Register.sh\'s usage. Run the script without passing a file or argument\r\n\r\nStep4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\n',1,'2023-03-30 20:01:02','2023-03-30 20:01:02','manual-domain-registration','register-dns','version','','',9),(39,4,'RootDNS','<p id=\"bkmrk-the-rootdns-server-i\">The RootDNS server is built on Ubuntu 22.01 and runs a recursive bind9 server.&nbsp; To simulate real world DNS, the server is configured with the following IP addresses;</p>\r\n<ul id=\"bkmrk-8.8.8.8---simulated-\">\r\n<li class=\"null\">8.8.8.8 - simulated Googles recursive DNS server</li>\r\n<li class=\"null\">198.41.0.4 - simulates the real world A-root server</li>\r\n<li class=\"null\">192.228.79.59 - simulates the real world B-root server</li>\r\n<li class=\"null\">192.33.4.12- simulates the real world C-root server</li>\r\n<li class=\"null\">128.8.10.90- simulates the real world D-root server</li>\r\n<li class=\"null\">192.203.230.10- simulates the real world E-root server</li>\r\n<li class=\"null\">195.5.5.241- simulates the real world F-root server</li>\r\n<li class=\"null\">192.112.36.4- simulates the real world G-root server</li>\r\n<li class=\"null\">128.63.2.53- simulates the real world H-root server</li>\r\n<li class=\"null\">192.36.148.17- simulates the real world I-root server</li>\r\n<li class=\"null\">192.58.128.30- simulates the real world J-root server</li>\r\n<li class=\"null\">193.0.15.129- simulates the real world K-root server</li>\r\n<li class=\"null\">199.7.83.42- simulates the real world L-root server</li>\r\n<li class=\"null\">202.12.27.33- simulates the real world M-root server</li>\r\n</ul>\r\n<p id=\"bkmrk-the-rootdns-server-i-1\">The RootDNS server in the Cyber Range handles all \"grayspace\" DNS.&nbsp; To keep this a bit organized, the configuration for the bind9 server has been broken up into functional sections.&nbsp; Below is a listing of the file/folder structure along with a brief explanation of its purpose.</p>\r\n<p id=\"bkmrk-bind9-configuration-\">BIND9 CONFIGURATION Overview</p>\r\n<ul id=\"bkmrk-configuration-files-\">\r\n<li class=\"null\">Configuration Files\r\n<ul>\r\n<li class=\"null\">/etc/bind/named.conf&nbsp; &nbsp;- Contains \"includes\" for the segmented out \"named.conf\" files.</li>\r\n<li class=\"null\">/etc/bind/named.conf.options&nbsp; - Contains the bind9 options that make it a recursive DNS server.&nbsp; This file also specifies the IPs the server listens on.</li>\r\n<li class=\"null\">/etc/bind/named.conf.default-zones - This is a default zone created by bind9, it has been unmodified.</li>\r\n<li class=\"null\">/etc/bind/named.conf.OPFOR - This contains the domain references for all OPFOR DNS entries.&nbsp; For the most part entries here are managed via scripts on the RootDNS server&nbsp; and NRTS servers.</li>\r\n<li class=\"null\">/etc/bind/named.conf.RANGE - This contains the domain references for all DNS needed by the ServicesNet systems and target domains, with the exception of the traffic-gen and traffic-webhost servers</li>\r\n<li class=\"null\">/etc/bind/named.conf.TRAFFIC - This contains the domain references for all traffic gen systems.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">FOLDERS\r\n<ul>\r\n<li class=\"null\">/etc/bind/OPFOR - Stores all domain zones files for all the referenced domains in the named.conf.OPFOR config file.</li>\r\n<li class=\"null\">/etc/bind/RANGE - Stores all domain zone files for all referenced domains in the named.conf.RANGE config file.</li>\r\n<li class=\"null\">/etc/bind/TRAFFIC - Stores all domain zone files for all the referenced domains in the named.conf.TRAFFIC config file.</li>\r\n<li class=\"null\">/etc/bind/blackhole - This contains two files.\r\n<ul>\r\n<li class=\"null\">db.blackhole - this is a zone file that points to 127.0.0.1</li>\r\n<li class=\"null\">Rangism.zone - this is a conf file that references several domains and pointing them all to the db.blackhole.&nbsp; This is used to capture various auto generated OS and application DNS requests for real world systems that can\'t be reached or replicated in this environment.&nbsp; Things like updateapi.google.com, etc.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-dns-automation-overv\">DNS AUTOMATION Overview</p>\r\n<p id=\"bkmrk-the-root-dns-server-\">The root DNS server has some automation built in to automate OPFOR DNS registration.&nbsp; The scripts and path for adding/removing OPFOR DNS entries are listed below along with an explanation of their functionality.</p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fadd-re\">\r\n<li class=\"null\">/root/scripts/add-REDTEAM-DNS.sh\r\n<ul>\r\n<li class=\"null\">This script will create a PID lock when it\'s executed to prevent the script from running more than one instance.&nbsp; If this was ran concurrently, it would likely result in a corruption of the bind configuration.&nbsp; The way it works is the DNS registration section of the NRTS server\'s /root/scripts/buildredteam.sh script will SCP a dns file containing domain names and IPs using an SSH key, then remotely run the add-REDTEAM-DNS.sh script and feed it the dns file as an argument.&nbsp; The script will take this list, check if the domain already exists in any of the zone file locations, aka, RANGE, OPFOR, and TRAFFIC zone file folders.&nbsp; If it exists in the RANGE or TRAFFIC folder, it will skip that DNS registration request, if it exists in the OPFOR folder, it will assume the user wants to update the record and process it.&nbsp; It then creates a zone file for each domain, addd it to the OPFOR directory and created a copy of the named.conf.OPFOR config file and append the zone reference in the copy if the reference didn\'t already exist.&nbsp; It will then run a named-check-conf against the copy, if this passed, it will replace the named.conf.OPFOR with the copy smf restart the bind9 service to read in the new configurations.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/delete-REDTEAM-DNS.sh\r\n<ul>\r\n<li class=\"null\">This script will remove DNS records from the OPFOR directory as well as remove the zone file references from the named.conf.OPFOR config file.&nbsp; The way this works is when the add-REDTEAM-DNS.sh script runs and originally added the OPFOR DNS, it will tag the zone file as well as add tags to the section in the named.conf.OPFOR file.&nbsp; This tag is a user added value that is entered when the user requests DNS registration from an NRTS server.&nbsp; On the NRTS there is a script for managing DNS at /root/scripts/ManageDNS.sh.&nbsp; This script will connect to the rootDNS server and get a list of all OPFOR DNS organized by tags.&nbsp; A user can select OPFOR DNS entries to be removed by selecting its tag.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/makednsfile.sh\r\n<ul>\r\n<li class=\"null\">This script will generate a DNS file to feed to add-REDTEAM-DNS.sh.&nbsp; It\'s for when a user elects randomly generated domains.&nbsp; In this case the NRTS will send a list of IPs to the rootDNS server and this script will randomly select available domains from the masterdomainlist.txt file and pair one it to each of the IP in the list.&nbsp; When it selects a domain from the masterdomainlist, it will edit that domain by adding a \"#\" to the front of the domain to prevent it from being reused.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/masterdomainlist.txt\r\n<ul>\r\n<li class=\"null\">This is a file that contains roughly 11000 domain names.&nbsp; This list was generated by scrapping a website that listed expired domain names.&nbsp; The goal here is to have a large pool of domains that aren\'t owned in the real world.&nbsp; The concept here is that these domains would be available to be purchased by an adversary.&nbsp; It wouldn\'t make sense for an adversary to be able to use www.microsoft.com for their C2.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/resetmasterdomainlist.sh\r\n<ul>\r\n<li class=\"null\">This script will remove and \"#\" from the front of any domain names in the list.&nbsp; This is for when you\'ve deleted out all red team DNS and want to make all previously used domains from the list available again.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">NOTE: the other half of DNS automation references on the NRTS, /root/scripts/buildredteam.sh, /root/scripts/ManageDNS.sh and /root/scripts/RegisterDNS.sh are explained on the NRTS overview.</li>\r\n</ul>\r\n<p id=\"bkmrk-how-to-manually-add-\">HOW TO MANUALLY ADD DNS</p>\r\n<ul id=\"bkmrk-to-add-new-target-do\">\r\n<li class=\"null\">To add new target domain records, you will need to create a zone file in the /etc/bind/RANGE and modify the /etc/bind/named.conf.RANGE file to add the reference.&nbsp; There is an example zone file in the /etc/bind/RANGE directory to use as a reference called db.example.com.&nbsp; Then, to add the reference in the named.conf.RANGE file, simply follow the syntax used for other zone files.</li>\r\n<li class=\"null\">Once you have created the zone file and added the reference, you need to run \"service bind9 restart\" to read in the new domain.&nbsp; However, before doing this it\'s a good idea to check your syntax first.&nbsp; To test your zone file run\r\n<ul>\r\n<li class=\"null\">named-checkzone mydomain.com /etc/bind/RANGE/db.mydomain.com&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;- replace \"mydomain.com\" with your domain.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Then to check if you messed up adding the reference run.\r\n<ul>\r\n<li class=\"null\">named-checkconfig /etc/bind/named.conf.RANGE</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If either errors, check your syntax, make corrections and try again.&nbsp; Once they both pass run \"service bind9 restart\"</li>\r\n<li class=\"null\">To add DNS manually in either TRAFFIC or OPFOR, follow the same steps, just make sure you are adding the zone file to the correct directory and you are modifying the correct \"named.conf.xxxx\" file.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\" style=\"padding-left: 40px;\"></p>\r\n<p id=\"bkmrk-%C2%A0-1\" style=\"padding-left: 40px;\"></p>','The RootDNS server is built on Ubuntu 22.01 and runs a recursive bind9 server.  To simulate real world DNS, the server is configured with the following IP addresses;\r\n\r\n8.8.8.8 - simulated Googles recursive DNS server\r\n198.41.0.4 - simulates the real world A-root server\r\n192.228.79.59 - simulates the real world B-root server\r\n192.33.4.12- simulates the real world C-root server\r\n128.8.10.90- simulates the real world D-root server\r\n192.203.230.10- simulates the real world E-root server\r\n195.5.5.241- simulates the real world F-root server\r\n192.112.36.4- simulates the real world G-root server\r\n128.63.2.53- simulates the real world H-root server\r\n192.36.148.17- simulates the real world I-root server\r\n192.58.128.30- simulates the real world J-root server\r\n193.0.15.129- simulates the real world K-root server\r\n199.7.83.42- simulates the real world L-root server\r\n202.12.27.33- simulates the real world M-root server\r\n\r\nThe RootDNS server in the Cyber Range handles all \"grayspace\" DNS.  To keep this a bit organized, the configuration for the bind9 server has been broken up into functional sections.  Below is a listing of the file/folder structure along with a brief explanation of its purpose.\r\nBIND9 CONFIGURATION Overview\r\n\r\nConfiguration Files\r\n\r\n/etc/bind/named.conf   - Contains \"includes\" for the segmented out \"named.conf\" files.\r\n/etc/bind/named.conf.options  - Contains the bind9 options that make it a recursive DNS server.  This file also specifies the IPs the server listens on.\r\n/etc/bind/named.conf.default-zones - This is a default zone created by bind9, it has been unmodified.\r\n/etc/bind/named.conf.OPFOR - This contains the domain references for all OPFOR DNS entries.  For the most part entries here are managed via scripts on the RootDNS server  and NRTS servers.\r\n/etc/bind/named.conf.RANGE - This contains the domain references for all DNS needed by the ServicesNet systems and target domains, with the exception of the traffic-gen and traffic-webhost servers\r\n/etc/bind/named.conf.TRAFFIC - This contains the domain references for all traffic gen systems.\r\n\r\n\r\nFOLDERS\r\n\r\n/etc/bind/OPFOR - Stores all domain zones files for all the referenced domains in the named.conf.OPFOR config file.\r\n/etc/bind/RANGE - Stores all domain zone files for all referenced domains in the named.conf.RANGE config file.\r\n/etc/bind/TRAFFIC - Stores all domain zone files for all the referenced domains in the named.conf.TRAFFIC config file.\r\n/etc/bind/blackhole - This contains two files.\r\n\r\ndb.blackhole - this is a zone file that points to 127.0.0.1\r\nRangism.zone - this is a conf file that references several domains and pointing them all to the db.blackhole.  This is used to capture various auto generated OS and application DNS requests for real world systems that can\'t be reached or replicated in this environment.  Things like updateapi.google.com, etc.\r\n\r\n\r\n\r\n\r\n\r\nDNS AUTOMATION Overview\r\nThe root DNS server has some automation built in to automate OPFOR DNS registration.  The scripts and path for adding/removing OPFOR DNS entries are listed below along with an explanation of their functionality.\r\n\r\n/root/scripts/add-REDTEAM-DNS.sh\r\n\r\nThis script will create a PID lock when it\'s executed to prevent the script from running more than one instance.  If this was ran concurrently, it would likely result in a corruption of the bind configuration.  The way it works is the DNS registration section of the NRTS server\'s /root/scripts/buildredteam.sh script will SCP a dns file containing domain names and IPs using an SSH key, then remotely run the add-REDTEAM-DNS.sh script and feed it the dns file as an argument.  The script will take this list, check if the domain already exists in any of the zone file locations, aka, RANGE, OPFOR, and TRAFFIC zone file folders.  If it exists in the RANGE or TRAFFIC folder, it will skip that DNS registration request, if it exists in the OPFOR folder, it will assume the user wants to update the record and process it.  It then creates a zone file for each domain, addd it to the OPFOR directory and created a copy of the named.conf.OPFOR config file and append the zone reference in the copy if the reference didn\'t already exist.  It will then run a named-check-conf against the copy, if this passed, it will replace the named.conf.OPFOR with the copy smf restart the bind9 service to read in the new configurations.\r\n\r\n\r\n/root/scripts/delete-REDTEAM-DNS.sh\r\n\r\nThis script will remove DNS records from the OPFOR directory as well as remove the zone file references from the named.conf.OPFOR config file.  The way this works is when the add-REDTEAM-DNS.sh script runs and originally added the OPFOR DNS, it will tag the zone file as well as add tags to the section in the named.conf.OPFOR file.  This tag is a user added value that is entered when the user requests DNS registration from an NRTS server.  On the NRTS there is a script for managing DNS at /root/scripts/ManageDNS.sh.  This script will connect to the rootDNS server and get a list of all OPFOR DNS organized by tags.  A user can select OPFOR DNS entries to be removed by selecting its tag.\r\n\r\n\r\n/root/scripts/autoredirector/makednsfile.sh\r\n\r\nThis script will generate a DNS file to feed to add-REDTEAM-DNS.sh.  It\'s for when a user elects randomly generated domains.  In this case the NRTS will send a list of IPs to the rootDNS server and this script will randomly select available domains from the masterdomainlist.txt file and pair one it to each of the IP in the list.  When it selects a domain from the masterdomainlist, it will edit that domain by adding a \"#\" to the front of the domain to prevent it from being reused.\r\n\r\n\r\n/root/scripts/autoredirector/masterdomainlist.txt\r\n\r\nThis is a file that contains roughly 11000 domain names.  This list was generated by scrapping a website that listed expired domain names.  The goal here is to have a large pool of domains that aren\'t owned in the real world.  The concept here is that these domains would be available to be purchased by an adversary.  It wouldn\'t make sense for an adversary to be able to use www.microsoft.com for their C2.\r\n\r\n\r\n/root/scripts/autoredirector/resetmasterdomainlist.sh\r\n\r\nThis script will remove and \"#\" from the front of any domain names in the list.  This is for when you\'ve deleted out all red team DNS and want to make all previously used domains from the list available again.\r\n\r\n\r\nNOTE: the other half of DNS automation references on the NRTS, /root/scripts/buildredteam.sh, /root/scripts/ManageDNS.sh and /root/scripts/RegisterDNS.sh are explained on the NRTS overview.\r\n\r\nHOW TO MANUALLY ADD DNS\r\n\r\nTo add new target domain records, you will need to create a zone file in the /etc/bind/RANGE and modify the /etc/bind/named.conf.RANGE file to add the reference.  There is an example zone file in the /etc/bind/RANGE directory to use as a reference called db.example.com.  Then, to add the reference in the named.conf.RANGE file, simply follow the syntax used for other zone files.\r\nOnce you have created the zone file and added the reference, you need to run \"service bind9 restart\" to read in the new domain.  However, before doing this it\'s a good idea to check your syntax first.  To test your zone file run\r\n\r\nnamed-checkzone mydomain.com /etc/bind/RANGE/db.mydomain.com         <- replace \"mydomain.com\" with your domain.\r\n\r\n\r\nThen to check if you messed up adding the reference run.\r\n\r\nnamed-checkconfig /etc/bind/named.conf.RANGE\r\n\r\n\r\nIf either errors, check your syntax, make corrections and try again.  Once they both pass run \"service bind9 restart\"\r\nTo add DNS manually in either TRAFFIC or OPFOR, follow the same steps, just make sure you are adding the zone file to the correct directory and you are modifying the correct \"named.conf.xxxx\" file.\r\n\r\n\r\n',1,'2023-04-03 16:44:56','2023-04-03 16:44:56','rootdns','cyber-range-systems-overview','version','','',3),(41,6,'CA-Server','<p id=\"bkmrk-the-ca-server-is-bui\">The CA server is build on Ubuntu 22.01 and uses openSSL to create a Certificate Authority and intermediate Certificate Authority for signing SSL certs.&nbsp; The CA and intermediate certs have already been created using the domain of globalcerts.com.&nbsp; To create new SSL certs or to sign binaries, you can use scripts that exist on this server.&nbsp; The NRTS will also use these scripts automatically to sign SSL certs for the redirectors and payload hosts services it builds.&nbsp; More on that is explained in the NRTS server overview.&nbsp; That said, if you want do generate these manually, below is an overview of scripts on the CA-server.</p>\r\n<ul id=\"bkmrk-%2Froot%2Fcertmaker.sh-t\">\r\n<li class=\"null\">/root/certmaker.sh\r\n<ul>\r\n<li class=\"null\">This is used to create HTTPS SSL certs.&nbsp; The script has a help menu that is pretty self explanatory.&nbsp; below is the help menu that lists the various flags.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p style=\"padding-left: 40px;\" id=\"bkmrk-required-flags%C2%A0-%C2%A0-%C2%A0-\">REQUIRED Flags<br>&nbsp; &nbsp; &nbsp; &nbsp; -d or --domain FQDN, &nbsp;ex. -d www.example.com<br>OPTIONAL Flags - random values will be used if not set<br>&nbsp; &nbsp; &nbsp; &nbsp; -r or --random, this will randomize Country, City, State, and organization info<br>&nbsp; &nbsp; &nbsp; &nbsp; -q or --quiet, will built the certs without showing settings and asking for confirmation<br>&nbsp; &nbsp; &nbsp; &nbsp; -C or --country 2LetterAbbrv, ex. -C US<br>&nbsp; &nbsp; &nbsp; &nbsp; -ST or --state &nbsp;State, ex -ST \'New York\' NOTE: single quotes need if spaces<br>&nbsp; &nbsp; &nbsp; &nbsp; -L or --locality, ex -L \'New York City\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -O or --organization, ex -O \'example LTD\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -CN or --commonname, ex -CN \'www.example.com\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -A or --alias, ex -A \'example-server\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS1 or --SAN1 &nbsp;Subject Alt Name 1<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS2 or --SAN2 &nbsp;Subject Alt Name 2<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS3 or --SAN3 &nbsp;Subject Alt Name 3<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS4 or --SAN4 &nbsp;Subject Alt Name 4<br></p>\r\n<ul id=\"bkmrk-below-is-an-example-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is an example for created a cert for humanzoo.com\r\n<ul>\r\n<li class=\"null\">./certmaker.sh -d humanzoo.com -C US -ST NY -L \'New York City\' -O \'Human Zoo foundation\' -CN humanzoo.com -A humanzoo -DNS1 <a href=\"https://www.humanzoo.com\">www.humanzoo.com</a> -DNS2 login.humanzoo.com</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/codesigncertmaker.sh</li>\r\n<li class=\"null\">/root/cs_codesigncertmaker.sh</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>','The CA server is build on Ubuntu 22.01 and uses openSSL to create a Certificate Authority and intermediate Certificate Authority for signing SSL certs.  The CA and intermediate certs have already been created using the domain of globalcerts.com.  To create new SSL certs or to sign binaries, you can use scripts that exist on this server.  The NRTS will also use these scripts automatically to sign SSL certs for the redirectors and payload hosts services it builds.  More on that is explained in the NRTS server overview.  That said, if you want do generate these manually, below is an overview of scripts on the CA-server.\r\n\r\n/root/certmaker.sh\r\n\r\nThis is used to create HTTPS SSL certs.  The script has a help menu that is pretty self explanatory.  below is the help menu that lists the various flags.\r\n\r\n\r\n\r\nREQUIRED Flags        -d or --domain FQDN,  ex. -d www.example.comOPTIONAL Flags - random values will be used if not set        -r or --random, this will randomize Country, City, State, and organization info        -q or --quiet, will built the certs without showing settings and asking for confirmation        -C or --country 2LetterAbbrv, ex. -C US        -ST or --state  State, ex -ST \'New York\' NOTE: single quotes need if spaces        -L or --locality, ex -L \'New York City\'        -O or --organization, ex -O \'example LTD\'        -CN or --commonname, ex -CN \'www.example.com\'        -A or --alias, ex -A \'example-server\'        -DNS1 or --SAN1  Subject Alt Name 1        -DNS2 or --SAN2  Subject Alt Name 2        -DNS3 or --SAN3  Subject Alt Name 3        -DNS4 or --SAN4  Subject Alt Name 4\r\n\r\n\r\n\r\nBelow is an example for created a cert for humanzoo.com\r\n\r\n./certmaker.sh -d humanzoo.com -C US -ST NY -L \'New York City\' -O \'Human Zoo foundation\' -CN humanzoo.com -A humanzoo -DNS1 www.humanzoo.com -DNS2 login.humanzoo.com\r\n\r\n\r\n\r\n\r\n/root/codesigncertmaker.sh\r\n/root/cs_codesigncertmaker.sh\r\n\r\n',1,'2023-04-03 16:55:17','2023-04-03 16:55:17','ca-server','cyber-range-systems-overview','version','','',3),(43,7,'Traffic-Gen','<p id=\"bkmrk-the-traffic-gen-serv\">The Traffic-gen server was build on Ubuntu 22.01 and uses a customized docker container that will use Postfix and mutt to send emails to a given list of users.&nbsp; The email context was pulled using the Enron data dump.&nbsp; About 20 years ago, the FCC forced Enron to make it\'s corporate emails public.&nbsp; Since then several projects have organized these emails into databases.&nbsp; It\'s a decent source for pulling out human readable \"subject\" and \"body\" content.&nbsp; The container will use a script that will randomly pull subject and email body content from a CSV file, then randomly select a email address from the user provide list and send an email.&nbsp; The functionality of this is very customization.&nbsp; Here is an overview of how this server is used to generate email traffic.</p>\r\n<p id=\"bkmrk-file-structure\">FILE STRUCTURE</p>\r\n<ul id=\"bkmrk-%2Froot%2Fbuildcompose.s\">\r\n<li class=\"null\">Email Traffic generation scripts\r\n<ul id=\"bkmrk-%C2%A0%2Froot%2Fbuildcompose.\">\r\n<li class=\"null\">&nbsp;/root/buildcompose.sh\r\n<ul id=\"bkmrk-this-script-will-mod\">\r\n<li class=\"null\">This script will modify the docker-compose file based on user input.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/killtrafficgen.sh\r\n<ul id=\"bkmrk-simple-script-that-i\">\r\n<li class=\"null\">Simple script that is basically \"docker-compose up -d\"</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/starttrafficgen.sh\r\n<ul id=\"bkmrk-simple-script-that-i-1\">\r\n<li class=\"null\">Simple script that is basically \"docker-compose down\"</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-folder-structure-of-\">Folder structure of the email traffic generator.&nbsp;&nbsp;</p>\r\n<ul id=\"bkmrk-%2Froot%2Femailerlist.tx\">\r\n<li class=\"null\">/root/emailerlist.txt\r\n<ul id=\"bkmrk-this-file-contains-t\">\r\n<li class=\"null\">This file contains the domains and IPs that will be used by the email traffic generator.&nbsp; This is read in by the build-compose file to configure a docker container for each one.&nbsp; Then each container will use the contents of the /root/TG folder for composing and sending emails.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">&nbsp;/root/TG\r\n<ul id=\"bkmrk-%2Froot%2Ftg%2Fcontent%2Fema\">\r\n<li class=\"null\">/root/TG/Content/EmailContent.csv\r\n<ul id=\"bkmrk-this-file-is-a-csv-o\">\r\n<li class=\"null\">This file is a CSV of subject, email body content.&nbsp; This content was extracted from publicly available databases of the Enron data mentioned earlier.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/RandomFiles/\r\n<ul id=\"bkmrk-this-directory-conta\">\r\n<li class=\"null\">This directory contains 108 random files of types .doc, .docx, .ppt, .pptx, .pdf, and .xlsx.&nbsp; These files are used as email attachments.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/SendTo/&lt;user defined dir&gt;/sendto.txt\r\n<ul id=\"bkmrk-the-sendto.txt-file-\">\r\n<li class=\"null\">The sendto.txt file should contain a list of email addresses that the traffic generator will send emails to.&nbsp; This is designed to support multiple target domains.&nbsp; The way this works is you create a folder for each target domain that you connect to the Cyber Range.&nbsp; This is the &lt;user defined dir&gt;.&nbsp; When you run the buildcompose.sh, it will first ask which of these directories should it build the docker-compose file for.&nbsp; For example, if I made a target domain called widgets.com, I would make a directory at /root/TG/SendTo/widgets.&nbsp; Then in that directory I would make a file called \"sendto.txt\" and fill it with email addresses for the users in the widget domain that I want the email traffic generator to send emails to.&nbsp; Always name the email list in the \"target domain\" folder as sendto.txt - this file name is hardcoded in the email sending script.<br></li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/Senders/senders.txt\r\n<ul id=\"bkmrk-this-file-contains-t-1\">\r\n<li class=\"null\">This file contains the \"from\" names in a firstname.lastname format.&nbsp; The email traffic generator will use this in combination with each containers domain from the emailerlist.txt to generate the \"from\" email address.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">&nbsp;/root/TG/Scripts/StartEmail.sh\r\n<ul id=\"bkmrk-this-is-the-entrypoi\">\r\n<li class=\"null\">This is the entrypoint script for the docker containers.&nbsp; It runs and endless loop that will send emails to the addresses in the \"sendto.txt\" file.&nbsp; This script is customizable where you can adjust the time interval between emails sent, add jitter to that time internal, set a max number of recipients, and set a max number of attachments.&nbsp; These settings can be modified two ways.&nbsp; First you can edit the script and change the default values set for these, or you could modify the docker-compose file and add the appropriate setting flags to the entrypoint script.&nbsp;</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TrafficLog\r\n<ul id=\"bkmrk-this-directory-is-wh\">\r\n<li class=\"null\">This directory is where each container will create a traffic log.&nbsp; The name of each log will be log_&lt;senderdomain&gt;.&nbsp; The log will track a count of emails sent by that container, the time, and who the email was sent to.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>','The Traffic-gen server was build on Ubuntu 22.01 and uses a customized docker container that will use Postfix and mutt to send emails to a given list of users.  The email context was pulled using the Enron data dump.  About 20 years ago, the FCC forced Enron to make it\'s corporate emails public.  Since then several projects have organized these emails into databases.  It\'s a decent source for pulling out human readable \"subject\" and \"body\" content.  The container will use a script that will randomly pull subject and email body content from a CSV file, then randomly select a email address from the user provide list and send an email.  The functionality of this is very customization.  Here is an overview of how this server is used to generate email traffic.\r\nFILE STRUCTURE\r\n\r\nEmail Traffic generation scripts\r\n\r\n /root/buildcompose.sh\r\n\r\nThis script will modify the docker-compose file based on user input.\r\n\r\n\r\n/root/killtrafficgen.sh\r\n\r\nSimple script that is basically \"docker-compose up -d\"\r\n\r\n\r\n/root/starttrafficgen.sh\r\n\r\nSimple script that is basically \"docker-compose down\"\r\n\r\n\r\n\r\n\r\n\r\nFolder structure of the email traffic generator.  \r\n\r\n/root/emailerlist.txt\r\n\r\nThis file contains the domains and IPs that will be used by the email traffic generator.  This is read in by the build-compose file to configure a docker container for each one.  Then each container will use the contents of the /root/TG folder for composing and sending emails.\r\n\r\n\r\n /root/TG\r\n\r\n/root/TG/Content/EmailContent.csv\r\n\r\nThis file is a CSV of subject, email body content.  This content was extracted from publicly available databases of the Enron data mentioned earlier.\r\n\r\n\r\n/root/TG/RandomFiles/\r\n\r\nThis directory contains 108 random files of types .doc, .docx, .ppt, .pptx, .pdf, and .xlsx.  These files are used as email attachments.\r\n\r\n\r\n/root/TG/SendTo/<user defined dir>/sendto.txt\r\n\r\nThe sendto.txt file should contain a list of email addresses that the traffic generator will send emails to.  This is designed to support multiple target domains.  The way this works is you create a folder for each target domain that you connect to the Cyber Range.  This is the <user defined dir>.  When you run the buildcompose.sh, it will first ask which of these directories should it build the docker-compose file for.  For example, if I made a target domain called widgets.com, I would make a directory at /root/TG/SendTo/widgets.  Then in that directory I would make a file called \"sendto.txt\" and fill it with email addresses for the users in the widget domain that I want the email traffic generator to send emails to.  Always name the email list in the \"target domain\" folder as sendto.txt - this file name is hardcoded in the email sending script.\r\n\r\n\r\n/root/TG/Senders/senders.txt\r\n\r\nThis file contains the \"from\" names in a firstname.lastname format.  The email traffic generator will use this in combination with each containers domain from the emailerlist.txt to generate the \"from\" email address.\r\n\r\n\r\n /root/TG/Scripts/StartEmail.sh\r\n\r\nThis is the entrypoint script for the docker containers.  It runs and endless loop that will send emails to the addresses in the \"sendto.txt\" file.  This script is customizable where you can adjust the time interval between emails sent, add jitter to that time internal, set a max number of recipients, and set a max number of attachments.  These settings can be modified two ways.  First you can edit the script and change the default values set for these, or you could modify the docker-compose file and add the appropriate setting flags to the entrypoint script. \r\n\r\n\r\n/root/TrafficLog\r\n\r\nThis directory is where each container will create a traffic log.  The name of each log will be log_<senderdomain>.  The log will track a count of emails sent by that container, the time, and who the email was sent to.\r\n\r\n\r\n\r\n\r\n',1,'2023-04-03 17:03:25','2023-04-03 17:03:25','traffic-gen','cyber-range-systems-overview','version','','',3),(45,2,'Network Diagram','<div drawio-diagram=\"14\" id=\"bkmrk-\" contenteditable=\"false\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-04/drawing-1-1680524511.png\"></div>','',1,'2023-04-03 17:21:54','2023-04-03 17:21:54','network-diagram','network-overview','version','','',3),(47,2,'Network Diagram','<div drawio-diagram=\"15\" id=\"bkmrk-\" contenteditable=\"false\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-04/drawing-1-1680524770.png\"></div>','',1,'2023-04-03 17:26:13','2023-04-03 17:26:13','network-diagram','network-overview','version','','',4),(48,11,'Proxy All the things','','',1,'2023-04-03 19:54:51','2023-04-03 19:54:51','proxy-all-the-things','how-to-guides','version','','Initial publish',1),(50,11,'Proxy All the things','<p id=\"bkmrk-note%3A-the-proxy-is-a\">NOTE: The proxy is at http://172.30.0.2:9999</p>\r\n<h3 id=\"bkmrk-setting-up-docker-in\">Setting up Docker in linux</h3>\r\n<ul id=\"bkmrk-add-folder-for-the-d\">\r\n<li class=\"null\">Add folder for the docker service if it doesn\'t exist and add a proxy conf file&nbsp; &nbsp; &nbsp;&nbsp; <br></li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Fetc%2Fsystemd%2Fsyst\"><code class=\"language-bash\">cd /etc/systemd/system\r\nmkdir docker.service.d\r\ncd docker.service.d\r\nvi http-proxy.conf</code></pre>\r\n<ul id=\"bkmrk-put-the-following-in\">\r\n<li class=\"null\">Put the following in the http-proxy.conf</li>\r\n</ul>\r\n<pre id=\"bkmrk-%5Bservice%5D-environmen\"><code class=\"language-bash\">[Service]\r\nEnvironment=\"HTTP_PROXY=http://172.30.0.2:9999\"\r\nEnvironment=\"HTTPS_PROXY=http://172.30.0.2:9999\"</code></pre>\r\n<ul id=\"bkmrk-lastly%2C-reload-daemo\">\r\n<li class=\"null\">Lastly, reload daemon and restart the docker service<br></li>\r\n</ul>\r\n<pre id=\"bkmrk-systemctl-daemon-rel\"><code class=\"language-\">systemctl daemon-reload\r\nsystemctl restart docker</code></pre>\r\n<h4 id=\"bkmrk-adding-proxy-to-a-do\">Adding Proxy to a Dockerfile</h4>\r\n<ul id=\"bkmrk-edit-your-dockerfile\">\r\n<li class=\"null\">edit your dockerfile in your favorite linux text editor and add these variables.</li>\r\n</ul>\r\n<pre id=\"bkmrk-env-http_proxy-http%3A\"><code class=\"language-\">ENV http_proxy http://172.30.0.2:9999\r\nENV https_proxy http://172.30.0.2:9999</code></pre>\r\n<h3 id=\"bkmrk-add-proxy-to-apt\">Add Proxy to Apt</h3>\r\n<ul id=\"bkmrk-go-to-the-apt.conf.d\">\r\n<li class=\"null\">Go to the apt.conf.d directory and create a proxy.conf file</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Fetc%2Fapt%2Fapt.conf\"><code class=\"language-bash\">cd /etc/apt/apt.conf.d\r\nvi proxy.conf</code></pre>\r\n<ul id=\"bkmrk-put-the-following-in-1\">\r\n<li class=\"null\">Put the following in the proxy.conf file</li>\r\n</ul>\r\n<pre id=\"bkmrk-acquire%3A%3Ahttp%3A%3Aproxy\"><code class=\"language-\">Acquire::http::Proxy \"http://172.30.0.2:9999\";\r\nAcquire::https::Proxy \"http://172.30.0.2:9999\";</code></pre>\r\n<h3 id=\"bkmrk-add-proxy-for-wget\">Add proxy for wget</h3>\r\n<ul id=\"bkmrk-edit-the-%2Fetc%2Fwgetrc\">\r\n<li class=\"null\">Edit the /etc/wgetrc file.&nbsp; Find the lines \"use_proxy\", \"http_proxy\", and \"https_proxy\" and edit them to match the following.</li>\r\n</ul>\r\n<pre id=\"bkmrk-use_proxy%3Dyes-http_p\"><code class=\"language-\">use_proxy=yes\r\nhttp_proxy=http://172.30.0.2:9999\r\nhttps_proxy=http://172.30.0.2:9999</code></pre>\r\n<h3 id=\"bkmrk-cobalt-strike-update\">Cobalt Strike Update script</h3>\r\n<ul id=\"bkmrk-in-order-to-run-the-\">\r\n<li class=\"null\">In order to run the update script for Cobalt Strike, you need to modify the \"update\" script to add proxy information in to the java command.&nbsp; Below is the additional flags you need to add.</li>\r\n</ul>\r\n<pre id=\"bkmrk-java--dhttp.proxyhos\"><code class=\"language-\">java -Dhttp.proxyHost=172.30.0.2 -Dhttp.proxyPort=9999 -Dhttps.proxyhost=172.30.0.2 -Dhttps.proxyPort=9999</code></pre>\r\n<h3 id=\"bkmrk-using-git-via-proxy\">Using git via proxy</h3>\r\n<ul id=\"bkmrk-git-can-use-your-env\">\r\n<li class=\"null\">git can use your environment variables to use a proxy, wget can to depending on the version of linux.&nbsp; To use git through the proxy, set the following environment variables with the following command.</li>\r\n</ul>\r\n<pre id=\"bkmrk-export-http_proxy%3Dht\"><code class=\"language-\">export http_proxy=http://172.30.0.2:9999\r\nexport https_proxy=http://172.30.0.2:9999</code></pre>\r\n<h3 id=\"bkmrk-pip3-install-via-pro\">PIP3 install via proxy</h3>\r\n<ul id=\"bkmrk-on-occasion-pip3-ins\">\r\n<li class=\"null\">On occasion pip3 installs on ubuntu runs into issues.&nbsp; The following has worked to resolve it.</li>\r\n</ul>\r\n<pre id=\"bkmrk-apt-remove---purge-p\"><code class=\"language-\">apt remove --purge python3-pip -y\r\nexport http_proxy=http://172.30.0.2:9999\r\nexport https_proxy=http://172.30.0.2:9999\r\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"install-pip2-ubuntu.py\"\r\npython3 install-pip3-ubuntu.py</code></pre>','NOTE: The proxy is at http://172.30.0.2:9999\r\nSetting up Docker in linux\r\n\r\nAdd folder for the docker service if it doesn\'t exist and add a proxy conf file       \r\n\r\ncd /etc/systemd/system\r\nmkdir docker.service.d\r\ncd docker.service.d\r\nvi http-proxy.conf\r\n\r\nPut the following in the http-proxy.conf\r\n\r\n[Service]\r\nEnvironment=\"HTTP_PROXY=http://172.30.0.2:9999\"\r\nEnvironment=\"HTTPS_PROXY=http://172.30.0.2:9999\"\r\n\r\nLastly, reload daemon and restart the docker service\r\n\r\nsystemctl daemon-reload\r\nsystemctl restart docker\r\nAdding Proxy to a Dockerfile\r\n\r\nedit your dockerfile in your favorite linux text editor and add these variables.\r\n\r\nENV http_proxy http://172.30.0.2:9999\r\nENV https_proxy http://172.30.0.2:9999\r\nAdd Proxy to Apt\r\n\r\nGo to the apt.conf.d directory and create a proxy.conf file\r\n\r\ncd /etc/apt/apt.conf.d\r\nvi proxy.conf\r\n\r\nPut the following in the proxy.conf file\r\n\r\nAcquire::http::Proxy \"http://172.30.0.2:9999\";\r\nAcquire::https::Proxy \"http://172.30.0.2:9999\";\r\nAdd proxy for wget\r\n\r\nEdit the /etc/wgetrc file.  Find the lines \"use_proxy\", \"http_proxy\", and \"https_proxy\" and edit them to match the following.\r\n\r\nuse_proxy=yes\r\nhttp_proxy=http://172.30.0.2:9999\r\nhttps_proxy=http://172.30.0.2:9999\r\nCobalt Strike Update script\r\n\r\nIn order to run the update script for Cobalt Strike, you need to modify the \"update\" script to add proxy information in to the java command.  Below is the additional flags you need to add.\r\n\r\njava -Dhttp.proxyHost=172.30.0.2 -Dhttp.proxyPort=9999 -Dhttps.proxyhost=172.30.0.2 -Dhttps.proxyPort=9999\r\nUsing git via proxy\r\n\r\ngit can use your environment variables to use a proxy, wget can to depending on the version of linux.  To use git through the proxy, set the following environment variables with the following command.\r\n\r\nexport http_proxy=http://172.30.0.2:9999\r\nexport https_proxy=http://172.30.0.2:9999\r\nPIP3 install via proxy\r\n\r\nOn occasion pip3 installs on ubuntu runs into issues.  The following has worked to resolve it.\r\n\r\napt remove --purge python3-pip -y\r\nexport http_proxy=http://172.30.0.2:9999\r\nexport https_proxy=http://172.30.0.2:9999\r\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"install-pip2-ubuntu.py\"\r\npython3 install-pip3-ubuntu.py',1,'2023-04-03 20:15:24','2023-04-03 20:15:24','proxy-all-the-things','how-to-guides','version','','',2),(51,12,'Code Signing Certificates for Binaries','<p id=\"bkmrk-using-the-ca-server-\">Using the CA-server to sign binaries.</p>\r\n<ul id=\"bkmrk-ssh-into-globalcerts\">\r\n<li class=\"null\">SSH into globalcerts.com.&nbsp;&nbsp; Creds: root&nbsp; password: toor</li>\r\n<li class=\"null\">\r\n</ul>','Using the CA-server to sign binaries.\r\n\r\nSSH into globalcerts.com.   Creds: root  password: toor\r\n\r\n',1,'2023-04-03 20:18:59','2023-04-03 20:18:59','code-signing-certificates-for-binaries','how-to-guides','version','','Initial publish',1),(52,13,'Using the NRTS server','<p id=\"bkmrk-the-not-red-team-ser\">The Not Red Team Server (NRTS) is the swiss army knife for building red team infrastructure.&nbsp;&nbsp; This guide will provide step by step instructions for using it\'s key features.</p>\r\n<h3 id=\"bkmrk-script-generated-cob\">Script generated Cobalt Strike Profiles</h3>\r\n<ul id=\"bkmrk-there-are-two-differ\">\r\n<li class=\"null\">There are two different solutions installed on the NRTS by default.&nbsp; These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.&nbsp; You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.&nbsp; One of the more common issues I\'ve seen is very slow transfer rates, there is something in the profile that can make exfilling large files down right painful.&nbsp; After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.&nbsp; Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.&nbsp; So I would also advice testing this on your test target as well.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-c2concealer\">Using C2concealer</h4>\r\n<ul id=\"bkmrk-note%3A-c2concealer-is\">\r\n<li class=\"null\">NOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.</li>\r\n<li class=\"null\">There are two arguments that C2concealer excepts; --variants and --hostname.&nbsp; The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.&nbsp; I believe the max number of variants is 10, but I\'d advise setting this to 0.&nbsp; The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.&nbsp; c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.&nbsp; Below is a usage example.</li>\r\n</ul>\r\n<pre id=\"bkmrk-c2concealer---varian\"><code class=\"language-\">C2concealer --variants 0 --hostname humanzoo.com</code></pre>\r\n<p id=\"bkmrk-the-script-will-ask-\">The script will ask for an SSL option, these options are</p>\r\n<ul id=\"bkmrk-self-signed-ssl-cert\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Self-signed SSL cert</li>\r\n<li class=\"null\">LetsEncrypt SSL cert</li>\r\n<li class=\"null\">Existing Keystore</li>\r\n<li class=\"null\">No SSL</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If you plan on using a redirector, you can select SSL, the NRTS build redirector will handle SSL certs for all the domains you use with it.&nbsp; If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a Keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.&nbsp; Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want in your engagement.&nbsp; The LetsEncrypt SSL cert will fail in this closed grayspace environment.</li>\r\n<li class=\"null\">Once you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;</li>\r\n</ul>\r\n<pre id=\"bkmrk-%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23\"><code class=\"language-\">############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################</code></pre>\r\n<ul id=\"bkmrk-it-saves-the-profile\">\r\n<li class=\"null\">It saves the profile with a randomly generated named.profile in the directory you ran C2concealer from.&nbsp; The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.&nbsp; This directory is /root/Profiles.&nbsp; Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.</li>\r\n</ul>\r\n<pre id=\"bkmrk-mv-ba3e5732.profile-\"><code class=\"language-\">mv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/</code></pre>\r\n<ul id=\"bkmrk-at-this-point-the-pr\">\r\n<li class=\"null\">At this point the profile is ready to use, when you go to set a teamserver on an NRTS, the script will see this profile and give you the option to select it.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-sourcepoint\">Using Sourcepoint</h4>\r\n<ul id=\"bkmrk-sourcepoint-isn%27t-ad\">\r\n<li class=\"null\">Sourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.</li>\r\n<li class=\"null\">Sourepoint has a larger number of arguments and gives you a lot more control.&nbsp; For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.</li>\r\n<li class=\"null\">Required Sourcepoint arguments.\r\n<ul>\r\n<li class=\"null\">-host&nbsp;&nbsp;\r\n<ul>\r\n<li class=\"null\">This is the host name it will add as a server varable in the profile</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Outfile\r\n<ul>\r\n<li class=\"null\">This is the name/path to save the profile as</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Injector\r\n<ul>\r\n<li class=\"null\">This is the process injection method, the script provides two options&nbsp;\r\n<ul>\r\n<li class=\"null\">VirtualAllocEx (Great for cross architecture i.e x86 -&gt; x64 and x64-&gt;x86)</li>\r\n<li class=\"null\">NtMapViewOfSection (A more stealthly option, however fails over to VirtualAllocEx)<br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example Usage</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fsourcepoint\"><code class=\"language-bash\">cd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx</code></pre>\r\n<ul id=\"bkmrk-output-will-look-lik\">\r\n<li class=\"null\">Output will look like.</li>\r\n</ul>\r\n<pre id=\"bkmrk-_____-____-_-__-%2F-__\"><code class=\"language-\">\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source</code></pre>\r\n<ul id=\"bkmrk-note%3A-the-profiles-g\">\r\n<li class=\"null\">NOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.&nbsp; So it\'s a good Idea to test these profiles before trying to use them.&nbsp; Below is how to test it on a NRTS.</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fcobaltstrik\"><code class=\"language-bash\">cd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile</code></pre>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','The Not Red Team Server (NRTS) is the swiss army knife for building red team infrastructure.   This guide will provide step by step instructions for using it\'s key features.\r\nScript generated Cobalt Strike Profiles\r\n\r\nThere are two different solutions installed on the NRTS by default.  These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.  You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.  One of the more common issues I\'ve seen is very slow transfer rates, there is something in the profile that can make exfilling large files down right painful.  After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.  Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.  So I would also advice testing this on your test target as well.\r\n\r\nUsing C2concealer\r\n\r\nNOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.\r\nThere are two arguments that C2concealer excepts; --variants and --hostname.  The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.  I believe the max number of variants is 10, but I\'d advise setting this to 0.  The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.  c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.  Below is a usage example.\r\n\r\nC2concealer --variants 0 --hostname humanzoo.com\r\nThe script will ask for an SSL option, these options are\r\n\r\n\r\n\r\nSelf-signed SSL cert\r\nLetsEncrypt SSL cert\r\nExisting Keystore\r\nNo SSL\r\n\r\n\r\nIf you plan on using a redirector, you can select SSL, the NRTS build redirector will handle SSL certs for all the domains you use with it.  If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a Keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.  Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want in your engagement.  The LetsEncrypt SSL cert will fail in this closed grayspace environment.\r\nOnce you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;\r\n\r\n############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################\r\n\r\nIt saves the profile with a randomly generated named.profile in the directory you ran C2concealer from.  The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.  This directory is /root/Profiles.  Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.\r\n\r\nmv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/\r\n\r\nAt this point the profile is ready to use, when you go to set a teamserver on an NRTS, the script will see this profile and give you the option to select it.\r\n\r\nUsing Sourcepoint\r\n\r\nSourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.\r\nSourepoint has a larger number of arguments and gives you a lot more control.  For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.\r\nRequired Sourcepoint arguments.\r\n\r\n-host  \r\n\r\nThis is the host name it will add as a server varable in the profile\r\n\r\n\r\n-Outfile\r\n\r\nThis is the name/path to save the profile as\r\n\r\n\r\n-Injector\r\n\r\nThis is the process injection method, the script provides two options \r\n\r\nVirtualAllocEx (Great for cross architecture i.e x86 -> x64 and x64->x86)\r\nNtMapViewOfSection (A more stealthly option, however fails over to VirtualAllocEx)\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample Usage\r\n\r\ncd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx\r\n\r\nOutput will look like.\r\n\r\n\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source\r\n\r\nNOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.  So it\'s a good Idea to test these profiles before trying to use them.  Below is how to test it on a NRTS.\r\n\r\ncd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile\r\n ',1,'2023-04-03 21:31:35','2023-04-03 21:31:35','using-the-nrts-server','how-to-guides','version','','Initial publish',1),(53,13,'Creating Cobalt Strike C2 Profiles','<h3 id=\"bkmrk-script-generated-cob\">Script generated Cobalt Strike Profiles</h3>\r\n<ul id=\"bkmrk-there-are-two-differ\">\r\n<li class=\"null\">There are two different solutions installed on the NRTS by default.&nbsp; These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.&nbsp; You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.&nbsp; One of the more common issues I\'ve seen is very slow transfer rates, there is something in the profile that can make exfilling large files down right painful.&nbsp; After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.&nbsp; Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.&nbsp; So I would also advice testing this on your test target as well.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-c2concealer\">Using C2concealer</h4>\r\n<ul id=\"bkmrk-note%3A-c2concealer-is\">\r\n<li class=\"null\">NOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.</li>\r\n<li class=\"null\">There are two arguments that C2concealer excepts; --variants and --hostname.&nbsp; The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.&nbsp; I believe the max number of variants is 10, but I\'d advise setting this to 0.&nbsp; The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.&nbsp; c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.&nbsp; Below is a usage example.</li>\r\n</ul>\r\n<pre id=\"bkmrk-c2concealer---varian\"><code class=\"language-\">C2concealer --variants 0 --hostname humanzoo.com</code></pre>\r\n<p id=\"bkmrk-the-script-will-ask-\">The script will ask for an SSL option, these options are</p>\r\n<ul id=\"bkmrk-self-signed-ssl-cert\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Self-signed SSL cert</li>\r\n<li class=\"null\">LetsEncrypt SSL cert</li>\r\n<li class=\"null\">Existing Keystore</li>\r\n<li class=\"null\">No SSL</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If you plan on using a redirector, you can select SSL, the NRTS build redirector will handle SSL certs for all the domains you use with it.&nbsp; If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a Keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.&nbsp; Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want in your engagement.&nbsp; The LetsEncrypt SSL cert will fail in this closed grayspace environment.</li>\r\n<li class=\"null\">Once you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;</li>\r\n</ul>\r\n<pre id=\"bkmrk-%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23\"><code class=\"language-\">############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################</code></pre>\r\n<ul id=\"bkmrk-it-saves-the-profile\">\r\n<li class=\"null\">It saves the profile with a randomly generated named.profile in the directory you ran C2concealer from.&nbsp; The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.&nbsp; This directory is /root/Profiles.&nbsp; Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.</li>\r\n</ul>\r\n<pre id=\"bkmrk-mv-ba3e5732.profile-\"><code class=\"language-\">mv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/</code></pre>\r\n<ul id=\"bkmrk-at-this-point-the-pr\">\r\n<li class=\"null\">At this point the profile is ready to use, when you go to set a teamserver on an NRTS, the script will see this profile and give you the option to select it.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-sourcepoint\">Using Sourcepoint</h4>\r\n<ul id=\"bkmrk-sourcepoint-isn%27t-ad\">\r\n<li class=\"null\">Sourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.</li>\r\n<li class=\"null\">Sourepoint has a larger number of arguments and gives you a lot more control.&nbsp; For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.</li>\r\n<li class=\"null\">Required Sourcepoint arguments.\r\n<ul>\r\n<li class=\"null\">-host&nbsp;&nbsp;\r\n<ul>\r\n<li class=\"null\">This is the host name it will add as a server varable in the profile</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Outfile\r\n<ul>\r\n<li class=\"null\">This is the name/path to save the profile as</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Injector\r\n<ul>\r\n<li class=\"null\">This is the process injection method, the script provides two options&nbsp;\r\n<ul>\r\n<li class=\"null\">VirtualAllocEx (Great for cross architecture i.e x86 -&gt; x64 and x64-&gt;x86)</li>\r\n<li class=\"null\">NtMapViewOfSection (A more stealthly option, however fails over to VirtualAllocEx)<br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example Usage</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fsourcepoint\"><code class=\"language-bash\">cd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx</code></pre>\r\n<ul id=\"bkmrk-output-will-look-lik\">\r\n<li class=\"null\">Output will look like.</li>\r\n</ul>\r\n<pre id=\"bkmrk-_____-____-_-__-%2F-__\"><code class=\"language-\">\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source</code></pre>\r\n<ul id=\"bkmrk-note%3A-the-profiles-g\">\r\n<li class=\"null\">NOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.&nbsp; So it\'s a good Idea to test these profiles before trying to use them.&nbsp; Below is how to test it on a NRTS.</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fcobaltstrik\"><code class=\"language-bash\">cd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile</code></pre>\r\n<p id=\"bkmrk-%C2%A0\"></p>','Script generated Cobalt Strike Profiles\r\n\r\nThere are two different solutions installed on the NRTS by default.  These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.  You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.  One of the more common issues I\'ve seen is very slow transfer rates, there is something in the profile that can make exfilling large files down right painful.  After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.  Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.  So I would also advice testing this on your test target as well.\r\n\r\nUsing C2concealer\r\n\r\nNOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.\r\nThere are two arguments that C2concealer excepts; --variants and --hostname.  The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.  I believe the max number of variants is 10, but I\'d advise setting this to 0.  The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.  c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.  Below is a usage example.\r\n\r\nC2concealer --variants 0 --hostname humanzoo.com\r\nThe script will ask for an SSL option, these options are\r\n\r\n\r\n\r\nSelf-signed SSL cert\r\nLetsEncrypt SSL cert\r\nExisting Keystore\r\nNo SSL\r\n\r\n\r\nIf you plan on using a redirector, you can select SSL, the NRTS build redirector will handle SSL certs for all the domains you use with it.  If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a Keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.  Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want in your engagement.  The LetsEncrypt SSL cert will fail in this closed grayspace environment.\r\nOnce you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;\r\n\r\n############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################\r\n\r\nIt saves the profile with a randomly generated named.profile in the directory you ran C2concealer from.  The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.  This directory is /root/Profiles.  Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.\r\n\r\nmv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/\r\n\r\nAt this point the profile is ready to use, when you go to set a teamserver on an NRTS, the script will see this profile and give you the option to select it.\r\n\r\nUsing Sourcepoint\r\n\r\nSourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.\r\nSourepoint has a larger number of arguments and gives you a lot more control.  For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.\r\nRequired Sourcepoint arguments.\r\n\r\n-host  \r\n\r\nThis is the host name it will add as a server varable in the profile\r\n\r\n\r\n-Outfile\r\n\r\nThis is the name/path to save the profile as\r\n\r\n\r\n-Injector\r\n\r\nThis is the process injection method, the script provides two options \r\n\r\nVirtualAllocEx (Great for cross architecture i.e x86 -> x64 and x64->x86)\r\nNtMapViewOfSection (A more stealthly option, however fails over to VirtualAllocEx)\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample Usage\r\n\r\ncd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx\r\n\r\nOutput will look like.\r\n\r\n\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source\r\n\r\nNOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.  So it\'s a good Idea to test these profiles before trying to use them.  Below is how to test it on a NRTS.\r\n\r\ncd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile\r\n',1,'2023-04-03 21:34:19','2023-04-03 21:34:19','creating-cobalt-strike-c2-profiles','using-the-nrts','version','','',2),(54,14,'Starting a Cobalt Strike Teamserver','','',1,'2023-04-03 21:36:18','2023-04-03 21:36:18','starting-a-cobalt-strike-teamserver','using-the-nrts','version','','Initial publish',1),(56,14,'Starting a Cobalt Strike Teamserver','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.&nbsp; This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.&nbsp; Doing so would create artifacts on any teamserver you build using the build script.&nbsp; That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.</p>\r\n<p id=\"bkmrk-also-this-guide-is-a\">Also this guide is assuming that you have already created a cobalt strike profile that you want to use, for this guide, it will use humanzoo.profile in it\'s examples.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example usage.</li>\r\n<li class=\"null\">\r\n<pre><code class=\"language-bash\">cd /root/scripts\r\n./buildredteam.sh</code></pre>\r\n</li>\r\n<li class=\"null\">This will pop up a text-based menu.&nbsp; At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, I\'ll leave it as the default.<br>\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/hGyimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hGyimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n<li class=\"null\">Next it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.&nbsp; Here you select what Geo-based IP you want to set up your teamserver with.&nbsp; For this example we\'ll use USA.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/N1Iimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/N1Iimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next%2C-it-will-drill-\">\r\n<li class=\"null\">Next, it will drill down further with a City location, some only have one option, but the USA one has several.&nbsp; For this example, we\'ll use Seattle.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/KZNimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/KZNimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want randomly generated IPs or to set one manually.&nbsp; The guide will walk through screenshots for both options.&nbsp; For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.&nbsp; For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.&nbsp; It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/uPMimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uPMimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-setting-ips---option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; Below is a screenshot of when you selected option 1.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vgRimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips---option-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; Then next few screenshots shows the manual IP process.&nbsp;&nbsp; Below is the menu when you selected option 2.&nbsp; At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0-%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0Ddimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-here-is-what-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Here is what option \"s\" looks like.&nbsp; This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP.&nbsp;</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/c2Fimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/c2Fimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-after-i%27ve-decided-w\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After I\'ve decided what subnet I want to use from the list above, I\'ll write it down or memorize it and then press \"q\" to exit out of the IP subnet view screen.&nbsp; From the list above for this example, I\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0-%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iWuimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-wh\">\r\n<li class=\"null\">Next, it will ask what profile you want to use.&nbsp; It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.&nbsp; For this example, we\'ll use the humanzoo2.profile.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/JHKimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JHKimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a password to use.&nbsp; For this we\'ll set the password to toor.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3ybimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point%2C-you%27v\">\r\n<li class=\"null\">At this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/JB2image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JB2image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-below-is-what-the-bu\">\r\n<li class=\"null\">Below is what the build process looks like.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/b00image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b00image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script exits and your Cobalt Strike teamserver should be up and running in a container.&nbsp; Information about the service is also placed in /root/services/TS1/ directory.&nbsp; To check your container, run docker ps, below is a screenshot of this.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/BAHimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/BAHimage.png\" alt=\"image.png\"></a></p>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.  This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.  Doing so would create artifacts on any teamserver you build using the build script.  That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.\r\nAlso this guide is assuming that you have already created a cobalt strike profile that you want to use, for this guide, it will use humanzoo.profile in it\'s examples.\r\n\r\nUse the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nExample usage.\r\n\r\ncd /root/scripts\r\n./buildredteam.sh\r\n\r\nThis will pop up a text-based menu.  At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"\r\n\r\n           \r\n\r\nNext it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, I\'ll leave it as the default.\r\n  \r\n\r\nNext it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.  Here you select what Geo-based IP you want to set up your teamserver with.  For this example we\'ll use USA.\r\n\r\n            \r\n\r\nNext, it will drill down further with a City location, some only have one option, but the USA one has several.  For this example, we\'ll use Seattle.\r\n\r\n              \r\n\r\nThen it will ask if you want randomly generated IPs or to set one manually.  The guide will walk through screenshots for both options.  For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.  For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.  It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.\r\n\r\n              \r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  Below is a screenshot of when you selected option 1.\r\n\r\n\r\n\r\n                    \r\n\r\n\r\n\r\nSetting IPs - Option 2 Set IPs manually.  Then next few screenshots shows the manual IP process.   Below is the menu when you selected option 2.  At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.\r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nHere is what option \"s\" looks like.  This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP. \r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nAfter I\'ve decided what subnet I want to use from the list above, I\'ll write it down or memorize it and then press \"q\" to exit out of the IP subnet view screen.  From the list above for this example, I\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet.\r\n\r\n\r\n\r\n                \r\n\r\nNext, it will ask what profile you want to use.  It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.  For this example, we\'ll use the humanzoo2.profile.\r\n\r\n           \r\n\r\nThen it will ask for a password to use.  For this we\'ll set the password to toor.\r\n\r\n            \r\n\r\nAt this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.\r\n\r\n           \r\n\r\nBelow is what the build process looks like.\r\n\r\n          \r\n\r\nAt this point the script exits and your Cobalt Strike teamserver should be up and running in a container.  Information about the service is also placed in /root/services/TS1/ directory.  To check your container, run docker ps, below is a screenshot of this.\r\n\r\n\r\n ',1,'2023-04-03 22:23:02','2023-04-03 22:23:02','starting-a-cobalt-strike-teamserver','using-the-nrts','version','','',2),(57,15,'Starting a HAProxy Redirector','','',1,'2023-04-03 22:23:22','2023-04-03 22:23:22','starting-a-haproxy-redirector','using-the-nrts','version','','Initial publish',1),(58,14,'Starting a Cobalt Strike Teamserver','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.&nbsp; This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.&nbsp; Doing so would create artifacts on any teamserver you build using the build script.&nbsp; That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.</p>\r\n<p id=\"bkmrk-also-this-guide-is-a\">Also this guide is assuming that you have already created a cobalt strike profile that you want to use, for this guide, it will use humanzoo.profile in it\'s examples.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example usage.</li>\r\n<li class=\"null\">\r\n<pre><code class=\"language-bash\">cd /root/scripts\r\n./buildredteam.sh</code></pre>\r\n</li>\r\n<li class=\"null\">This will pop up a text-based menu.&nbsp; At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, I\'ll leave it as the default.<br>\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/hGyimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hGyimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n<li class=\"null\">Next it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.&nbsp; Here you select what Geo-based IP you want to set up your teamserver with.&nbsp; For this example we\'ll use USA.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/N1Iimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/N1Iimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next%2C-it-will-drill-\">\r\n<li class=\"null\">Next, it will drill down further with a City location, some only have one option, but the USA one has several.&nbsp; For this example, we\'ll use Seattle.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/KZNimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/KZNimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want randomly generated IPs or to set one manually.&nbsp; The guide will walk through screenshots for both options.&nbsp; For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.&nbsp; For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.&nbsp; It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/uPMimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uPMimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-setting-ips---option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; Below is a screenshot of when you selected option 1.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vgRimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips---option-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; Then next few screenshots shows the manual IP process.&nbsp;&nbsp; Below is the menu when you selected option 2.&nbsp; At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0-%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0Ddimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-here-is-what-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Here is what option \"s\" looks like.&nbsp; This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP.&nbsp;</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/c2Fimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/c2Fimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-after-i%27ve-decided-w\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After I\'ve decided what subnet I want to use from the list above, I\'ll write it down or memorize it and then press \"q\" to exit out of the IP subnet view screen.&nbsp; From the list above for this example, I\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0-%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iWuimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-wh\">\r\n<li class=\"null\">Next, it will ask what profile you want to use.&nbsp; It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.&nbsp; For this example, we\'ll use the humanzoo2.profile.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/JHKimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JHKimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a password to use.&nbsp; For this we\'ll set the password to toor.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3ybimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point%2C-you%27v\">\r\n<li class=\"null\">At this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/JB2image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JB2image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-below-is-what-the-bu\">\r\n<li class=\"null\">Below is what the build process looks like.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/b00image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b00image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script exits and your Cobalt Strike teamserver should be up and running in a container.&nbsp; Information about the service is also placed in /root/services/TS1/ directory.&nbsp; To check your container, run docker ps, below is a screenshot of this.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/BAHimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/BAHimage.png\" alt=\"image.png\"></a></p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.  This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.  Doing so would create artifacts on any teamserver you build using the build script.  That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.\r\nAlso this guide is assuming that you have already created a cobalt strike profile that you want to use, for this guide, it will use humanzoo.profile in it\'s examples.\r\n\r\nUse the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nExample usage.\r\n\r\ncd /root/scripts\r\n./buildredteam.sh\r\n\r\nThis will pop up a text-based menu.  At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"\r\n\r\n           \r\n\r\nNext it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, I\'ll leave it as the default.\r\n  \r\n\r\nNext it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.  Here you select what Geo-based IP you want to set up your teamserver with.  For this example we\'ll use USA.\r\n\r\n            \r\n\r\nNext, it will drill down further with a City location, some only have one option, but the USA one has several.  For this example, we\'ll use Seattle.\r\n\r\n              \r\n\r\nThen it will ask if you want randomly generated IPs or to set one manually.  The guide will walk through screenshots for both options.  For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.  For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.  It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.\r\n\r\n              \r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  Below is a screenshot of when you selected option 1.\r\n\r\n\r\n\r\n                    \r\n\r\n\r\n\r\nSetting IPs - Option 2 Set IPs manually.  Then next few screenshots shows the manual IP process.   Below is the menu when you selected option 2.  At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.\r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nHere is what option \"s\" looks like.  This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP. \r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nAfter I\'ve decided what subnet I want to use from the list above, I\'ll write it down or memorize it and then press \"q\" to exit out of the IP subnet view screen.  From the list above for this example, I\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet.\r\n\r\n\r\n\r\n                \r\n\r\nNext, it will ask what profile you want to use.  It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.  For this example, we\'ll use the humanzoo2.profile.\r\n\r\n           \r\n\r\nThen it will ask for a password to use.  For this we\'ll set the password to toor.\r\n\r\n            \r\n\r\nAt this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.\r\n\r\n           \r\n\r\nBelow is what the build process looks like.\r\n\r\n          \r\n\r\nAt this point the script exits and your Cobalt Strike teamserver should be up and running in a container.  Information about the service is also placed in /root/services/TS1/ directory.  To check your container, run docker ps, below is a screenshot of this.\r\n\r\n\r\n',1,'2023-04-03 22:23:43','2023-04-03 22:23:43','starting-a-cobalt-strike-teamserver','using-the-nrts','version','','',3),(60,15,'Starting a HAProxy Redirector','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains doesn\'t match it will forward the traffic to a decoy website.</p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a HAProxy redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n</ul>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains doesn\'t match it will forward the traffic to a decoy website.\r\nNOTE: This guide is assuming you already have a Cobalt Strike team server running.  \r\nFor this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.\r\n\r\nUse the following script to start a HAProxy redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\n',1,'2023-04-03 22:27:44','2023-04-03 22:27:44','starting-a-haproxy-redirector','using-the-nrts','version','','',2),(62,15,'Starting a HAProxy Redirector','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains doesn\'t match it will forward the traffic to a decoy website.</p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a HAProxy redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a tag to used for identifying the service.&nbsp; This will also be the name of the directory the script will make for storing container files and will also be the name of the container.&nbsp; By default it will generate a RD1 name, this will increment if it already has one build, ie RD2, etc.&nbsp; For this example, we\'ll just use the default of RD1.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/59Fimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for the number of IPs, the script limits this to 20 for sanity reasons.&nbsp; For this example, we\'ll use 5.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/vq2image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vq2image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a Geo-location to pull IP address from.&nbsp; For this example we\'ll use the UK.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6itimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-will-ask-to-\">\r\n<li class=\"null\">Then it will ask to select a city, some have a few, but a lot only have one.&nbsp; For this example, we\'ll select London.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Ycfimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want to set IPs randomly or manually.&nbsp; This guide will walk through both processes.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/yTwimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips-%28random%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs (Random) Below is a screenshot when option 1 is selected from above (Set random IPs).&nbsp; Not much to see, it just goes on to the next option.&nbsp; The script will pull 5 random IPs from the geo-location based IP subnet file.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/9RIimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips-%28manual%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs (Manual) Below is the menu when you select manual IP selection.&nbsp; Here you can look at available subnets by entering \"s\".&nbsp; Then when you know what IP\'s you want to use, you will select a IP slot and enter the IP.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-using-the-%22s%22-option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Using the \"s\" option to see available subnets.&nbsp; This shows the available IP subnets based on the geo-location selections you made previously.&nbsp; The list is typically long, you can hit the spacebar to scroll down and press \"q\", when you want to exit out of the subnet view and go back to the menu.&nbsp; You can pick IPs from any of these subnets, so for this example, well us 12.9.80.129/25.&nbsp; Note you can pick IPs from other subnets from the list, you don\'t have to use just one subnet.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/Mc7image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Mc7image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-after-pressing-%22q%22-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.&nbsp; <br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/jRdimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jRdimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-once-you-enter-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu, but now you will see your entered IP, continue these steps until you\'ve added IPs for all empty slots.&nbsp; Note:&nbsp; If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-1\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/gjaimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/gjaimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either set IPs randomly or manually, below is the next menu screen.&nbsp; Here it asks for what ports to redirect.&nbsp; For this example, we\'ll select HTTP, HTTPS</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pYCimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-selected%2C-it-wi\">\r\n<li class=\"null\">Once selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.&nbsp; This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure it to do so.&nbsp; This part of the redirector will accommodate this if needed.&nbsp; However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.&nbsp; To accept the default just press enter.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/XMHimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-abo\">\r\n<li class=\"null\">Next it will ask about changing the bind port for http, again you can do this or just leave it as default.&nbsp; Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6goimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-wha\">\r\n<li class=\"null\">Next it will ask what IP the redirect should be redirecting to.&nbsp; This should be your Cobalt Strike Teamserver IP. &nbsp; For this example we will be using 54.88.220.10</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/hXTimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hXTimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-whi\">\r\n<li class=\"null\">Then it will ask which Cobalt Strike profile to use.&nbsp; This need to be the same as the profile used to start the Cobalt Strike teamserver.&nbsp; The script will use information from the profile to build out ACLs.&nbsp; These ACLs are used to identify C2 traffic from other things hitting a redirector domain.&nbsp; If you select the wrong profile, your C2 will not work.&nbsp; For this example we will use the humanzoo2.profile.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uJUimage.png\" alt=\"image.png\"><br></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains to if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.&nbsp; NOTE: this has to be a site that exist in the range and is reachable.&nbsp; If you put in a domain that isn\'t reachable, the HAProxy will stop working.&nbsp; The default is set to insureme.com, this is a site hosted on the webhost-traffic server.&nbsp; We\'ll leave the default for this example.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0XSimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to create manual domains or have them randomly generated.&nbsp; If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.&nbsp; This guide will walk through both options.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/pRdimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pRdimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-assigning-domains-%28o\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains (option 1 - use randomly generated one/s).&nbsp; If we select option 1, the script moves on to asking for a DNS tag.&nbsp; It will randomly generate domains at the end when it\'s building the redirector.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hfkimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assigning-domains-%28o-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains (Option2 - Manually create domain name/s).&nbsp; When you select option 2, you get the menu shown below.&nbsp; Here you pick an IP from the list it it will take you to a menu for entering a domain name for that IP.&nbsp; For this example will use option 1&nbsp; for IP 208.82.7.82</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pxYimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-you-selected-an\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you selected an IP to add a domain for, you get the menu shown below.&nbsp; I\'ll make a domain called goatfarmer.com for the IP of 208.82.7.82</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/cKAimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-press-enter-on-the-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Press enter on the above it and it takes you back to the original menu, but now you will see a domain is populated next to the IP.&nbsp; Repeat this process for all IPs, and select \"d\" for done when you are finished.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/mYQimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point%2C-you-h\">\r\n<li class=\"null\">At this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a TAG for these domains.&nbsp; This tag is used by other scripts to identify who created these domains and/or what there purpose is.&nbsp; This will allow these domains to be deleted later like say after an engagement and you no longer need them.&nbsp; For this example, I\'ll use \"test-DNS\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2l6image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/mx6image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li class=\"null\">Below is a screenshot of the build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-3\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/tvzimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/tvzimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-you-should-now-have-\">\r\n<li class=\"null\">You should now have a working redirector.&nbsp; The information regarding the redirector is located at /root/services/RD1.&nbsp; IT will have you DNS information, IP information, where it\'s redirecting to, the C2 profile used for ACLs.&nbsp; You can validate your redirector is running by looking at docker.&nbsp; Run docker ps.&nbsp; You should see a RD1 up and running.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/dhEimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dhEimage.png\" alt=\"image.png\"></a></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains doesn\'t match it will forward the traffic to a decoy website.\r\nNOTE: This guide is assuming you already have a Cobalt Strike team server running.  \r\nFor this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.\r\n\r\nUse the following script to start a HAProxy redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\"\r\n\r\n      \r\n\r\nNext it will ask for a tag to used for identifying the service.  This will also be the name of the directory the script will make for storing container files and will also be the name of the container.  By default it will generate a RD1 name, this will increment if it already has one build, ie RD2, etc.  For this example, we\'ll just use the default of RD1.\r\n\r\n       \r\n\r\nNext it will ask for the number of IPs, the script limits this to 20 for sanity reasons.  For this example, we\'ll use 5.\r\n\r\n      \r\n\r\nThen it will ask for a Geo-location to pull IP address from.  For this example we\'ll use the UK.\r\n\r\n     \r\n\r\nThen it will ask to select a city, some have a few, but a lot only have one.  For this example, we\'ll select London.\r\n\r\n     \r\n\r\nThen it will ask if you want to set IPs randomly or manually.  This guide will walk through both processes.\r\n\r\n     \r\n\r\n\r\n\r\nSetting IPs (Random) Below is a screenshot when option 1 is selected from above (Set random IPs).  Not much to see, it just goes on to the next option.  The script will pull 5 random IPs from the geo-location based IP subnet file.\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\nSetting IPs (Manual) Below is the menu when you select manual IP selection.  Here you can look at available subnets by entering \"s\".  Then when you know what IP\'s you want to use, you will select a IP slot and enter the IP.\r\n\r\n\r\n\r\n             \r\n\r\n\r\n\r\nUsing the \"s\" option to see available subnets.  This shows the available IP subnets based on the geo-location selections you made previously.  The list is typically long, you can hit the spacebar to scroll down and press \"q\", when you want to exit out of the subnet view and go back to the menu.  You can pick IPs from any of these subnets, so for this example, well us 12.9.80.129/25.  Note you can pick IPs from other subnets from the list, you don\'t have to use just one subnet.\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\nAfter pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.  \r\n\r\n\r\n\r\n             \r\n\r\n\r\n\r\n\r\n\r\nOnce you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu, but now you will see your entered IP, continue these steps until you\'ve added IPs for all empty slots.  Note:  If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three.\r\n\r\n\r\n\r\n\r\n\r\n             \r\n\r\nAt this point we have either set IPs randomly or manually, below is the next menu screen.  Here it asks for what ports to redirect.  For this example, we\'ll select HTTP, HTTPS\r\n\r\n        \r\n\r\nOnce selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.  This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure it to do so.  This part of the redirector will accommodate this if needed.  However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.  To accept the default just press enter.\r\n\r\n         \r\n\r\nNext it will ask about changing the bind port for http, again you can do this or just leave it as default.  Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.\r\n\r\n         \r\n\r\nNext it will ask what IP the redirect should be redirecting to.  This should be your Cobalt Strike Teamserver IP.   For this example we will be using 54.88.220.10\r\n\r\n        \r\n\r\nThen it will ask which Cobalt Strike profile to use.  This need to be the same as the profile used to start the Cobalt Strike teamserver.  The script will use information from the profile to build out ACLs.  These ACLs are used to identify C2 traffic from other things hitting a redirector domain.  If you select the wrong profile, your C2 will not work.  For this example we will use the humanzoo2.profile.\r\n\r\n        \r\n\r\nNext it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains to if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.  NOTE: this has to be a site that exist in the range and is reachable.  If you put in a domain that isn\'t reachable, the HAProxy will stop working.  The default is set to insureme.com, this is a site hosted on the webhost-traffic server.  We\'ll leave the default for this example.\r\n\r\n         \r\n\r\nNext it will ask if you want to create manual domains or have them randomly generated.  If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.  This guide will walk through both options.\r\n\r\n        \r\n\r\n\r\n\r\nAssigning Domains (option 1 - use randomly generated one/s).  If we select option 1, the script moves on to asking for a DNS tag.  It will randomly generate domains at the end when it\'s building the redirector.\r\n\r\n\r\n\r\n                \r\n\r\n\r\n\r\nAssigning Domains (Option2 - Manually create domain name/s).  When you select option 2, you get the menu shown below.  Here you pick an IP from the list it it will take you to a menu for entering a domain name for that IP.  For this example will use option 1  for IP 208.82.7.82\r\n\r\n\r\n\r\n               \r\n\r\n\r\n\r\nOnce you selected an IP to add a domain for, you get the menu shown below.  I\'ll make a domain called goatfarmer.com for the IP of 208.82.7.82\r\n\r\n\r\n\r\n               \r\n\r\n\r\n\r\nPress enter on the above it and it takes you back to the original menu, but now you will see a domain is populated next to the IP.  Repeat this process for all IPs, and select \"d\" for done when you are finished.\r\n\r\n\r\n\r\n             \r\n\r\nAt this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a TAG for these domains.  This tag is used by other scripts to identify who created these domains and/or what there purpose is.  This will allow these domains to be deleted later like say after an engagement and you no longer need them.  For this example, I\'ll use \"test-DNS\"\r\n\r\n           \r\n\r\nFinally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.\r\n\r\n       \r\n\r\nBelow is a screenshot of the build process.\r\n\r\n         \r\n\r\nYou should now have a working redirector.  The information regarding the redirector is located at /root/services/RD1.  IT will have you DNS information, IP information, where it\'s redirecting to, the C2 profile used for ACLs.  You can validate your redirector is running by looking at docker.  Run docker ps.  You should see a RD1 up and running.\r\n\r\n',1,'2023-04-03 23:39:39','2023-04-03 23:39:39','starting-a-haproxy-redirector','using-the-nrts','version','','',3),(64,15,'Starting a HAProxy Redirector','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains doesn\'t match it will forward the traffic to a decoy website.</p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a HAProxy redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a tag to used for identifying the service.&nbsp; This will also be the name of the directory the script will make for storing container files and will also be the name of the container.&nbsp; By default it will generate a RD1 name, this will increment if it already has one build, ie RD2, etc.&nbsp; For this example, we\'ll just use the default of RD1.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/59Fimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for the number of IPs, the script limits this to 20 for sanity reasons.&nbsp; For this example, we\'ll use 5.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/vq2image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vq2image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a Geo-location to pull IP address from.&nbsp; For this example we\'ll use the UK.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6itimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-will-ask-to-\">\r\n<li class=\"null\">Then it will ask to select a city, some have a few, but a lot only have one.&nbsp; For this example, we\'ll select London.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Ycfimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want to set IPs randomly or manually.&nbsp; This guide will walk through both processes.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/yTwimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips-%28random%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs (Random) Below is a screenshot when option 1 is selected from above (Set random IPs).&nbsp; Not much to see, it just goes on to the next option.&nbsp; The script will pull 5 random IPs from the geo-location based IP subnet file.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/9RIimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips-%28manual%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs (Manual) Below is the menu when you select manual IP selection.&nbsp; Here you can look at available subnets by entering \"s\".&nbsp; Then when you know what IP\'s you want to use, you will select a IP slot and enter the IP.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-using-the-%22s%22-option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Using the \"s\" option to see available subnets.&nbsp; This shows the available IP subnets based on the geo-location selections you made previously.&nbsp; The list is typically long, you can hit the spacebar to scroll down and press \"q\", when you want to exit out of the subnet view and go back to the menu.&nbsp; You can pick IPs from any of these subnets, so for this example, well us 12.9.80.129/25.&nbsp; Note you can pick IPs from other subnets from the list, you don\'t have to use just one subnet.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/Mc7image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Mc7image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-after-pressing-%22q%22-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.&nbsp; <br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/jRdimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jRdimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-once-you-enter-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu, but now you will see your entered IP, continue these steps until you\'ve added IPs for all empty slots.&nbsp; Note:&nbsp; If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-1\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/gjaimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/gjaimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either set IPs randomly or manually, below is the next menu screen.&nbsp; Here it asks for what ports to redirect.&nbsp; For this example, we\'ll select HTTP, HTTPS</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pYCimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-selected%2C-it-wi\">\r\n<li class=\"null\">Once selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.&nbsp; This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure it to do so.&nbsp; This part of the redirector will accommodate this if needed.&nbsp; However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.&nbsp; To accept the default just press enter.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/XMHimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-abo\">\r\n<li class=\"null\">Next it will ask about changing the bind port for http, again you can do this or just leave it as default.&nbsp; Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6goimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-wha\">\r\n<li class=\"null\">Next it will ask what IP the redirect should be redirecting to.&nbsp; This should be your Cobalt Strike Teamserver IP. &nbsp; For this example we will be using 54.88.220.10</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/hXTimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hXTimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-whi\">\r\n<li class=\"null\">Then it will ask which Cobalt Strike profile to use.&nbsp; This need to be the same as the profile used to start the Cobalt Strike teamserver.&nbsp; The script will use information from the profile to build out ACLs.&nbsp; These ACLs are used to identify C2 traffic from other things hitting a redirector domain.&nbsp; If you select the wrong profile, your C2 will not work.&nbsp; For this example we will use the humanzoo2.profile.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uJUimage.png\" alt=\"image.png\"><br></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains to if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.&nbsp; NOTE: this has to be a site that exist in the range and is reachable.&nbsp; If you put in a domain that isn\'t reachable, the HAProxy will stop working.&nbsp; The default is set to redbook.com.&nbsp; We\'ll leave the default for this example.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br></li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/B4Aimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B4Aimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to create manual domains or have them randomly generated.&nbsp; If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.&nbsp; This guide will walk through both options.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iTDimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assigning-domains-%28o\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains (option 1 - use randomly generated one/s).&nbsp; If we select option 1, the script moves on to asking for a DNS tag.&nbsp; It will randomly generate domains at the end when it\'s building the redirector.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pGyimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assigning-domains-%28o-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains (Option2 - Manually create domain name/s).&nbsp; When you select option 2, you get the menu shown below.&nbsp; Here you pick an IP from the list it it will take you to a menu for entering a domain name for that IP.&nbsp; For this example will use option 1&nbsp; for IP 208.82.7.57</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2I5image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-you-selected-an\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you selected an IP to add a domain for, you get the menu shown below.&nbsp; I\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57. <br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3UBimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-press-enter-on-the-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Press enter on the above it and it takes you back to the original menu, but now you will see a domain is populated next to the IP.&nbsp; Repeat this process for all IPs, and select \"d\" for done when you are finished.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Nxsimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point%2C-you-h\">\r\n<li class=\"null\">At this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a TAG for these domains.&nbsp; This tag is used by other scripts to identify who created these domains and/or what there purpose is.&nbsp; This will allow these domains to be deleted later like say after an engagement and you no longer need them.&nbsp; For this example, I\'ll use \"test-DNS\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dj9image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-1\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h7Iimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li class=\"null\">Below is a screenshot of the build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vleimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-you-should-now-have-\">\r\n<li class=\"null\">You should now have a working redirector.&nbsp; The information regarding the redirector is located at /root/services/RD1.&nbsp; IT will have you DNS information, IP information, where it\'s redirecting to, the C2 profile used for ACLs.&nbsp; You can validate your redirector is running by looking at docker.&nbsp; Run docker ps.&nbsp; You should see a RD1 up and running.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/dhEimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dhEimage.png\" alt=\"image.png\"></a></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains doesn\'t match it will forward the traffic to a decoy website.\r\nNOTE: This guide is assuming you already have a Cobalt Strike team server running.  \r\nFor this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.\r\n\r\nUse the following script to start a HAProxy redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\"\r\n\r\n      \r\n\r\nNext it will ask for a tag to used for identifying the service.  This will also be the name of the directory the script will make for storing container files and will also be the name of the container.  By default it will generate a RD1 name, this will increment if it already has one build, ie RD2, etc.  For this example, we\'ll just use the default of RD1.\r\n\r\n       \r\n\r\nNext it will ask for the number of IPs, the script limits this to 20 for sanity reasons.  For this example, we\'ll use 5.\r\n\r\n      \r\n\r\nThen it will ask for a Geo-location to pull IP address from.  For this example we\'ll use the UK.\r\n\r\n     \r\n\r\nThen it will ask to select a city, some have a few, but a lot only have one.  For this example, we\'ll select London.\r\n\r\n     \r\n\r\nThen it will ask if you want to set IPs randomly or manually.  This guide will walk through both processes.\r\n\r\n     \r\n\r\n\r\n\r\nSetting IPs (Random) Below is a screenshot when option 1 is selected from above (Set random IPs).  Not much to see, it just goes on to the next option.  The script will pull 5 random IPs from the geo-location based IP subnet file.\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\nSetting IPs (Manual) Below is the menu when you select manual IP selection.  Here you can look at available subnets by entering \"s\".  Then when you know what IP\'s you want to use, you will select a IP slot and enter the IP.\r\n\r\n\r\n\r\n             \r\n\r\n\r\n\r\nUsing the \"s\" option to see available subnets.  This shows the available IP subnets based on the geo-location selections you made previously.  The list is typically long, you can hit the spacebar to scroll down and press \"q\", when you want to exit out of the subnet view and go back to the menu.  You can pick IPs from any of these subnets, so for this example, well us 12.9.80.129/25.  Note you can pick IPs from other subnets from the list, you don\'t have to use just one subnet.\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\nAfter pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.  \r\n\r\n\r\n\r\n             \r\n\r\n\r\n\r\n\r\n\r\nOnce you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu, but now you will see your entered IP, continue these steps until you\'ve added IPs for all empty slots.  Note:  If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three.\r\n\r\n\r\n\r\n\r\n\r\n             \r\n\r\nAt this point we have either set IPs randomly or manually, below is the next menu screen.  Here it asks for what ports to redirect.  For this example, we\'ll select HTTP, HTTPS\r\n\r\n        \r\n\r\nOnce selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.  This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure it to do so.  This part of the redirector will accommodate this if needed.  However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.  To accept the default just press enter.\r\n\r\n         \r\n\r\nNext it will ask about changing the bind port for http, again you can do this or just leave it as default.  Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.\r\n\r\n         \r\n\r\nNext it will ask what IP the redirect should be redirecting to.  This should be your Cobalt Strike Teamserver IP.   For this example we will be using 54.88.220.10\r\n\r\n        \r\n\r\nThen it will ask which Cobalt Strike profile to use.  This need to be the same as the profile used to start the Cobalt Strike teamserver.  The script will use information from the profile to build out ACLs.  These ACLs are used to identify C2 traffic from other things hitting a redirector domain.  If you select the wrong profile, your C2 will not work.  For this example we will use the humanzoo2.profile.\r\n\r\n        \r\n\r\nNext it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains to if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.  NOTE: this has to be a site that exist in the range and is reachable.  If you put in a domain that isn\'t reachable, the HAProxy will stop working.  The default is set to redbook.com.  We\'ll leave the default for this example.         \r\n\r\n          \r\n\r\nNext it will ask if you want to create manual domains or have them randomly generated.  If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.  This guide will walk through both options.\r\n\r\n         \r\n\r\n\r\n\r\nAssigning Domains (option 1 - use randomly generated one/s).  If we select option 1, the script moves on to asking for a DNS tag.  It will randomly generate domains at the end when it\'s building the redirector.\r\n\r\n\r\n\r\n                \r\n\r\n\r\n\r\nAssigning Domains (Option2 - Manually create domain name/s).  When you select option 2, you get the menu shown below.  Here you pick an IP from the list it it will take you to a menu for entering a domain name for that IP.  For this example will use option 1  for IP 208.82.7.57\r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nOnce you selected an IP to add a domain for, you get the menu shown below.  I\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57. \r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nPress enter on the above it and it takes you back to the original menu, but now you will see a domain is populated next to the IP.  Repeat this process for all IPs, and select \"d\" for done when you are finished.\r\n\r\n\r\n\r\n                \r\n\r\nAt this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a TAG for these domains.  This tag is used by other scripts to identify who created these domains and/or what there purpose is.  This will allow these domains to be deleted later like say after an engagement and you no longer need them.  For this example, I\'ll use \"test-DNS\"\r\n\r\n           \r\n\r\nFinally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.\r\n\r\n          \r\n\r\nBelow is a screenshot of the build process.\r\n\r\n          \r\n\r\nYou should now have a working redirector.  The information regarding the redirector is located at /root/services/RD1.  IT will have you DNS information, IP information, where it\'s redirecting to, the C2 profile used for ACLs.  You can validate your redirector is running by looking at docker.  Run docker ps.  You should see a RD1 up and running.\r\n\r\n',1,'2023-04-04 00:13:12','2023-04-04 00:13:12','starting-a-haproxy-redirector','using-the-nrts','version','','',4),(65,15,'Making a HAProxy Redirector','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains doesn\'t match it will forward the traffic to a decoy website.</p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a HAProxy redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a tag to used for identifying the service.&nbsp; This will also be the name of the directory the script will make for storing container files and will also be the name of the container.&nbsp; By default it will generate a RD1 name, this will increment if it already has one build, ie RD2, etc.&nbsp; For this example, we\'ll just use the default of RD1.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/59Fimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for the number of IPs, the script limits this to 20 for sanity reasons.&nbsp; For this example, we\'ll use 5.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/vq2image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vq2image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a Geo-location to pull IP address from.&nbsp; For this example we\'ll use the UK.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6itimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-will-ask-to-\">\r\n<li class=\"null\">Then it will ask to select a city, some have a few, but a lot only have one.&nbsp; For this example, we\'ll select London.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Ycfimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want to set IPs randomly or manually.&nbsp; This guide will walk through both processes.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/yTwimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips-%28random%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs (Random) Below is a screenshot when option 1 is selected from above (Set random IPs).&nbsp; Not much to see, it just goes on to the next option.&nbsp; The script will pull 5 random IPs from the geo-location based IP subnet file.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/9RIimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips-%28manual%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs (Manual) Below is the menu when you select manual IP selection.&nbsp; Here you can look at available subnets by entering \"s\".&nbsp; Then when you know what IP\'s you want to use, you will select a IP slot and enter the IP.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-using-the-%22s%22-option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Using the \"s\" option to see available subnets.&nbsp; This shows the available IP subnets based on the geo-location selections you made previously.&nbsp; The list is typically long, you can hit the spacebar to scroll down and press \"q\", when you want to exit out of the subnet view and go back to the menu.&nbsp; You can pick IPs from any of these subnets, so for this example, well us 12.9.80.129/25.&nbsp; Note you can pick IPs from other subnets from the list, you don\'t have to use just one subnet.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/Mc7image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Mc7image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-after-pressing-%22q%22-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.&nbsp; <br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/jRdimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jRdimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-once-you-enter-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu, but now you will see your entered IP, continue these steps until you\'ve added IPs for all empty slots.&nbsp; Note:&nbsp; If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-1\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/gjaimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/gjaimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either set IPs randomly or manually, below is the next menu screen.&nbsp; Here it asks for what ports to redirect.&nbsp; For this example, we\'ll select HTTP, HTTPS</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pYCimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-selected%2C-it-wi\">\r\n<li class=\"null\">Once selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.&nbsp; This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure it to do so.&nbsp; This part of the redirector will accommodate this if needed.&nbsp; However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.&nbsp; To accept the default just press enter.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/XMHimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-abo\">\r\n<li class=\"null\">Next it will ask about changing the bind port for http, again you can do this or just leave it as default.&nbsp; Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6goimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-wha\">\r\n<li class=\"null\">Next it will ask what IP the redirect should be redirecting to.&nbsp; This should be your Cobalt Strike Teamserver IP. &nbsp; For this example we will be using 54.88.220.10</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/hXTimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hXTimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-whi\">\r\n<li class=\"null\">Then it will ask which Cobalt Strike profile to use.&nbsp; This need to be the same as the profile used to start the Cobalt Strike teamserver.&nbsp; The script will use information from the profile to build out ACLs.&nbsp; These ACLs are used to identify C2 traffic from other things hitting a redirector domain.&nbsp; If you select the wrong profile, your C2 will not work.&nbsp; For this example we will use the humanzoo2.profile.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0-%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uJUimage.png\" alt=\"image.png\"><br></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains to if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.&nbsp; NOTE: this has to be a site that exist in the range and is reachable.&nbsp; If you put in a domain that isn\'t reachable, the HAProxy will stop working.&nbsp; The default is set to redbook.com.&nbsp; We\'ll leave the default for this example.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br></li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/B4Aimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B4Aimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to create manual domains or have them randomly generated.&nbsp; If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.&nbsp; This guide will walk through both options.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iTDimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assigning-domains-%28o\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains (option 1 - use randomly generated one/s).&nbsp; If we select option 1, the script moves on to asking for a DNS tag.&nbsp; It will randomly generate domains at the end when it\'s building the redirector.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pGyimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assigning-domains-%28o-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains (Option2 - Manually create domain name/s).&nbsp; When you select option 2, you get the menu shown below.&nbsp; Here you pick an IP from the list it it will take you to a menu for entering a domain name for that IP.&nbsp; For this example will use option 1&nbsp; for IP 208.82.7.57</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2I5image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-you-selected-an\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you selected an IP to add a domain for, you get the menu shown below.&nbsp; I\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57. <br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3UBimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-press-enter-on-the-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Press enter on the above it and it takes you back to the original menu, but now you will see a domain is populated next to the IP.&nbsp; Repeat this process for all IPs, and select \"d\" for done when you are finished.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Nxsimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point%2C-you-h\">\r\n<li class=\"null\">At this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a TAG for these domains.&nbsp; This tag is used by other scripts to identify who created these domains and/or what there purpose is.&nbsp; This will allow these domains to be deleted later like say after an engagement and you no longer need them.&nbsp; For this example, I\'ll use \"test-DNS\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dj9image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-1\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h7Iimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li class=\"null\">Below is a screenshot of the build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vleimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-you-should-now-have-\">\r\n<li class=\"null\">You should now have a working redirector.&nbsp; The information regarding the redirector is located at /root/services/RD1.&nbsp; IT will have you DNS information, IP information, where it\'s redirecting to, the C2 profile used for ACLs.&nbsp; You can validate your redirector is running by looking at docker.&nbsp; Run docker ps.&nbsp; You should see a RD1 up and running.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/dhEimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dhEimage.png\" alt=\"image.png\"></a></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains doesn\'t match it will forward the traffic to a decoy website.\r\nNOTE: This guide is assuming you already have a Cobalt Strike team server running.  \r\nFor this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.\r\n\r\nUse the following script to start a HAProxy redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\"\r\n\r\n      \r\n\r\nNext it will ask for a tag to used for identifying the service.  This will also be the name of the directory the script will make for storing container files and will also be the name of the container.  By default it will generate a RD1 name, this will increment if it already has one build, ie RD2, etc.  For this example, we\'ll just use the default of RD1.\r\n\r\n       \r\n\r\nNext it will ask for the number of IPs, the script limits this to 20 for sanity reasons.  For this example, we\'ll use 5.\r\n\r\n      \r\n\r\nThen it will ask for a Geo-location to pull IP address from.  For this example we\'ll use the UK.\r\n\r\n     \r\n\r\nThen it will ask to select a city, some have a few, but a lot only have one.  For this example, we\'ll select London.\r\n\r\n     \r\n\r\nThen it will ask if you want to set IPs randomly or manually.  This guide will walk through both processes.\r\n\r\n     \r\n\r\n\r\n\r\nSetting IPs (Random) Below is a screenshot when option 1 is selected from above (Set random IPs).  Not much to see, it just goes on to the next option.  The script will pull 5 random IPs from the geo-location based IP subnet file.\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\nSetting IPs (Manual) Below is the menu when you select manual IP selection.  Here you can look at available subnets by entering \"s\".  Then when you know what IP\'s you want to use, you will select a IP slot and enter the IP.\r\n\r\n\r\n\r\n             \r\n\r\n\r\n\r\nUsing the \"s\" option to see available subnets.  This shows the available IP subnets based on the geo-location selections you made previously.  The list is typically long, you can hit the spacebar to scroll down and press \"q\", when you want to exit out of the subnet view and go back to the menu.  You can pick IPs from any of these subnets, so for this example, well us 12.9.80.129/25.  Note you can pick IPs from other subnets from the list, you don\'t have to use just one subnet.\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\nAfter pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.  \r\n\r\n\r\n\r\n             \r\n\r\n\r\n\r\n\r\n\r\nOnce you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu, but now you will see your entered IP, continue these steps until you\'ve added IPs for all empty slots.  Note:  If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three.\r\n\r\n\r\n\r\n\r\n\r\n             \r\n\r\nAt this point we have either set IPs randomly or manually, below is the next menu screen.  Here it asks for what ports to redirect.  For this example, we\'ll select HTTP, HTTPS\r\n\r\n        \r\n\r\nOnce selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.  This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure it to do so.  This part of the redirector will accommodate this if needed.  However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.  To accept the default just press enter.\r\n\r\n         \r\n\r\nNext it will ask about changing the bind port for http, again you can do this or just leave it as default.  Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.\r\n\r\n         \r\n\r\nNext it will ask what IP the redirect should be redirecting to.  This should be your Cobalt Strike Teamserver IP.   For this example we will be using 54.88.220.10\r\n\r\n        \r\n\r\nThen it will ask which Cobalt Strike profile to use.  This need to be the same as the profile used to start the Cobalt Strike teamserver.  The script will use information from the profile to build out ACLs.  These ACLs are used to identify C2 traffic from other things hitting a redirector domain.  If you select the wrong profile, your C2 will not work.  For this example we will use the humanzoo2.profile.\r\n\r\n        \r\n\r\nNext it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains to if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.  NOTE: this has to be a site that exist in the range and is reachable.  If you put in a domain that isn\'t reachable, the HAProxy will stop working.  The default is set to redbook.com.  We\'ll leave the default for this example.         \r\n\r\n          \r\n\r\nNext it will ask if you want to create manual domains or have them randomly generated.  If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.  This guide will walk through both options.\r\n\r\n         \r\n\r\n\r\n\r\nAssigning Domains (option 1 - use randomly generated one/s).  If we select option 1, the script moves on to asking for a DNS tag.  It will randomly generate domains at the end when it\'s building the redirector.\r\n\r\n\r\n\r\n                \r\n\r\n\r\n\r\nAssigning Domains (Option2 - Manually create domain name/s).  When you select option 2, you get the menu shown below.  Here you pick an IP from the list it it will take you to a menu for entering a domain name for that IP.  For this example will use option 1  for IP 208.82.7.57\r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nOnce you selected an IP to add a domain for, you get the menu shown below.  I\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57. \r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nPress enter on the above it and it takes you back to the original menu, but now you will see a domain is populated next to the IP.  Repeat this process for all IPs, and select \"d\" for done when you are finished.\r\n\r\n\r\n\r\n                \r\n\r\nAt this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a TAG for these domains.  This tag is used by other scripts to identify who created these domains and/or what there purpose is.  This will allow these domains to be deleted later like say after an engagement and you no longer need them.  For this example, I\'ll use \"test-DNS\"\r\n\r\n           \r\n\r\nFinally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.\r\n\r\n          \r\n\r\nBelow is a screenshot of the build process.\r\n\r\n          \r\n\r\nYou should now have a working redirector.  The information regarding the redirector is located at /root/services/RD1.  IT will have you DNS information, IP information, where it\'s redirecting to, the C2 profile used for ACLs.  You can validate your redirector is running by looking at docker.  Run docker ps.  You should see a RD1 up and running.\r\n\r\n',1,'2023-04-04 00:13:32','2023-04-04 00:13:32','making-a-haproxy-redirector','using-the-nrts','version','','',5),(66,16,'Making a NGINX Redirector','','',1,'2023-04-04 00:13:47','2023-04-04 00:13:47','making-a-nginx-redirector','using-the-nrts','version','','Initial publish',1),(68,16,'Making a NGINX Redirector','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The NGINX redirector can be use with most C2 servers and can redirect DNS traffic.<br></p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a NGINX redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 1 \"Set up a NGINX redirector (http,https, DNS)\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, this take will create a folder in /root/services to place container config files and it will also be used as the container name.&nbsp; It generators a default in the form of RDx, starting with 1 and incrementing.&nbsp; The script will automatically find an available number.&nbsp; For example if you already had a redirector running, it would show a default of RD2 the next time you run it.&nbsp; For this example, we\'ll leave the default of RD1.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/CBYimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-asks-for-the\">\r\n<li class=\"null\">Next it asks for the number of IPs.&nbsp; For the example we\'ll use 5.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ApVimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a geo-location base for your setting your IP\'s the first menu, shown below asks for a country of origin, for this example we\'ll use option 4 Canada.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/RStimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-narrows-it-d\">\r\n<li class=\"null\">Then it narrows it down by city, for this example we\'ll use Toronto.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/VBWimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP manually or randomly.&nbsp; This guide will walk through both options.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Qhimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips-%281-set-r\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs (1 Set random IPs)&nbsp; For this the script will randomly select IPs from the available IP subnets based on the geo-location you selected.&nbsp; It will do this during processing, so it just moves on to the next menu.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/mZUimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips-%28-2-set-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs ( 2 Set IPs manually)&nbsp; When you select this option you get the following menu screen.&nbsp; Here you have a list of blank slots, this is where you would add IPs.&nbsp; Select \"s\" to see a list of available IP subnets.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/bTcimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available subnets\", you can use this information to select your IPs from.&nbsp; This list can be long, use spacebar to page forward and \"q\" to exit out and get back to the previous menu.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/X3Rimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-using-the-list-of-av\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Using the list of available IP\'s you can use IP\'s out of any of these subnets, for this example I\'ll use 72.3.244.1/25 - but you can use multiple subnets from the list.&nbsp; I\'ve press \"q\" to get out of that view and back at the manual IP menu I\'ve select 1 for the first blank space.&nbsp; This brings up the menu to enter an IP as shown below.&nbsp; I\'m manually putting in 72.3.244.20 for the first slot.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hdjimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-i-press-enter%2C-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once I press enter, it goes back to the manual IP menu and now you see slot one is populated with the IP, continue this process until you\'ve filled all the blanks, then select \"d\" for done.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jJGimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point-i-have\">\r\n<li class=\"null\">At this point I have either set IPs randomly or manually set IPs and select \"d\", which brings us to the next menu that asks what ports to redirect as shown below.&nbsp;&nbsp; For this example, we\'ll select option 4 for DNS, HTTP and HTTPS.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/rocimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if I want to set a different port for the \"bind to\" this is related to a cobalt strike feature where you can have a listener set to \"bind to\" a different port.&nbsp; The payload you build will still use port 443 for example of a HTTPS payload, but the teamserver will listen on a different port like say 8443.&nbsp; You need a redirector to do something like this, however since the teamserver and redirectors are running in containers, there isn\'t really a need to do this.&nbsp; For this example we will leave it at the default.&nbsp; The screenshoot shows it asks this for each port being redirected.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/rtkimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for the IP to redirect to.&nbsp; This should be your C2 server\'s IP.&nbsp; For this example we are using a Cobalt Strike teamserver running on 54.88.220.10.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dp2image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-want-to\">\r\n<li class=\"null\">Next it will want to set up DNS and it will give you the option for randomly generated DNS or will let you manually create your domain names.&nbsp; This is necessary whenever you select to redirect HTTPS, the script will need the domain names to generator the CA signed SSL certificates.&nbsp; The script will automatically connect to the CA server to get these signed so they can be used by the NGINX redirector.&nbsp; This guide will walk through both Random and manually domain options.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/LCiimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assigning-domains-na\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning domains names (1 Using randomly generated one/s).&nbsp; When you select this, the script will randomly generate domain names during processing, so it just moves on to the next menu.&nbsp;&nbsp;&nbsp;&nbsp;</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/CtSimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assigning-domain-nam\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning domain names (2 Manually create domain names/s) Option.&nbsp; This will take you to the menu below.&nbsp; Note there is a list of IP\'s, you select a menu number next to an IP to set the domain for that IP.&nbsp; For this example, we\'ll set option 1 (205.225.141.68)</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-3\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/nkAimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-this-will-show-the-m\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">This will show the menu below where it asks for the domain name.&nbsp; Enter the domain you want to use for that IP and press enter.&nbsp; For this example, we\'ll use goatfarmer.com.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-4\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/J49image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-you%27ve-entered-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve entered the domain and pressed enter it takes you back to the manual domain name menu, now you should see the domain populated next to the IP, repeat this process for all IPs and press \"d\" when you are finished.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-5\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/sbaimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either selected randomly generated domain names or completed adding domain names manual.&nbsp; Next the script will ask you to set a tag for your DNS.&nbsp; This is used to identify the domains later when you want to remove them.&nbsp; For this example, we\'ll use \"test-DNS\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xo4image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-now-the-script-has-a\">\r\n<li class=\"null\">Now the script has all the information it needs to build your NGINX redirector.&nbsp; Review the settings and if you are happy with it press enter to start the docker container build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/ROCimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ROCimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-below-shows-the-buil\">\r\n<li class=\"null\">Below shows the build process, you should now have a NGINX redirector.&nbsp; You can get information about it from the /root/services/RD1 folder.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-3\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/HDTimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HDTimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-to-check-that-your-c\">\r\n<li class=\"null\">To check that your container is running run docker ps, you should see a container running with the \"Docker service Tag\" from above.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/4KAimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/4KAimage.png\" alt=\"image.png\"></a></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The NGINX redirector can be use with most C2 servers and can redirect DNS traffic.\r\nNOTE: This guide is assuming you already have a Cobalt Strike team server running.  \r\nFor this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10\r\n\r\nUse the following script to start a NGINX redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 1 \"Set up a NGINX redirector (http,https, DNS)\"\r\n\r\n      \r\n\r\nNext it will ask for a service tag, this take will create a folder in /root/services to place container config files and it will also be used as the container name.  It generators a default in the form of RDx, starting with 1 and incrementing.  The script will automatically find an available number.  For example if you already had a redirector running, it would show a default of RD2 the next time you run it.  For this example, we\'ll leave the default of RD1.\r\n\r\n       \r\n\r\nNext it asks for the number of IPs.  For the example we\'ll use 5.\r\n\r\n      \r\n\r\nNext it will ask for a geo-location base for your setting your IP\'s the first menu, shown below asks for a country of origin, for this example we\'ll use option 4 Canada.\r\n\r\n       \r\n\r\nThen it narrows it down by city, for this example we\'ll use Toronto.\r\n\r\n     \r\n\r\nNext, it will ask if you want to set IP manually or randomly.  This guide will walk through both options.\r\n\r\n      \r\n\r\n\r\n\r\nSetting IPs (1 Set random IPs)  For this the script will randomly select IPs from the available IP subnets based on the geo-location you selected.  It will do this during processing, so it just moves on to the next menu.\r\n\r\n\r\n\r\n                \r\n\r\n\r\n\r\nSetting IPs ( 2 Set IPs manually)  When you select this option you get the following menu screen.  Here you have a list of blank slots, this is where you would add IPs.  Select \"s\" to see a list of available IP subnets.\r\n\r\n\r\n\r\n                \r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available subnets\", you can use this information to select your IPs from.  This list can be long, use spacebar to page forward and \"q\" to exit out and get back to the previous menu.\r\n\r\n\r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\n\r\n\r\nUsing the list of available IP\'s you can use IP\'s out of any of these subnets, for this example I\'ll use 72.3.244.1/25 - but you can use multiple subnets from the list.  I\'ve press \"q\" to get out of that view and back at the manual IP menu I\'ve select 1 for the first blank space.  This brings up the menu to enter an IP as shown below.  I\'m manually putting in 72.3.244.20 for the first slot.\r\n\r\n\r\n\r\n\r\n\r\n                     \r\n\r\n\r\n\r\n\r\n\r\nOnce I press enter, it goes back to the manual IP menu and now you see slot one is populated with the IP, continue this process until you\'ve filled all the blanks, then select \"d\" for done.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\nAt this point I have either set IPs randomly or manually set IPs and select \"d\", which brings us to the next menu that asks what ports to redirect as shown below.   For this example, we\'ll select option 4 for DNS, HTTP and HTTPS.\r\n\r\n          \r\n\r\nNext it will ask if I want to set a different port for the \"bind to\" this is related to a cobalt strike feature where you can have a listener set to \"bind to\" a different port.  The payload you build will still use port 443 for example of a HTTPS payload, but the teamserver will listen on a different port like say 8443.  You need a redirector to do something like this, however since the teamserver and redirectors are running in containers, there isn\'t really a need to do this.  For this example we will leave it at the default.  The screenshoot shows it asks this for each port being redirected.\r\n\r\n         \r\n\r\nNext it will ask for the IP to redirect to.  This should be your C2 server\'s IP.  For this example we are using a Cobalt Strike teamserver running on 54.88.220.10.\r\n\r\n         \r\n\r\nNext it will want to set up DNS and it will give you the option for randomly generated DNS or will let you manually create your domain names.  This is necessary whenever you select to redirect HTTPS, the script will need the domain names to generator the CA signed SSL certificates.  The script will automatically connect to the CA server to get these signed so they can be used by the NGINX redirector.  This guide will walk through both Random and manually domain options.\r\n\r\n          \r\n\r\n\r\n\r\n\r\n\r\nAssigning domains names (1 Using randomly generated one/s).  When you select this, the script will randomly generate domain names during processing, so it just moves on to the next menu.    \r\n\r\n\r\n\r\n\r\n\r\n                      \r\n\r\n\r\n\r\n\r\n\r\nAssigning domain names (2 Manually create domain names/s) Option.  This will take you to the menu below.  Note there is a list of IP\'s, you select a menu number next to an IP to set the domain for that IP.  For this example, we\'ll set option 1 (205.225.141.68)\r\n\r\n\r\n\r\n\r\n\r\n                        \r\n\r\n\r\n\r\n\r\n\r\nThis will show the menu below where it asks for the domain name.  Enter the domain you want to use for that IP and press enter.  For this example, we\'ll use goatfarmer.com.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve entered the domain and pressed enter it takes you back to the manual domain name menu, now you should see the domain populated next to the IP, repeat this process for all IPs and press \"d\" when you are finished.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\nAt this point we have either selected randomly generated domain names or completed adding domain names manual.  Next the script will ask you to set a tag for your DNS.  This is used to identify the domains later when you want to remove them.  For this example, we\'ll use \"test-DNS\"\r\n\r\n          \r\n\r\nNow the script has all the information it needs to build your NGINX redirector.  Review the settings and if you are happy with it press enter to start the docker container build process.\r\n\r\n        \r\n\r\nBelow shows the build process, you should now have a NGINX redirector.  You can get information about it from the /root/services/RD1 folder.\r\n\r\n          \r\n\r\nTo check that your container is running run docker ps, you should see a container running with the \"Docker service Tag\" from above.\r\n\r\n',1,'2023-04-04 01:10:33','2023-04-04 01:10:33','making-a-nginx-redirector','using-the-nrts','version','','',2),(69,17,'Building a Payload Host','','',1,'2023-04-04 01:12:48','2023-04-04 01:12:48','building-a-payload-host','using-the-nrts','version','','Initial publish',1),(71,17,'Building a Payload Host','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp;</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Payload Host on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-this-will-then-ask-y\">\r\n<li class=\"null\">This will then ask you to create a service tag.&nbsp; This is used by the script to set up a /root/services folder for the docker configuration files and it will also be used as the docker container name.&nbsp; By default it will provide a name of P1, the number will increment if you already have a payload host running on the NRTS, for example the next time it would set the default to P2.&nbsp; For this example, we\'ll keep the default of P1.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jICimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.&nbsp; For this example we will use 5.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/E0aimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a geo-location for your IPs.&nbsp; The script has a library of geo-location based IP subnets on the NRTS located at /root/backbonerouters.&nbsp; For this example, we\'ll set our geolocation to option 7 - France.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hzximage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a city, some options have a few and some only have one.&nbsp; For example france only has one, so we\'ll select 1 -Paris since there isn\'t another option.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/UQkimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP\'s randomly or manually.&nbsp; This guide will walk through both paths.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/Pysimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Pysimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-setting-ip%27s-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IP\'s Option 1 (Set random IPs).&nbsp; When you select this option the script will move on to the next step.&nbsp; It will use the geo-location you select to randomly pull IP\'s from the list of IP subnets associated with that location.&nbsp; The next step is show below, but we\'ll get back to that after showing the manual IP path option.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/iqfimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iqfimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-setting-ip%27s-option--1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IP\'s Option 2 (Set manual IPs).&nbsp; When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.&nbsp; Select a blank option to get to the IP input screen.&nbsp; First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3Qyimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available subnets\".&nbsp; This can be a long list, use spacebar to page forward and enter \"q\" to exit out of the subnet view and get back to the previous menu.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qstimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-now-that-we-know-wha\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Now that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.&nbsp; You can use any IP from the list of subnets and pull IPs from multiple subnets.&nbsp; Back at the manual IP menu, I\'m selecting option 1 for the first blank spot and putting in 184.84.181.201.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-3\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/GViimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-when-i-press-enter-f\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">When I press enter for the IP I just entered, it will take me back to the manual IP menu, only now the blank at option one is populated with the IP I entered.&nbsp; Repeat this for all blanks and then press \"d\" when you are done.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-4\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/EYoimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point-you-ha\">\r\n<li class=\"null\">At this point you have either selected Random IPs or have completed entering manual IPs and selected \"d\".&nbsp; This brings you to the next menu.&nbsp; Here it asks you how you want to assign DNS.&nbsp; You can select random or manual, this guide will walk you through both paths.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/9nzimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/9nzimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-assign-dns-option-1-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assign DNS Option 1 (use randomly generated one/s).&nbsp; When you select this, the script will move on to the next step and assign random DNS during the build process.&nbsp; Below is that screenshot, but we\'ll get back to this after walking through the manual process.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-5\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/TOTimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assign-dns-option-2-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assign DNS Option 2 (Manually create domain name/s).&nbsp; This will take you to a new menu that shows a list of IPs.&nbsp; Here you select an IP and then it will ask you to enter the domain name to use for that IP.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-6\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HNlimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-for-this-example-we%27\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">For this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name menu below.&nbsp; Then we\'ll use goatfarmer.com for that IP.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-7\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h9Rimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-we-enter-the-do\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.&nbsp; Repeat this process for all IP\'s press \"D\" when complete.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-8\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Mtimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point-you-ha-1\">\r\n<li class=\"null\">At this point you have either selected Random DNS or have completed the manual DNS process and selected \"D\" for done.&nbsp; Next the script will ask you for a DNS tag.&nbsp; This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.&nbsp; For this example we\'ll use \"test-DNS\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/aUSimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/YcJimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-below-is-a-screensho-1\">\r\n<li class=\"null\">Below is a screenshot of the build process.&nbsp; After its complete information about the payload host service is located at /root/services/P1.&nbsp;&nbsp; NOTE: on occassion you will see this \"RTNETLINK answers: File exists\" just ignore it.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/i6Timage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-you-can-check-that-y\">\r\n<li class=\"null\">You can check that your payload host container is running by running docker ps.&nbsp; You should see a container named P1 or whatever you set as the Docker Service Tag.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dj1image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-to-add-payloads\">\r\n<li class=\"null\">Then to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.&nbsp; Note: if you set a custom Docker service tag go there, ex.&nbsp; /root/services/&lt;docker service tag&gt;/WWW.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>\r\n<p id=\"bkmrk-%C2%A0-1\">&nbsp;</p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so. \r\n\r\nUse the following script to start a Payload Host on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"\r\n\r\n      \r\n\r\nThis will then ask you to create a service tag.  This is used by the script to set up a /root/services folder for the docker configuration files and it will also be used as the docker container name.  By default it will provide a name of P1, the number will increment if you already have a payload host running on the NRTS, for example the next time it would set the default to P2.  For this example, we\'ll keep the default of P1.\r\n\r\n         \r\n\r\nNext it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.  For this example we will use 5.\r\n\r\n          \r\n\r\nThen it will ask for a geo-location for your IPs.  The script has a library of geo-location based IP subnets on the NRTS located at /root/backbonerouters.  For this example, we\'ll set our geolocation to option 7 - France.\r\n\r\n         \r\n\r\nNext it will ask for a city, some options have a few and some only have one.  For example france only has one, so we\'ll select 1 -Paris since there isn\'t another option.\r\n\r\n          \r\n\r\nNext, it will ask if you want to set IP\'s randomly or manually.  This guide will walk through both paths.\r\n\r\n          \r\n\r\n\r\n\r\n\r\n\r\nSetting IP\'s Option 1 (Set random IPs).  When you select this option the script will move on to the next step.  It will use the geo-location you select to randomly pull IP\'s from the list of IP subnets associated with that location.  The next step is show below, but we\'ll get back to that after showing the manual IP path option.\r\n\r\n\r\n\r\n\r\n\r\n                        \r\n\r\n\r\n\r\n\r\n\r\nSetting IP\'s Option 2 (Set manual IPs).  When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.  Select a blank option to get to the IP input screen.  First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.\r\n\r\n\r\n\r\n\r\n\r\n                     \r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available subnets\".  This can be a long list, use spacebar to page forward and enter \"q\" to exit out of the subnet view and get back to the previous menu.\r\n\r\n\r\n\r\n\r\n\r\n                      \r\n\r\n\r\n\r\n\r\n\r\nNow that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.  You can use any IP from the list of subnets and pull IPs from multiple subnets.  Back at the manual IP menu, I\'m selecting option 1 for the first blank spot and putting in 184.84.181.201.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\n\r\n\r\n\r\n\r\nWhen I press enter for the IP I just entered, it will take me back to the manual IP menu, only now the blank at option one is populated with the IP I entered.  Repeat this for all blanks and then press \"d\" when you are done.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\nAt this point you have either selected Random IPs or have completed entering manual IPs and selected \"d\".  This brings you to the next menu.  Here it asks you how you want to assign DNS.  You can select random or manual, this guide will walk you through both paths.\r\n\r\n           \r\n\r\n\r\n\r\n\r\n\r\nAssign DNS Option 1 (use randomly generated one/s).  When you select this, the script will move on to the next step and assign random DNS during the build process.  Below is that screenshot, but we\'ll get back to this after walking through the manual process.\r\n\r\n\r\n\r\n\r\n\r\n                        \r\n\r\n\r\n\r\n\r\n\r\nAssign DNS Option 2 (Manually create domain name/s).  This will take you to a new menu that shows a list of IPs.  Here you select an IP and then it will ask you to enter the domain name to use for that IP.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\n\r\n\r\n\r\n\r\nFor this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name menu below.  Then we\'ll use goatfarmer.com for that IP.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\n\r\n\r\n\r\n\r\nOnce we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.  Repeat this process for all IP\'s press \"D\" when complete.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\nAt this point you have either selected Random DNS or have completed the manual DNS process and selected \"D\" for done.  Next the script will ask you for a DNS tag.  This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.  For this example we\'ll use \"test-DNS\"\r\n\r\n           \r\n\r\nAt this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.\r\n\r\n           \r\n\r\nBelow is a screenshot of the build process.  After its complete information about the payload host service is located at /root/services/P1.   NOTE: on occassion you will see this \"RTNETLINK answers: File exists\" just ignore it.\r\n\r\n       \r\n\r\nYou can check that your payload host container is running by running docker ps.  You should see a container named P1 or whatever you set as the Docker Service Tag.\r\n\r\n\r\n\r\nThen to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.  Note: if you set a custom Docker service tag go there, ex.  /root/services/<docker service tag>/WWW.\r\n\r\n \r\n ',1,'2023-04-04 01:52:13','2023-04-04 01:52:13','building-a-payload-host','using-the-nrts','version','','',2),(72,18,'Setting up a Phishing Attack','','',1,'2023-04-04 01:53:10','2023-04-04 01:53:10','setting-up-a-phishing-attack','using-the-nrts','version','','Initial publish',1),(73,17,'Building a Payload Host','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp;</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Payload Host on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-this-will-then-ask-y\">\r\n<li class=\"null\">This will then ask you to create a service tag.&nbsp; This is used by the script to set up a /root/services folder for the docker configuration files and it will also be used as the docker container name.&nbsp; By default it will provide a name of P1, the number will increment if you already have a payload host running on the NRTS, for example the next time it would set the default to P2.&nbsp; For this example, we\'ll keep the default of P1.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jICimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.&nbsp; For this example we will use 5.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/E0aimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a geo-location for your IPs.&nbsp; The script has a library of geo-location based IP subnets on the NRTS located at /root/backbonerouters.&nbsp; For this example, we\'ll set our geolocation to option 7 - France.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hzximage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a city, some options have a few and some only have one.&nbsp; For example france only has one, so we\'ll select 1 -Paris since there isn\'t another option.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/UQkimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP\'s randomly or manually.&nbsp; This guide will walk through both paths.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/Pysimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Pysimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-setting-ip%27s-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IP\'s Option 1 (Set random IPs).&nbsp; When you select this option the script will move on to the next step.&nbsp; It will use the geo-location you select to randomly pull IP\'s from the list of IP subnets associated with that location.&nbsp; The next step is show below, but we\'ll get back to that after showing the manual IP path option.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/iqfimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iqfimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-setting-ip%27s-option--1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IP\'s Option 2 (Set manual IPs).&nbsp; When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.&nbsp; Select a blank option to get to the IP input screen.&nbsp; First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3Qyimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available subnets\".&nbsp; This can be a long list, use spacebar to page forward and enter \"q\" to exit out of the subnet view and get back to the previous menu.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qstimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-now-that-we-know-wha\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Now that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.&nbsp; You can use any IP from the list of subnets and pull IPs from multiple subnets.&nbsp; Back at the manual IP menu, I\'m selecting option 1 for the first blank spot and putting in 184.84.181.201.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-3\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/GViimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-when-i-press-enter-f\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">When I press enter for the IP I just entered, it will take me back to the manual IP menu, only now the blank at option one is populated with the IP I entered.&nbsp; Repeat this for all blanks and then press \"d\" when you are done.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-4\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/EYoimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point-you-ha\">\r\n<li class=\"null\">At this point you have either selected Random IPs or have completed entering manual IPs and selected \"d\".&nbsp; This brings you to the next menu.&nbsp; Here it asks you how you want to assign DNS.&nbsp; You can select random or manual, this guide will walk you through both paths.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/9nzimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/9nzimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-assign-dns-option-1-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assign DNS Option 1 (use randomly generated one/s).&nbsp; When you select this, the script will move on to the next step and assign random DNS during the build process.&nbsp; Below is that screenshot, but we\'ll get back to this after walking through the manual process.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-5\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/TOTimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-assign-dns-option-2-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assign DNS Option 2 (Manually create domain name/s).&nbsp; This will take you to a new menu that shows a list of IPs.&nbsp; Here you select an IP and then it will ask you to enter the domain name to use for that IP.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-6\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HNlimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-for-this-example-we%27\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">For this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name menu below.&nbsp; Then we\'ll use goatfarmer.com for that IP.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-7\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h9Rimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-once-we-enter-the-do\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.&nbsp; Repeat this process for all IP\'s press \"D\" when complete.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-8\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Mtimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point-you-ha-1\">\r\n<li class=\"null\">At this point you have either selected Random DNS or have completed the manual DNS process and selected \"D\" for done.&nbsp; Next the script will ask you for a DNS tag.&nbsp; This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.&nbsp; For this example we\'ll use \"test-DNS\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/aUSimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/YcJimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-below-is-a-screensho-1\">\r\n<li class=\"null\">Below is a screenshot of the build process.&nbsp; After its complete information about the payload host service is located at /root/services/P1.&nbsp;&nbsp; NOTE: on occassion you will see this \"RTNETLINK answers: File exists\" just ignore it.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/i6Timage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-you-can-check-that-y\">\r\n<li class=\"null\">You can check that your payload host container is running by running docker ps.&nbsp; You should see a container named P1 or whatever you set as the Docker Service Tag.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dj1image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-to-add-payloads\">\r\n<li class=\"null\">Then to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.&nbsp; Note: if you set a custom Docker service tag go there, ex.&nbsp; /root/services/&lt;docker service tag&gt;/WWW.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>\r\n<p id=\"bkmrk-%C2%A0-1\"></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so. \r\n\r\nUse the following script to start a Payload Host on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"\r\n\r\n      \r\n\r\nThis will then ask you to create a service tag.  This is used by the script to set up a /root/services folder for the docker configuration files and it will also be used as the docker container name.  By default it will provide a name of P1, the number will increment if you already have a payload host running on the NRTS, for example the next time it would set the default to P2.  For this example, we\'ll keep the default of P1.\r\n\r\n         \r\n\r\nNext it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.  For this example we will use 5.\r\n\r\n          \r\n\r\nThen it will ask for a geo-location for your IPs.  The script has a library of geo-location based IP subnets on the NRTS located at /root/backbonerouters.  For this example, we\'ll set our geolocation to option 7 - France.\r\n\r\n         \r\n\r\nNext it will ask for a city, some options have a few and some only have one.  For example france only has one, so we\'ll select 1 -Paris since there isn\'t another option.\r\n\r\n          \r\n\r\nNext, it will ask if you want to set IP\'s randomly or manually.  This guide will walk through both paths.\r\n\r\n          \r\n\r\n\r\n\r\n\r\n\r\nSetting IP\'s Option 1 (Set random IPs).  When you select this option the script will move on to the next step.  It will use the geo-location you select to randomly pull IP\'s from the list of IP subnets associated with that location.  The next step is show below, but we\'ll get back to that after showing the manual IP path option.\r\n\r\n\r\n\r\n\r\n\r\n                        \r\n\r\n\r\n\r\n\r\n\r\nSetting IP\'s Option 2 (Set manual IPs).  When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.  Select a blank option to get to the IP input screen.  First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.\r\n\r\n\r\n\r\n\r\n\r\n                     \r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available subnets\".  This can be a long list, use spacebar to page forward and enter \"q\" to exit out of the subnet view and get back to the previous menu.\r\n\r\n\r\n\r\n\r\n\r\n                      \r\n\r\n\r\n\r\n\r\n\r\nNow that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.  You can use any IP from the list of subnets and pull IPs from multiple subnets.  Back at the manual IP menu, I\'m selecting option 1 for the first blank spot and putting in 184.84.181.201.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\n\r\n\r\n\r\n\r\nWhen I press enter for the IP I just entered, it will take me back to the manual IP menu, only now the blank at option one is populated with the IP I entered.  Repeat this for all blanks and then press \"d\" when you are done.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\nAt this point you have either selected Random IPs or have completed entering manual IPs and selected \"d\".  This brings you to the next menu.  Here it asks you how you want to assign DNS.  You can select random or manual, this guide will walk you through both paths.\r\n\r\n           \r\n\r\n\r\n\r\n\r\n\r\nAssign DNS Option 1 (use randomly generated one/s).  When you select this, the script will move on to the next step and assign random DNS during the build process.  Below is that screenshot, but we\'ll get back to this after walking through the manual process.\r\n\r\n\r\n\r\n\r\n\r\n                        \r\n\r\n\r\n\r\n\r\n\r\nAssign DNS Option 2 (Manually create domain name/s).  This will take you to a new menu that shows a list of IPs.  Here you select an IP and then it will ask you to enter the domain name to use for that IP.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\n\r\n\r\n\r\n\r\nFor this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name menu below.  Then we\'ll use goatfarmer.com for that IP.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\n\r\n\r\n\r\n\r\nOnce we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.  Repeat this process for all IP\'s press \"D\" when complete.\r\n\r\n\r\n\r\n\r\n\r\n                       \r\n\r\nAt this point you have either selected Random DNS or have completed the manual DNS process and selected \"D\" for done.  Next the script will ask you for a DNS tag.  This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.  For this example we\'ll use \"test-DNS\"\r\n\r\n           \r\n\r\nAt this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.\r\n\r\n           \r\n\r\nBelow is a screenshot of the build process.  After its complete information about the payload host service is located at /root/services/P1.   NOTE: on occassion you will see this \"RTNETLINK answers: File exists\" just ignore it.\r\n\r\n       \r\n\r\nYou can check that your payload host container is running by running docker ps.  You should see a container named P1 or whatever you set as the Docker Service Tag.\r\n\r\n\r\n\r\nThen to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.  Note: if you set a custom Docker service tag go there, ex.  /root/services/<docker service tag>/WWW.\r\n\r\n\r\n',1,'2023-04-04 01:53:26','2023-04-04 01:53:26','building-a-payload-host','using-the-nrts','version','','',3),(75,18,'Setting up a Phishing Attack','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp;</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to set up phishing attack on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-this-will-then-ask-t\">\r\n<li class=\"null\">This will then ask to select a geo-location based IP, first select a country.&nbsp; For this example we\'ll use China.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2LTimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next-it-will-ask-you\">\r\n<li class=\"null\">Next it will ask you to select a city, for this example we\'ll use Beijing.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/pOSimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pOSimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next%2C-the-script-wil\">\r\n<li class=\"null\">Next, the script will ask if you want a randomly generated IP or if you want to manually set it.&nbsp; This guide will walk through both paths.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/zhIimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-set-ips---option-1-%28\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Set IPs - Option 1 (set random IPs).&nbsp; When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.&nbsp; The next menu is pictured below, but we\'ll get back to it later, after looking at the manual process.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/HOIimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HOIimage.png\" alt=\"image.png\"></a></p>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so. \r\n\r\nUse the following script to set up phishing attack on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"\r\n\r\n      \r\n\r\nThis will then ask to select a geo-location based IP, first select a country.  For this example we\'ll use China.\r\n\r\n         \r\n\r\nNext it will ask you to select a city, for this example we\'ll use Beijing.\r\n\r\n        \r\n\r\nNext, the script will ask if you want a randomly generated IP or if you want to manually set it.  This guide will walk through both paths.\r\n\r\n          \r\n\r\n\r\n\r\n\r\n\r\nSet IPs - Option 1 (set random IPs).  When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.  The next menu is pictured below, but we\'ll get back to it later, after looking at the manual process.\r\n\r\n\r\n\r\n\r\n\r\n                      \r\n ',1,'2023-04-04 01:59:18','2023-04-04 01:59:18','setting-up-a-phishing-attack','using-the-nrts','version','','',2),(77,18,'Setting up a Phishing Attack','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp;</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to set up phishing attack on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-then-ask-t\">\r\n<li class=\"null\">This will then ask to select a geo-location based IP, first select a country.&nbsp; For this example we\'ll use China. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2LTimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-you\">\r\n<li class=\"null\">Next it will ask you to select a city, for this example we\'ll use Beijing.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/pOSimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pOSimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-the-script-wil\">\r\n<li class=\"null\">Next, the script will ask if you want a randomly generated IP or if you want to manually set it.&nbsp; This guide will walk through both paths. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/zhIimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-set-ips---option-1-%28\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Set IPs - Option 1 (set random IPs).&nbsp; When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.&nbsp; The next menu is pictured below, but we\'ll get back to it later, after looking at the manual process.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/HOIimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HOIimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-set-ips---option-2-%28\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Set IPs - Option 2 (set IPs manually).&nbsp; When you select this option it will ask you to provide an IP.&nbsp; Before you can provide one, you will need to know what the is in the IP range based on the Geo-location you seleted.&nbsp; Enter \"s\" at the menu below to see a list of IP subnets to select an IP from. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/PKKimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit back to the IP input menu.&nbsp; For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ntHimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-type-%22q%22-and-hit-ent\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Type \"q\" and hit enter to exit the IP subnet list, then enter an IP&nbsp; that falls within the subnet you selected.&nbsp; NOTE: do not use the actual listed IP from the list. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HqFimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have set our IP either manually or randomly and have the next menu screen asking about how we want to assign DNS.&nbsp; Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Zjsimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assign-dns-%28option-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assign DNS (Option 1) Randomly - this option will assign random domain names during processing and will move on to the next step.</li>\r\n<li class=\"null\">Assign DNS (Option 2) Manually create domain name/s.&nbsp;&nbsp; Selecting this option will bring up&nbsp; the following menu.&nbsp; Here it asks for the domain you want to use, for this example we\'ll use goatfarmer.com&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ABNimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav-1\">\r\n<li class=\"null\">At this point we have assigned DNS, next the script will want a Tag to use to help identify your DNS later, like say after an engagement and you want to remove the DNS you had previously set up.&nbsp; For this example, we\'ll use \"test-DNS\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0yJimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has all the information it needs to set up for a phishing attack.&nbsp; Press enter at the screen below.<br>\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/7saimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Press enter.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/Bxbimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Bxbimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<p id=\"bkmrk-the-script-edits-the\">The script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.&nbsp; After this you use the scripts at /root/scripts/phish to send your phishing attack.&nbsp; In the /root/scripts/phish directory there are two scripts for sending phishing attacks.&nbsp; They are;<br></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F\">\r\n<li class=\"null\">/root/scripts/phish/phish.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a single email address.</li>\r\n<li class=\"null\">The script needs to be modifed for your attack.&nbsp;</li>\r\n<li class=\"null\">vi phish.sh</li>\r\n<li class=\"null\">The top lines set the \"From\" address. &nbsp; Edit the from and realname to match the domain you set up prior and whatever username you want. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/eUlimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/eUlimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n<li class=\"null\">Then the last line in the script is the phish.&nbsp; Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.&nbsp; If you don\'t have an attachment, delete out the \"-a /path\" from the line.&nbsp; Then at the end replace target@domain.com with the email address you want to send the phish to.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/xITimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xITimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F-1\">\r\n<li class=\"null\">/root/scripts/phish/spam.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a list of email addresses.&nbsp; This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.&nbsp; However, the only difference here is that you don\'t add the email addess of your target in the script.&nbsp; Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so. \r\n\r\nUse the following script to set up phishing attack on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"      \r\n\r\n\r\nThis will then ask to select a geo-location based IP, first select a country.  For this example we\'ll use China.         \r\n\r\n\r\nNext it will ask you to select a city, for this example we\'ll use Beijing.        \r\n\r\n\r\nNext, the script will ask if you want a randomly generated IP or if you want to manually set it.  This guide will walk through both paths.          \r\n\r\n\r\n\r\n\r\n\r\n\r\nSet IPs - Option 1 (set random IPs).  When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.  The next menu is pictured below, but we\'ll get back to it later, after looking at the manual process.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nSet IPs - Option 2 (set IPs manually).  When you select this option it will ask you to provide an IP.  Before you can provide one, you will need to know what the is in the IP range based on the Geo-location you seleted.  Enter \"s\" at the menu below to see a list of IP subnets to select an IP from.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit back to the IP input menu.  For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30                  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nType \"q\" and hit enter to exit the IP subnet list, then enter an IP  that falls within the subnet you selected.  NOTE: do not use the actual listed IP from the list.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have set our IP either manually or randomly and have the next menu screen asking about how we want to assign DNS.  Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths.                             \r\n\r\n\r\n\r\n\r\n\r\n\r\nAssign DNS (Option 1) Randomly - this option will assign random domain names during processing and will move on to the next step.\r\nAssign DNS (Option 2) Manually create domain name/s.   Selecting this option will bring up  the following menu.  Here it asks for the domain you want to use, for this example we\'ll use goatfarmer.com                \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have assigned DNS, next the script will want a Tag to use to help identify your DNS later, like say after an engagement and you want to remove the DNS you had previously set up.  For this example, we\'ll use \"test-DNS\"          \r\n\r\n\r\nFinally the script has all the information it needs to set up for a phishing attack.  Press enter at the screen below.\r\n\r\n\r\nPress enter.                           \r\n\r\nThe script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.  After this you use the scripts at /root/scripts/phish to send your phishing attack.  In the /root/scripts/phish directory there are two scripts for sending phishing attacks.  They are;\r\n\r\n/root/scripts/phish/phish.sh\r\n\r\nThis is used to send a phish to a single email address.\r\nThe script needs to be modifed for your attack. \r\nvi phish.sh\r\nThe top lines set the \"From\" address.   Edit the from and realname to match the domain you set up prior and whatever username you want.                          \r\n\r\n\r\nThen the last line in the script is the phish.  Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.  If you don\'t have an attachment, delete out the \"-a /path\" from the line.  Then at the end replace target@domain.com with the email address you want to send the phish to.\r\n\r\n\r\n\r\n\r\n\r\n/root/scripts/phish/spam.sh\r\n\r\nThis is used to send a phish to a list of email addresses.  This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.  However, the only difference here is that you don\'t add the email addess of your target in the script.  Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.\r\n\r\n\r\n\r\n ',1,'2023-04-04 17:13:41','2023-04-04 17:13:41','setting-up-a-phishing-attack','using-the-nrts','version','','',3),(78,19,'Managing Services','<p id=\"bkmrk-then-nrts-builds-red\">Then NRTS builds red team infrastructure in docker containers.&nbsp; These containers and services can be managed using the /root/scripts/buildredteam.sh.&nbsp; NOTE: phishing is currently the only service not build in a container, but the script will set up the NRTS host to be able to mimic a domain of your choosing for phishing attacks.&nbsp;</p>\r\n<ul id=\"bkmrk-to-view%2C-restart-or-\">\r\n<li class=\"null\">To View, restart or delete a NRTS red team infrastructure service run /root/scripts/buildredteam.sh to get the the menu below.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b0Yimage.png\" alt=\"image.png\"></li>\r\n<li class=\"null\">Then select option 6 - Container management.&nbsp; From this menu you can view, delete or start a saved container.&nbsp;\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/HCCimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HCCimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n</ul>','Then NRTS builds red team infrastructure in docker containers.  These containers and services can be managed using the /root/scripts/buildredteam.sh.  NOTE: phishing is currently the only service not build in a container, but the script will set up the NRTS host to be able to mimic a domain of your choosing for phishing attacks. \r\n\r\nTo View, restart or delete a NRTS red team infrastructure service run /root/scripts/buildredteam.sh to get the the menu below.                                                                                                                                                            \r\nThen select option 6 - Container management.  From this menu you can view, delete or start a saved container. \r\n\r\n\r\n',1,'2023-04-04 17:42:40','2023-04-04 17:42:40','managing-services','using-the-nrts','version','','Initial publish',1),(80,13,'Creating Cobalt Strike C2 Profiles','<h3 id=\"bkmrk-script-generated-cob\">Script generated Cobalt Strike Profiles</h3>\r\n<ul id=\"bkmrk-there-are-two-differ\">\r\n<li class=\"null\">There are two different solutions installed on the NRTS by default.&nbsp; These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.&nbsp; You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.&nbsp; One of the more common issues I\'ve seen is very slow download transfer rates through a beacon.&nbsp; After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.&nbsp; Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.&nbsp; So I would also advice testing this on your test target as well.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-c2concealer\">Using C2concealer</h4>\r\n<ul id=\"bkmrk-note%3A-c2concealer-is\">\r\n<li class=\"null\">NOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.</li>\r\n<li class=\"null\">There are two arguments that C2concealer accepts; --variants and --hostname.&nbsp; The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.&nbsp; I believe the max number of variants is 10, but I\'d advise setting this to 0.&nbsp; The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.&nbsp; c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.&nbsp; Below is a usage example.</li>\r\n</ul>\r\n<pre id=\"bkmrk-c2concealer---varian\"><code class=\"language-\">C2concealer --variants 0 --hostname humanzoo.com</code></pre>\r\n<p id=\"bkmrk-the-script-will-ask-\">The script will ask for an SSL option, these options are</p>\r\n<ul id=\"bkmrk-self-signed-ssl-cert\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Self-signed SSL cert</li>\r\n<li class=\"null\">LetsEncrypt SSL cert</li>\r\n<li class=\"null\">Existing Keystore</li>\r\n<li class=\"null\">No SSL</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If you plan on using a redirector, you can select \"No SSL\", the NRTS redirector will handle SSL certs for all the domains you use with it.&nbsp; If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.&nbsp; Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want to emulate in your engagement.&nbsp; The LetsEncrypt SSL cert will fail in this closed grayspace environment.</li>\r\n<li class=\"null\">Once you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;</li>\r\n</ul>\r\n<pre id=\"bkmrk-%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23\"><code class=\"language-\">############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################</code></pre>\r\n<ul id=\"bkmrk-it-saves-the-profile\">\r\n<li class=\"null\">It saves the profile with a \"randomly generated named\".profile in the directory you ran C2concealer from.&nbsp; The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.&nbsp; This directory is /root/Profiles.&nbsp; Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.</li>\r\n</ul>\r\n<pre id=\"bkmrk-mv-ba3e5732.profile-\"><code class=\"language-\">mv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/</code></pre>\r\n<ul id=\"bkmrk-at-this-point-the-pr\">\r\n<li class=\"null\">At this point the profile is ready to use, when you go to set up a Cobalt Strike teamserver on the NRTS, the script will see this profile and give you the option to select it.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-sourcepoint\">Using Sourcepoint</h4>\r\n<ul id=\"bkmrk-sourcepoint-isn%27t-ad\">\r\n<li class=\"null\">Sourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.</li>\r\n<li class=\"null\">Sourepoint has a larger number of arguments and gives you a lot more control.&nbsp; For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.</li>\r\n<li class=\"null\">Required Sourcepoint arguments.\r\n<ul>\r\n<li class=\"null\">-host&nbsp;&nbsp;\r\n<ul>\r\n<li class=\"null\">This is the host name it will add as a server variable in the profile</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Outfile\r\n<ul>\r\n<li class=\"null\">This is the name/path to save the profile as</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Injector\r\n<ul>\r\n<li class=\"null\">This is the process injection method, the script provides two options&nbsp;\r\n<ul>\r\n<li class=\"null\">VirtualAllocEx (Great for cross architecture i.e x86 -&gt; x64 and x64-&gt;x86)</li>\r\n<li class=\"null\">NtMapViewOfSection (A more stealthy option, however fails over to VirtualAllocEx)<br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example Usage</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fsourcepoint\"><code class=\"language-bash\">cd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx</code></pre>\r\n<ul id=\"bkmrk-output-will-look-lik\">\r\n<li class=\"null\">Output will look like.</li>\r\n</ul>\r\n<pre id=\"bkmrk-_____-____-_-__-%2F-__\"><code class=\"language-\">\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source</code></pre>\r\n<ul id=\"bkmrk-note%3A-the-profiles-g\">\r\n<li class=\"null\">NOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.&nbsp; So it\'s a good idea to test these profiles before trying to use them.&nbsp; Below is how to test it on a NRTS.</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fcobaltstrik\"><code class=\"language-bash\">cd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile</code></pre>\r\n<p id=\"bkmrk-%C2%A0\"></p>','Script generated Cobalt Strike Profiles\r\n\r\nThere are two different solutions installed on the NRTS by default.  These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.  You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.  One of the more common issues I\'ve seen is very slow download transfer rates through a beacon.  After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.  Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.  So I would also advice testing this on your test target as well.\r\n\r\nUsing C2concealer\r\n\r\nNOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.\r\nThere are two arguments that C2concealer accepts; --variants and --hostname.  The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.  I believe the max number of variants is 10, but I\'d advise setting this to 0.  The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.  c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.  Below is a usage example.\r\n\r\nC2concealer --variants 0 --hostname humanzoo.com\r\nThe script will ask for an SSL option, these options are\r\n\r\n\r\n\r\nSelf-signed SSL cert\r\nLetsEncrypt SSL cert\r\nExisting Keystore\r\nNo SSL\r\n\r\n\r\nIf you plan on using a redirector, you can select \"No SSL\", the NRTS redirector will handle SSL certs for all the domains you use with it.  If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.  Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want to emulate in your engagement.  The LetsEncrypt SSL cert will fail in this closed grayspace environment.\r\nOnce you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;\r\n\r\n############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################\r\n\r\nIt saves the profile with a \"randomly generated named\".profile in the directory you ran C2concealer from.  The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.  This directory is /root/Profiles.  Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.\r\n\r\nmv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/\r\n\r\nAt this point the profile is ready to use, when you go to set up a Cobalt Strike teamserver on the NRTS, the script will see this profile and give you the option to select it.\r\n\r\nUsing Sourcepoint\r\n\r\nSourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.\r\nSourepoint has a larger number of arguments and gives you a lot more control.  For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.\r\nRequired Sourcepoint arguments.\r\n\r\n-host  \r\n\r\nThis is the host name it will add as a server variable in the profile\r\n\r\n\r\n-Outfile\r\n\r\nThis is the name/path to save the profile as\r\n\r\n\r\n-Injector\r\n\r\nThis is the process injection method, the script provides two options \r\n\r\nVirtualAllocEx (Great for cross architecture i.e x86 -> x64 and x64->x86)\r\nNtMapViewOfSection (A more stealthy option, however fails over to VirtualAllocEx)\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample Usage\r\n\r\ncd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx\r\n\r\nOutput will look like.\r\n\r\n\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source\r\n\r\nNOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.  So it\'s a good idea to test these profiles before trying to use them.  Below is how to test it on a NRTS.\r\n\r\ncd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile\r\n',1,'2023-04-04 17:58:13','2023-04-04 17:58:13','creating-cobalt-strike-c2-profiles','using-the-nrts','version','','',3),(82,14,'Starting a Cobalt Strike Teamserver','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.&nbsp; This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.&nbsp; Doing so would create artifacts on any teamserver you build using the build script.&nbsp; That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.</p>\r\n<p id=\"bkmrk-also-this-guide-is-a\">Also this guide is assuming that you have already created a cobalt strike profile that you want to use.&nbsp; For this example, we will use humanzoo.profile as the profile we created.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example usage.</li>\r\n<li class=\"null\">\r\n<pre><code class=\"language-bash\">cd /root/scripts\r\n./buildredteam.sh</code></pre>\r\n</li>\r\n<li class=\"null\">This will pop up a text-based menu.&nbsp; At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, I\'ll leave it as the default.<br>\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/hGyimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hGyimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n<li class=\"null\">Next it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.&nbsp; Here you select what Geo-based IP you want to set up your teamserver with.&nbsp; For this example we\'ll use USA.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/N1Iimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/N1Iimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-next%2C-it-will-drill-\">\r\n<li class=\"null\">Next, it will drill down further with a City location, some only have one option, but the USA one has several.&nbsp; For this example, we\'ll use Seattle.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/KZNimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/KZNimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want randomly generated IPs or to set one manually.&nbsp; The guide will walk through screenshots for both options.&nbsp; For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.&nbsp; For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.&nbsp; It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/uPMimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uPMimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-setting-ips---option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; Below is a screenshot of when you selected option 1.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0-%C2%A0\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vgRimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-setting-ips---option-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; Then next few screenshots shows the manual IP process.&nbsp;&nbsp; Below is the menu when you selected option 2.&nbsp; At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0-%C2%A0\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0Ddimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-here-is-what-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Here is what option \"s\" looks like.&nbsp; This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP.&nbsp;</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/c2Fimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/c2Fimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-after-i%27ve-decided-w\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After I\'ve decided what subnet I want to use from the list above, I\'ll write it down or memorize it and then press \"q\" to exit out of the IP subnet view screen.&nbsp; From the list above for this example, I\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0-%C2%A0-%C2%A0-%C2%A0%C2%A0-%C2%A0%C2%A0%C2%A0%C2%A0\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iWuimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-wh\">\r\n<li class=\"null\">Next, it will ask what profile you want to use.&nbsp; It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.&nbsp; For this example, we\'ll use the humanzoo2.profile.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/JHKimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JHKimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a password to use.&nbsp; For this we\'ll set the password to toor.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3ybimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-at-this-point%2C-you%27v\">\r\n<li class=\"null\">At this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-1\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/JB2image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JB2image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-below-is-what-the-bu\">\r\n<li class=\"null\">Below is what the build process looks like.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/b00image.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b00image.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script exits and your Cobalt Strike teamserver should be up and running in a container.&nbsp; Information about the service is also placed in /root/services/TS1/ directory.&nbsp; To check your container, run docker ps, below is a screenshot of this.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/BAHimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/BAHimage.png\" alt=\"image.png\"></a></p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.  This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.  Doing so would create artifacts on any teamserver you build using the build script.  That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.\r\nAlso this guide is assuming that you have already created a cobalt strike profile that you want to use.  For this example, we will use humanzoo.profile as the profile we created.\r\n\r\nUse the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nExample usage.\r\n\r\ncd /root/scripts\r\n./buildredteam.sh\r\n\r\nThis will pop up a text-based menu.  At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"\r\n\r\n           \r\n\r\nNext it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, I\'ll leave it as the default.\r\n  \r\n\r\nNext it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.  Here you select what Geo-based IP you want to set up your teamserver with.  For this example we\'ll use USA.\r\n\r\n            \r\n\r\nNext, it will drill down further with a City location, some only have one option, but the USA one has several.  For this example, we\'ll use Seattle.\r\n\r\n              \r\n\r\nThen it will ask if you want randomly generated IPs or to set one manually.  The guide will walk through screenshots for both options.  For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.  For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.  It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.\r\n\r\n              \r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  Below is a screenshot of when you selected option 1.\r\n\r\n\r\n\r\n                    \r\n\r\n\r\n\r\nSetting IPs - Option 2 Set IPs manually.  Then next few screenshots shows the manual IP process.   Below is the menu when you selected option 2.  At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.\r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nHere is what option \"s\" looks like.  This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP. \r\n\r\n\r\n\r\n                 \r\n\r\n\r\n\r\nAfter I\'ve decided what subnet I want to use from the list above, I\'ll write it down or memorize it and then press \"q\" to exit out of the IP subnet view screen.  From the list above for this example, I\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet.\r\n\r\n\r\n\r\n                \r\n\r\nNext, it will ask what profile you want to use.  It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.  For this example, we\'ll use the humanzoo2.profile.\r\n\r\n           \r\n\r\nThen it will ask for a password to use.  For this we\'ll set the password to toor.\r\n\r\n            \r\n\r\nAt this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.\r\n\r\n           \r\n\r\nBelow is what the build process looks like.\r\n\r\n          \r\n\r\nAt this point the script exits and your Cobalt Strike teamserver should be up and running in a container.  Information about the service is also placed in /root/services/TS1/ directory.  To check your container, run docker ps, below is a screenshot of this.\r\n\r\n\r\n',1,'2023-04-04 18:00:18','2023-04-04 18:00:18','starting-a-cobalt-strike-teamserver','using-the-nrts','version','','',4),(84,14,'Starting a Cobalt Strike Teamserver','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.&nbsp; This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.&nbsp; Doing so would create artifacts on any teamserver you build using the build script.&nbsp; That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.</p>\r\n<p id=\"bkmrk-also-this-guide-is-a\">Also this guide is assuming that you have already created a cobalt strike profile that you want to use.&nbsp; For this example, we will use humanzoo.profile as the profile we created.&nbsp; For instructions on how to create Cobalt Strike C2 profiles go to -&gt; Using the NRTS -&gt; Creating Cobalt Strike C2 Profiles.<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example usage.</li>\r\n<li class=\"null\">\r\n<pre><code class=\"language-bash\">cd /root/scripts\r\n./buildredteam.sh</code></pre>\r\n</li>\r\n<li class=\"null\">This will pop up a text-based menu.&nbsp; At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, I\'ll leave it as the default.<br>\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hGyimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Next it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.&nbsp; Here you select what Geo-based IP you want to set up your teamserver with.&nbsp; For this example we\'ll use USA. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/N1Iimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-drill-\">\r\n<li class=\"null\">Next, it will drill down further with a City location, some only have one option, but the USA one has several.&nbsp; For this example, we\'ll use Seattle. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/KZNimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want a randomly generated IP or to set one manually.&nbsp; The guide will walk through screenshots for both options.&nbsp; For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.&nbsp; For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.&nbsp; It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uPMimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips---option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select option 1, it will add a random IP during processing so the menu will move to the next step.&nbsp; This will be shown after going through the manual process.</li>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; Then next few screenshots shows the manual IP process.&nbsp;&nbsp; Below is the menu when you selected option 2.&nbsp; At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0Ddimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-here-is-what-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Here is what option \"s\" looks like.&nbsp; This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/c2Fimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/c2Fimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-after-i%27ve-decided-w\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After you\'ve decided what subnet you want to use from the list above, write it down or memorize it and then press \"q\" and then \"enter\" to exit out of the IP subnet view screen.&nbsp; This will take you back to the previous menu.&nbsp; From the list above for this example, we\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iWuimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-wh\">\r\n<li class=\"null\">At this point you have either selected to randomly set an IP or set one manually.&nbsp; Next, it will ask what profile you want to use.&nbsp; It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.&nbsp; For this example, we\'ll use the humanzoo2.profile. &nbsp; &nbsp; &nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JHKimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a password to use.&nbsp; For this we\'ll set the password to toor.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3ybimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point%2C-you%27v\">\r\n<li class=\"null\">At this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JB2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-what-the-bu\">\r\n<li class=\"null\">Below is what the build process looks like.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/b00image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b00image.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script exits and your Cobalt Strike teamserver should be up and running in a container.&nbsp; Information about the service is also placed in /root/services/TS1/ directory.&nbsp; To check your container, run docker ps, below is a screenshot of this.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/BAHimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/BAHimage.png\" alt=\"image.png\"></a></p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.  This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.  Doing so would create artifacts on any teamserver you build using the build script.  That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.\r\nAlso this guide is assuming that you have already created a cobalt strike profile that you want to use.  For this example, we will use humanzoo.profile as the profile we created.  For instructions on how to create Cobalt Strike C2 profiles go to -> Using the NRTS -> Creating Cobalt Strike C2 Profiles.\r\n\r\nUse the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nExample usage.\r\n\r\ncd /root/scripts\r\n./buildredteam.sh\r\n\r\nThis will pop up a text-based menu.  At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, I\'ll leave it as the default.\r\n\r\n\r\nNext it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.  Here you select what Geo-based IP you want to set up your teamserver with.  For this example we\'ll use USA.                       \r\n\r\n\r\nNext, it will drill down further with a City location, some only have one option, but the USA one has several.  For this example, we\'ll use Seattle.              \r\n\r\n\r\nThen it will ask if you want a randomly generated IP or to set one manually.  The guide will walk through screenshots for both options.  For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.  For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.  It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select option 1, it will add a random IP during processing so the menu will move to the next step.  This will be shown after going through the manual process.\r\nSetting IPs - Option 2 Set IPs manually.  Then next few screenshots shows the manual IP process.   Below is the menu when you selected option 2.  At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.  \r\n\r\n\r\n\r\n\r\n\r\n\r\nHere is what option \"s\" looks like.  This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP.                                                                                                                \r\n\r\n\r\n\r\n\r\n\r\n\r\nAfter you\'ve decided what subnet you want to use from the list above, write it down or memorize it and then press \"q\" and then \"enter\" to exit out of the IP subnet view screen.  This will take you back to the previous menu.  From the list above for this example, we\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet. \r\n\r\n\r\n\r\n\r\nAt this point you have either selected to randomly set an IP or set one manually.  Next, it will ask what profile you want to use.  It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.  For this example, we\'ll use the humanzoo2.profile.      \r\n\r\n\r\nThen it will ask for a password to use.  For this we\'ll set the password to toor.\r\n\r\n\r\nAt this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.\r\n\r\n\r\nBelow is what the build process looks like.\r\n\r\n\r\nAt this point the script exits and your Cobalt Strike teamserver should be up and running in a container.  Information about the service is also placed in /root/services/TS1/ directory.  To check your container, run docker ps, below is a screenshot of this.\r\n\r\n\r\n',1,'2023-04-04 18:14:30','2023-04-04 18:14:30','starting-a-cobalt-strike-teamserver','using-the-nrts','version','','',5),(86,15,'Making a HAProxy Redirector','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains and doesn\'t match it will forward the traffic to a decoy website.</p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a HAProxy redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\" <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you RD1, or if there is already an RD1, it will give a default of RD2, and so on.&nbsp; You can keep the default name or add own own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, we\'ll leave it as the default of RD1. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/59Fimage.png\" alt=\"image.png\">&nbsp; <br></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for the number of IPs, the script limits this to 20 for sanity reasons.&nbsp; For this example, we\'ll use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vq2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a Geo-location to pull IP addresses from, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. For this example we\'ll use the UK.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6itimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-to-\">\r\n<li class=\"null\">Then it will ask to select a city, some have a few, but a lot only have one.&nbsp; For this example, we\'ll select London.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Ycfimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want to set IPs randomly or manually.&nbsp; This guide will walk through both processes. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/yTwimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips-%28random%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the menu will move on to the next step.&nbsp; This will be shown after going through the manual process.<br></li>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; The next few screenshots shows the manual IP process.&nbsp; Below is the menu when you select Set Ips manually.&nbsp; At this screen you can enter \"s\" to see a list of IP subnets to select IPs from.&nbsp; The blank menu items will store IPs as you add them in.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"><br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-using-the-%22s%22-option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Use the \"s\" option to see available subnets.&nbsp; This shows the available IP subnets based on the geo-location selections you made previously.&nbsp; The list is typically long, you can hit the spacebar to page down and press \"q\" then \"enter\" to exit out of the IP subnet view and go back to the previous menu.&nbsp; You can pick IPs from any of these subnets, so for this example, well use 12.9.80.129/25.&nbsp; Note you can pick IPs from multiple IP subnets from the list, you don\'t have to use just one IP subnet. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/Mc7image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Mc7image.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-after-pressing-%22q%22-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.&nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-then-enter-the-ip.\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Then enter the IP.</li>\r\n<li class=\"null\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jRdimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you-enter-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu.&nbsp; You should now see the IP you entered, continue these steps until you\'ve added IPs for all empty slots.&nbsp; Note:&nbsp; If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three. <a href=\"https://redbook.com/uploads/images/gallery/2023-04/gjaimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/gjaimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either set IPs randomly or manually, below is the next menu screen.&nbsp; Here it asks for what ports to redirect.&nbsp; For this example, we\'ll select HTTP, HTTPS <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pYCimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-once-selected%2C-it-wi\">\r\n<li class=\"null\">Once selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.&nbsp; This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure the Cobalt Strike Listener\'s \"Bind to\" address to do this.&nbsp; However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.&nbsp; To accept the default just press enter.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/XMHimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-abo\">\r\n<li class=\"null\">Next it will ask about changing the bind port for http, again you can do this or just leave it as default.&nbsp; Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6goimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-wha\">\r\n<li class=\"null\">Next it will ask what IP the redirect should be redirecting to.&nbsp; This should be your Cobalt Strike Teamserver IP. &nbsp; For this example we will be using 54.88.220.10.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/hXTimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hXTimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-whi\">\r\n<li class=\"null\">Then it will ask which Cobalt Strike profile to use.&nbsp; This need to be the same as the profile used to start the Cobalt Strike teamserver.&nbsp; The script will use information from the profile to build out ACLs.&nbsp; These ACLs are used to identify C2 traffic from other things hitting a redirector domain.&nbsp; If you select the wrong profile, your C2 will not work.&nbsp; For this example we will use the humanzoo2.profile.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uJUimage.png\" alt=\"image.png\"><br></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.&nbsp; NOTE: this has to be a site that exist in the range and is reachable.&nbsp; If you put in a domain that isn\'t reachable, the HAProxy will stop working.&nbsp; The default is set to redbook.com.&nbsp; We\'ll leave the default for this example.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/B4Aimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B4Aimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to create manual domains or have them randomly generated.&nbsp; If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.&nbsp; This guide will walk through both options. &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iTDimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assigning-domains-%28o\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains - Option 1 - (use randomly generated one/s).&nbsp; If we select option 1, the script moves will add these during processing and move on to the next step.&nbsp; We\'ll cover that after going through the manual process.<br></li>\r\n<li class=\"null\">Assigning Domains - Option 2 - (Manually create domain name/s).&nbsp; When you select option 2, you get the menu shown below.&nbsp; Here you pick an IP from the list and&nbsp; it will take you to a menu for entering a domain name for that IP.&nbsp; For this example will use option 1&nbsp; for IP 208.82.7.57<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2I5image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you-selected-an\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you selected an IP to add a domain for, you get the menu shown below.&nbsp; For this example we\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3UBimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-press-enter-on-the-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve added a domain named and pressed \"enter\" it takes you back to the original menu, but now you will see the domain you entered is populated next to the IP.&nbsp; Repeat this process for all IPs, and select \"d\" for done when you are finished. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Nxsimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point%2C-you-h\">\r\n<li class=\"null\">At this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a Tag for these domains.&nbsp; This tag is used by other scripts to identify who created these domains and/or what there purpose is.&nbsp; This will allow these domains to be deleted later like say after an engagement and you no longer need them.&nbsp; For this example, I\'ll use \"test-DNS\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dj9image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h7Iimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li class=\"null\">Below is a screenshot of the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vleimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-you-should-now-have-\">\r\n<li class=\"null\">You should now have a working redirector.&nbsp; The information regarding the redirector is located at /root/services/RD1.&nbsp; This directory will have you DNS information, IP information, where it\'s redirecting to, and the name of the C2 profile used .&nbsp; You can validate if your redirector is running by looking at docker.&nbsp; Run docker ps and you should see RD1 up and running.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dhEimage.png\" alt=\"image.png\"></li>\r\n</ul>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains and doesn\'t match it will forward the traffic to a decoy website.\r\nNOTE: This guide is assuming you already have a Cobalt Strike team server running.  \r\nFor this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.\r\n\r\nUse the following script to start a HAProxy redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\" \r\n\r\n\r\nNext it will ask for a service tag, by default it will give you RD1, or if there is already an RD1, it will give a default of RD2, and so on.  You can keep the default name or add own own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, we\'ll leave it as the default of RD1.                                                                                                                                  \r\n\r\n\r\nNext it will ask for the number of IPs, the script limits this to 20 for sanity reasons.  For this example, we\'ll use 5.\r\n\r\n\r\nThen it will ask for a Geo-location to pull IP addresses from, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. For this example we\'ll use the UK.  \r\n\r\n\r\nThen it will ask to select a city, some have a few, but a lot only have one.  For this example, we\'ll select London.\r\n\r\n\r\nThen it will ask if you want to set IPs randomly or manually.  This guide will walk through both processes. \r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select option 1, it will add random IPs during processing so the menu will move on to the next step.  This will be shown after going through the manual process.\r\nSetting IPs - Option 2 Set IPs manually.  The next few screenshots shows the manual IP process.  Below is the menu when you select Set Ips manually.  At this screen you can enter \"s\" to see a list of IP subnets to select IPs from.  The blank menu items will store IPs as you add them in.                                                                                                       \r\n\r\n\r\n\r\n\r\n\r\n\r\nUse the \"s\" option to see available subnets.  This shows the available IP subnets based on the geo-location selections you made previously.  The list is typically long, you can hit the spacebar to page down and press \"q\" then \"enter\" to exit out of the IP subnet view and go back to the previous menu.  You can pick IPs from any of these subnets, so for this example, well use 12.9.80.129/25.  Note you can pick IPs from multiple IP subnets from the list, you don\'t have to use just one IP subnet.                                                                                                                           \r\n\r\n\r\n\r\n\r\n\r\n\r\nAfter pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot. \r\n\r\n\r\n\r\n\r\n\r\n\r\nThen enter the IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu.  You should now see the IP you entered, continue these steps until you\'ve added IPs for all empty slots.  Note:  If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three. \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either set IPs randomly or manually, below is the next menu screen.  Here it asks for what ports to redirect.  For this example, we\'ll select HTTP, HTTPS \r\n\r\n\r\nOnce selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.  This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure the Cobalt Strike Listener\'s \"Bind to\" address to do this.  However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.  To accept the default just press enter.                      \r\n\r\n\r\nNext it will ask about changing the bind port for http, again you can do this or just leave it as default.  Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.\r\n\r\n\r\nNext it will ask what IP the redirect should be redirecting to.  This should be your Cobalt Strike Teamserver IP.   For this example we will be using 54.88.220.10.\r\n\r\n\r\nThen it will ask which Cobalt Strike profile to use.  This need to be the same as the profile used to start the Cobalt Strike teamserver.  The script will use information from the profile to build out ACLs.  These ACLs are used to identify C2 traffic from other things hitting a redirector domain.  If you select the wrong profile, your C2 will not work.  For this example we will use the humanzoo2.profile.\r\n\r\n\r\nNext it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.  NOTE: this has to be a site that exist in the range and is reachable.  If you put in a domain that isn\'t reachable, the HAProxy will stop working.  The default is set to redbook.com.  We\'ll leave the default for this example.          \r\n\r\n\r\nNext it will ask if you want to create manual domains or have them randomly generated.  If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.  This guide will walk through both options.          \r\n\r\n\r\n\r\n\r\nAssigning Domains - Option 1 - (use randomly generated one/s).  If we select option 1, the script moves will add these during processing and move on to the next step.  We\'ll cover that after going through the manual process.\r\nAssigning Domains - Option 2 - (Manually create domain name/s).  When you select option 2, you get the menu shown below.  Here you pick an IP from the list and  it will take you to a menu for entering a domain name for that IP.  For this example will use option 1  for IP 208.82.7.57\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you selected an IP to add a domain for, you get the menu shown below.  For this example we\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57.  \r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve added a domain named and pressed \"enter\" it takes you back to the original menu, but now you will see the domain you entered is populated next to the IP.  Repeat this process for all IPs, and select \"d\" for done when you are finished.           \r\n\r\n\r\n\r\n\r\nAt this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a Tag for these domains.  This tag is used by other scripts to identify who created these domains and/or what there purpose is.  This will allow these domains to be deleted later like say after an engagement and you no longer need them.  For this example, I\'ll use \"test-DNS\"\r\n\r\n\r\nFinally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.\r\n\r\n\r\nBelow is a screenshot of the build process.\r\n\r\n\r\nYou should now have a working redirector.  The information regarding the redirector is located at /root/services/RD1.  This directory will have you DNS information, IP information, where it\'s redirecting to, and the name of the C2 profile used .  You can validate if your redirector is running by looking at docker.  Run docker ps and you should see RD1 up and running.\r\n',1,'2023-04-04 18:44:47','2023-04-04 18:44:47','making-a-haproxy-redirector','using-the-nrts','version','','',8),(88,16,'Making a NGINX Redirector','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The NGINX redirector can be use with most C2 servers and can redirect DNS traffic.<br></p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike or other team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a teamserver running at 54.88.220.10<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a NGINX redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select Option 1 \"Set up a NGINX redirector (http,https, DNS)\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you RD1, or if there is already a RD1, it will give a default of RD2, and so on.&nbsp; You can keep the default or set your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, we\'ll leave the default of RD1.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/CBYimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-asks-for-the\">\r\n<li class=\"null\">Next it asks for the number of IPs.&nbsp; For the example we\'ll use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ApVimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a geo-location base for your setting your IP\'s.&nbsp; The NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. &nbsp; For this example we\'ll use option 4 Canada.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/RStimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-narrows-it-d\">\r\n<li class=\"null\">Then it narrows it down by city, for this example we\'ll use Toronto.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/VBWimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP manually or randomly.&nbsp; This guide will walk through both options.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Qhimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips-%281-set-r\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the menu will move on to the next step.&nbsp; This will be shown after going over the Manual IP option.</li>\r\n<li class=\"null\">Setting IPs&nbsp; - Option 2 set IPs Manually.&nbsp; Then next few screenshots shows the manual IP process. Below is the menu when you select option 2.&nbsp; At this screen you can enter \"s\" to see a list of IP subnets to select an IP from.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/bTcimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available Subnets\", you can use this information to select your IPs.&nbsp; This list can be long, use spacebar to page down, then enter \"q\" and press \"enter\" to exit out and get back to the previous menu.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/X3Rimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-using-the-list-of-av\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Using the list of available IP\'s you can use IP\'s out of any of these subnets, for this example I\'ll use 72.3.244.1/25 - but you can use multiple subnets from the list.&nbsp; Press \"q\" then \"enter\" to exit the IP subnet view and back at the manual IP menu.&nbsp; For this example, we\'ll select 1 for the first blank space.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/bTcimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-this-brings-up-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">This brings up the IP entry menu, for this example we\'ll use 72.3.244.20.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hdjimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-i-press-enter%2C-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve enter the IP and pressed enter, it goes back to the manual IP menu and now you see slot one is populated with the IP, continue this process until you\'ve filled all the blanks, then select \"d\" for done.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jJGimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-i-have\">\r\n<li class=\"null\">At this point I have either selected to IPs randomly or manually set IPs, which brings us to the next menu that asks what ports to redirect as shown below.&nbsp;&nbsp; For this example, we\'ll select option 4 for DNS, HTTP and HTTPS.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/rocimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to set a different port for the \"bind to\" this is related to a cobalt strike feature where you can have a listener set the \"bind to\" a different port.&nbsp; The payload you build will still use port 443 for example of a HTTPS payload, but the teamserver will listen on a different port like say 8443.&nbsp; You need a redirector to do something like this, however since the teamserver and redirectors are running in containers, there isn\'t really a need to do this.&nbsp; For this example we will leave it at the default.&nbsp; The screenshoot shows it asks this for each port being redirected.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/rtkimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for the IP to redirect to.&nbsp; This should be your C2 server\'s IP.&nbsp; For this example we are using a teamserver running on 54.88.220.10.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dp2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-want-to\">\r\n<li class=\"null\">Next it will want to set up DNS and it will give you the option for randomly generated DNS or will let you manually create your domain names.&nbsp; This is necessary whenever you select to redirect HTTPS, the script will need the domain names to generator the CA signed SSL certificates.&nbsp; The script will automatically connect to the CA server to get these signed so they can be used by the NGINX redirector.&nbsp; This guide will walk through both Random and manually domain options.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/LCiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assigning-domains-na\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning domains - Option 1 (Use randomly generated one/s).&nbsp; When you select this, the script will randomly generate domain names during processing, so it just moves on to the next menu.&nbsp; This will be shown after going over the Manual domain name option. &nbsp;&nbsp; <br></li>\r\n<li class=\"null\">Assigning domains - Option 2 (Manually create domain names/s).&nbsp; This will take you to the menu below.&nbsp; Note there is a list of IP\'s, you select a menu number next to an IP to set the domain for that IP.&nbsp; For this example, we\'ll set option 1 (205.225.141.68)<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/nkAimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-show-the-m\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">This will show the menu below where it asks for the domain name.&nbsp; Enter the domain you want to use for that IP and press enter.&nbsp; For this example, we\'ll use goatfarmer.com.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/J49image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you%27ve-entered-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve entered the domain and pressed enter it takes you back to the manual domain name menu, now you should see the domain populated next to the IP, repeat this process for all IPs and press \"d\" when you are finished.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/sbaimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either selected randomly generated domain names or completed adding domain names manual.&nbsp; Next the script will ask you to set a tag for your DNS.&nbsp; This is used to identify the domains later when you want to remove them.&nbsp; For this example, we\'ll use \"test-DNS\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xo4image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-now-the-script-has-a\">\r\n<li class=\"null\">Now the script has all the information it needs to build your NGINX redirector.&nbsp; Review the settings and if you are happy with it press enter to start the docker container build process. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ROCimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-shows-the-buil\">\r\n<li class=\"null\">Below shows the build process, you should now have a NGINX redirector.&nbsp; You can get information about it from the /root/services/RD1 folder. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HDTimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-to-check-that-your-c\">\r\n<li class=\"null\">To check that your container is running run docker ps, you should see a container running with the \"Docker service Tag\" from above.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/4KAimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/4KAimage.png\" alt=\"image.png\"></a></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The NGINX redirector can be use with most C2 servers and can redirect DNS traffic.\r\nNOTE: This guide is assuming you already have a Cobalt Strike or other team server running.  \r\nFor this example, we\'ll assume we have a teamserver running at 54.88.220.10\r\n\r\nUse the following script to start a NGINX redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select Option 1 \"Set up a NGINX redirector (http,https, DNS)\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you RD1, or if there is already a RD1, it will give a default of RD2, and so on.  You can keep the default or set your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, we\'ll leave the default of RD1.\r\n\r\n\r\nNext it asks for the number of IPs.  For the example we\'ll use 5.\r\n\r\n\r\nNext it will ask for a geo-location base for your setting your IP\'s.  The NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.   For this example we\'ll use option 4 Canada.\r\n\r\n\r\nThen it narrows it down by city, for this example we\'ll use Toronto.\r\n\r\n\r\nNext, it will ask if you want to set IP manually or randomly.  This guide will walk through both options.\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 set random IPs.  When you select option 1, it will add random IPs during processing so the menu will move on to the next step.  This will be shown after going over the Manual IP option.\r\nSetting IPs  - Option 2 set IPs Manually.  Then next few screenshots shows the manual IP process. Below is the menu when you select option 2.  At this screen you can enter \"s\" to see a list of IP subnets to select an IP from.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available Subnets\", you can use this information to select your IPs.  This list can be long, use spacebar to page down, then enter \"q\" and press \"enter\" to exit out and get back to the previous menu.                                                                                                                                                 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nUsing the list of available IP\'s you can use IP\'s out of any of these subnets, for this example I\'ll use 72.3.244.1/25 - but you can use multiple subnets from the list.  Press \"q\" then \"enter\" to exit the IP subnet view and back at the manual IP menu.  For this example, we\'ll select 1 for the first blank space.  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThis brings up the IP entry menu, for this example we\'ll use 72.3.244.20.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve enter the IP and pressed enter, it goes back to the manual IP menu and now you see slot one is populated with the IP, continue this process until you\'ve filled all the blanks, then select \"d\" for done.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point I have either selected to IPs randomly or manually set IPs, which brings us to the next menu that asks what ports to redirect as shown below.   For this example, we\'ll select option 4 for DNS, HTTP and HTTPS.\r\n\r\n\r\nNext it will ask if you want to set a different port for the \"bind to\" this is related to a cobalt strike feature where you can have a listener set the \"bind to\" a different port.  The payload you build will still use port 443 for example of a HTTPS payload, but the teamserver will listen on a different port like say 8443.  You need a redirector to do something like this, however since the teamserver and redirectors are running in containers, there isn\'t really a need to do this.  For this example we will leave it at the default.  The screenshoot shows it asks this for each port being redirected.\r\n\r\n\r\nNext it will ask for the IP to redirect to.  This should be your C2 server\'s IP.  For this example we are using a teamserver running on 54.88.220.10.\r\n\r\n\r\nNext it will want to set up DNS and it will give you the option for randomly generated DNS or will let you manually create your domain names.  This is necessary whenever you select to redirect HTTPS, the script will need the domain names to generator the CA signed SSL certificates.  The script will automatically connect to the CA server to get these signed so they can be used by the NGINX redirector.  This guide will walk through both Random and manually domain options.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning domains - Option 1 (Use randomly generated one/s).  When you select this, the script will randomly generate domain names during processing, so it just moves on to the next menu.  This will be shown after going over the Manual domain name option.    \r\nAssigning domains - Option 2 (Manually create domain names/s).  This will take you to the menu below.  Note there is a list of IP\'s, you select a menu number next to an IP to set the domain for that IP.  For this example, we\'ll set option 1 (205.225.141.68)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThis will show the menu below where it asks for the domain name.  Enter the domain you want to use for that IP and press enter.  For this example, we\'ll use goatfarmer.com.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve entered the domain and pressed enter it takes you back to the manual domain name menu, now you should see the domain populated next to the IP, repeat this process for all IPs and press \"d\" when you are finished.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either selected randomly generated domain names or completed adding domain names manual.  Next the script will ask you to set a tag for your DNS.  This is used to identify the domains later when you want to remove them.  For this example, we\'ll use \"test-DNS\"\r\n\r\n\r\nNow the script has all the information it needs to build your NGINX redirector.  Review the settings and if you are happy with it press enter to start the docker container build process. \r\n\r\n\r\nBelow shows the build process, you should now have a NGINX redirector.  You can get information about it from the /root/services/RD1 folder.                     \r\n\r\n\r\nTo check that your container is running run docker ps, you should see a container running with the \"Docker service Tag\" from above.\r\n\r\n',1,'2023-04-04 19:05:32','2023-04-04 19:05:32','making-a-nginx-redirector','using-the-nrts','version','','',3),(90,17,'Building a Payload Host','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp;</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Payload Host on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-then-ask-y\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you P1, or if there is already a P1, it will give a default of P2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates at /root/services for its docker container build and also the name of the container itself.&nbsp; For this example, we\'ll leave it as the default of P1.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jICimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.&nbsp; For this example we will use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/E0aimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a geo-location for your IPs.&nbsp; The NRTS has a list of IP Subnets stored in a Geo-location folder structure at /root/backbonerouters.&nbsp; For this example, we\'ll set our geolocation to option 7 - France. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hzximage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a city, some options have a few and some only have one.&nbsp; For example France only has one, so we\'ll select 1 -Paris since there isn\'t another option.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/UQkimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP\'s randomly or manually.&nbsp; This guide will walk through both paths.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Pysimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ip%27s-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IP\'s - Option 1 Set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the script will move on to the next step.&nbsp; We\'ll cover that after going over the manual IP process.</li>\r\n<li class=\"null\">Setting IP\'s - Option 2 Set IPs manually.&nbsp; When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.&nbsp; Select a blank option to get to the IP input screen.&nbsp; First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3Qyimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available subnets\".&nbsp; This can be a long list, use spacebar to page down then&nbsp; press \"q\" followed by \"enter\" to exit out of the subnet view and get back to the previous menu.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qstimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-now-that-we-know-wha\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Now that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.&nbsp; You can use any IP from the list of subnets and pull IPs from multiple subnets.&nbsp; Back at the manual IP menu, we\'ll select option 1 for the first blank spot.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3Qyimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-%C2%A0then-at-the-ip-entr\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">&nbsp;Then at the IP entry menu below we\'ll&nbsp; put in 184.84.181.201.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/GViimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-when-i-press-enter-f\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve entered an IP and pressed enter, it will take you back to the manual IP menu, only now the blank at option one is populated with the IP you just entered.&nbsp; Repeat this for all blanks and then press \"d\" when you are done.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/EYoimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-you-ha\">\r\n<li class=\"null\">At this point you have either selected to set IP\'s Randomly or have completed entering manual IPs.&nbsp; This brings you to the next menu.&nbsp; Here it asks you how you want to assign DNS.&nbsp; You can select random or manual, this guide will walk you through both paths.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/9nzimage.png\" alt=\"image.png\"> &nbsp;</li>\r\n</ul>\r\n<ul id=\"bkmrk-assign-dns-option-1-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains -&nbsp; Option 1 use randomly generated one/s.&nbsp; When you select this, the script will generate random domains during processing and it will move on to the next step.&nbsp; This will be covered after walking through the manual DNS option.<br></li>\r\n<li class=\"null\">Assigning Domains -&nbsp; Option 2 Manually create domain name/s.&nbsp; This will take you to a new menu that shows a list of IPs.&nbsp; Here you select an IP and then it will ask you to enter the domain name to use for that IP.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HNlimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-for-this-example-we%27\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">For this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name entry menu below.&nbsp; Then we\'ll use goatfarmer.com for that IP.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h9Rimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-we-enter-the-do\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.&nbsp; Repeat this process for all IP\'s press \"d\" when complete.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Mtimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-you-ha-1\">\r\n<li class=\"null\">At this point you have either selected to have domain names created Randomly&nbsp; or have completed the manual domain name process.&nbsp; Next the script will ask you for a DNS tag.&nbsp; This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.&nbsp; For this example we\'ll use \"test-DNS\".<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/aUSimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/YcJimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho-1\">\r\n<li class=\"null\">Below is a screenshot of the build process.&nbsp; After its complete information about the payload host service is located at /root/services/P1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dDwimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-you-can-check-that-y\">\r\n<li class=\"null\">You can check that your payload host container is running by running docker ps.&nbsp; You should see a container named P1 or whatever you set as the Docker Service Tag.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dj1image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-to-add-payloads\">\r\n<li class=\"null\">Then to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.&nbsp; Note: if you set a custom service tag go there, ex.&nbsp; /root/services/&lt;docker service tag&gt;/WWW.</li>\r\n</ul>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so. \r\n\r\nUse the following script to start a Payload Host on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you P1, or if there is already a P1, it will give a default of P2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates at /root/services for its docker container build and also the name of the container itself.  For this example, we\'ll leave it as the default of P1.\r\n\r\n\r\nNext it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.  For this example we will use 5.\r\n\r\n\r\nThen it will ask for a geo-location for your IPs.  The NRTS has a list of IP Subnets stored in a Geo-location folder structure at /root/backbonerouters.  For this example, we\'ll set our geolocation to option 7 - France. \r\n\r\n\r\nNext it will ask for a city, some options have a few and some only have one.  For example France only has one, so we\'ll select 1 -Paris since there isn\'t another option.\r\n\r\n\r\nNext, it will ask if you want to set IP\'s randomly or manually.  This guide will walk through both paths.\r\n\r\n\r\n\r\n\r\n\r\n\r\nSetting IP\'s - Option 1 Set random IPs.  When you select option 1, it will add random IPs during processing so the script will move on to the next step.  We\'ll cover that after going over the manual IP process.\r\nSetting IP\'s - Option 2 Set IPs manually.  When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.  Select a blank option to get to the IP input screen.  First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available subnets\".  This can be a long list, use spacebar to page down then  press \"q\" followed by \"enter\" to exit out of the subnet view and get back to the previous menu.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nNow that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.  You can use any IP from the list of subnets and pull IPs from multiple subnets.  Back at the manual IP menu, we\'ll select option 1 for the first blank spot.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n Then at the IP entry menu below we\'ll  put in 184.84.181.201.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve entered an IP and pressed enter, it will take you back to the manual IP menu, only now the blank at option one is populated with the IP you just entered.  Repeat this for all blanks and then press \"d\" when you are done.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point you have either selected to set IP\'s Randomly or have completed entering manual IPs.  This brings you to the next menu.  Here it asks you how you want to assign DNS.  You can select random or manual, this guide will walk you through both paths.                                           \r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning Domains -  Option 1 use randomly generated one/s.  When you select this, the script will generate random domains during processing and it will move on to the next step.  This will be covered after walking through the manual DNS option.\r\nAssigning Domains -  Option 2 Manually create domain name/s.  This will take you to a new menu that shows a list of IPs.  Here you select an IP and then it will ask you to enter the domain name to use for that IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nFor this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name entry menu below.  Then we\'ll use goatfarmer.com for that IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.  Repeat this process for all IP\'s press \"d\" when complete.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point you have either selected to have domain names created Randomly  or have completed the manual domain name process.  Next the script will ask you for a DNS tag.  This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.  For this example we\'ll use \"test-DNS\".\r\n\r\n\r\nAt this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.\r\n\r\n\r\nBelow is a screenshot of the build process.  After its complete information about the payload host service is located at /root/services/P1.                                                                               \r\n\r\n\r\nYou can check that your payload host container is running by running docker ps.  You should see a container named P1 or whatever you set as the Docker Service Tag.\r\n\r\n\r\n\r\nThen to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.  Note: if you set a custom service tag go there, ex.  /root/services/<docker service tag>/WWW.\r\n',1,'2023-04-04 19:24:08','2023-04-04 19:24:08','building-a-payload-host','using-the-nrts','version','','',4),(92,18,'Setting up a Phishing Attack','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The Phishing attack option doesn\'t build a docker container.&nbsp; Instead it sets up the NRTS host to perform the phishing attack.&nbsp; This step is just preparing the NRTS to mimic a domain for sending the phish.<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to set up phishing attack on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-then-ask-t\">\r\n<li class=\"null\">This will then ask to select a geo-location based IP, first select a country.&nbsp; For this example we\'ll use China. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2LTimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-you\">\r\n<li class=\"null\">Next it will ask you to select a city, for this example we\'ll use Beijing.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/pOSimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pOSimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-the-script-wil\">\r\n<li class=\"null\">Next, the script will ask if you want a randomly generated IP or if you want to manually set it.&nbsp; This guide will walk through both paths. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/zhIimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-set-ips---option-1-%28\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.&nbsp; This will be shown after going over the set IPs manually process.</li>\r\n<li class=\"null\">Setting&nbsp; IPs - Option 2 Set IPs manually.&nbsp; When you select this option it will ask you to provide an IP.&nbsp; Before you can provide one, you will need to know what what IP subnets are available for the Geo-location you previously selected.&nbsp; Enter \"s\" at the menu below to see a list of IP subnets. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/PKKimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit out of thte IP subnet view and get back to the IP input menu.&nbsp; For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ntHimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-type-%22q%22-and-hit-ent\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Type \"q\" and hit enter to exit the IP subnet list, then enter an IP that falls within the subnet you selected.&nbsp; NOTE: do not use the actual listed IP from the list. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HqFimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have set our selected to get a randomly generated IP or set it manually.&nbsp; The next menu screen asks how we want to assign our Domain name.&nbsp; Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Zjsimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assign-dns-%28option-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domain names -&nbsp; Option 1 Use randomly generated one/s.&nbsp; This option will assign random domain names during processing and will move on to the next step.&nbsp; We\'ll cover that after going over the manual domain name option.<br></li>\r\n<li class=\"null\">Assigning Domain names - Option 2 Manually create domain name/s.&nbsp;&nbsp; Selecting this option will bring up&nbsp; the following menu.&nbsp; It will ask for the domain you want to use, for this example we\'ll use goatfarmer.com. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ABNimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav-1\">\r\n<li class=\"null\">At this point we have either selected to have a domain name generated randomly or we manually set a domain name.&nbsp; The script will then want a Tag for your DNS.&nbsp; This tag is used to identify your DNS later, like say after an engagement and you want to remove the the DNS records used.&nbsp; For this example, we\'ll use \"test-DNS\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0yJimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has all the information it needs to set up for a phishing attack.&nbsp; Press enter at the screen below.<br>\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/7saimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Below is a screenshot of the phish preparation build.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Bxbimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<p id=\"bkmrk-the-script-edits-the\">The script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.&nbsp; After this you use the scripts at /root/scripts/phish to send your phishing attack.&nbsp; In the /root/scripts/phish directory there are two scripts for sending phishing attacks.&nbsp; They are phish.sh and spam.sh.&nbsp; Below is some information on what to modify in these scripts for your attack.<br></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F\">\r\n<li class=\"null\">/root/scripts/phish/phish.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a single email address.</li>\r\n<li class=\"null\">The script needs to be modified for your attack.&nbsp;</li>\r\n<li class=\"null\">vi phish.sh</li>\r\n<li class=\"null\">The top lines set the \"From\" address. &nbsp; Edit the from and realname to match the domain you set up prior and whatever username you want. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/eUlimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/eUlimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n<li class=\"null\">Then the last line in the script is the phish.&nbsp; Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.&nbsp; If you don\'t have an attachment, delete out the \"-a /path\" from the line.&nbsp; Then at the end replace target@domain.com with the email address you want to send the phish to.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/xITimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xITimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F-1\">\r\n<li class=\"null\">/root/scripts/phish/spam.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a list of email addresses.&nbsp; This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.&nbsp; The only difference here is that you don\'t add the target email address in the script.&nbsp; Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The Phishing attack option doesn\'t build a docker container.  Instead it sets up the NRTS host to perform the phishing attack.  This step is just preparing the NRTS to mimic a domain for sending the phish.\r\n\r\nUse the following script to set up phishing attack on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"      \r\n\r\n\r\nThis will then ask to select a geo-location based IP, first select a country.  For this example we\'ll use China.         \r\n\r\n\r\nNext it will ask you to select a city, for this example we\'ll use Beijing.        \r\n\r\n\r\nNext, the script will ask if you want a randomly generated IP or if you want to manually set it.  This guide will walk through both paths.          \r\n\r\n\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.  This will be shown after going over the set IPs manually process.\r\nSetting  IPs - Option 2 Set IPs manually.  When you select this option it will ask you to provide an IP.  Before you can provide one, you will need to know what what IP subnets are available for the Geo-location you previously selected.  Enter \"s\" at the menu below to see a list of IP subnets.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit out of thte IP subnet view and get back to the IP input menu.  For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30                                                                                                                                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nType \"q\" and hit enter to exit the IP subnet list, then enter an IP that falls within the subnet you selected.  NOTE: do not use the actual listed IP from the list.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have set our selected to get a randomly generated IP or set it manually.  The next menu screen asks how we want to assign our Domain name.  Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths.                             \r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning Domain names -  Option 1 Use randomly generated one/s.  This option will assign random domain names during processing and will move on to the next step.  We\'ll cover that after going over the manual domain name option.\r\nAssigning Domain names - Option 2 Manually create domain name/s.   Selecting this option will bring up  the following menu.  It will ask for the domain you want to use, for this example we\'ll use goatfarmer.com. \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either selected to have a domain name generated randomly or we manually set a domain name.  The script will then want a Tag for your DNS.  This tag is used to identify your DNS later, like say after an engagement and you want to remove the the DNS records used.  For this example, we\'ll use \"test-DNS\"          \r\n\r\n\r\nFinally the script has all the information it needs to set up for a phishing attack.  Press enter at the screen below.\r\n\r\n\r\nBelow is a screenshot of the phish preparation build.\r\n\r\nThe script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.  After this you use the scripts at /root/scripts/phish to send your phishing attack.  In the /root/scripts/phish directory there are two scripts for sending phishing attacks.  They are phish.sh and spam.sh.  Below is some information on what to modify in these scripts for your attack.\r\n\r\n/root/scripts/phish/phish.sh\r\n\r\nThis is used to send a phish to a single email address.\r\nThe script needs to be modified for your attack. \r\nvi phish.sh\r\nThe top lines set the \"From\" address.   Edit the from and realname to match the domain you set up prior and whatever username you want.                          \r\n\r\n\r\nThen the last line in the script is the phish.  Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.  If you don\'t have an attachment, delete out the \"-a /path\" from the line.  Then at the end replace target@domain.com with the email address you want to send the phish to.\r\n\r\n\r\n\r\n\r\n\r\n/root/scripts/phish/spam.sh\r\n\r\nThis is used to send a phish to a list of email addresses.  This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.  The only difference here is that you don\'t add the target email address in the script.  Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.\r\n\r\n\r\n\r\n',1,'2023-04-04 19:38:37','2023-04-04 19:38:37','setting-up-a-phishing-attack','using-the-nrts','version','','',4),(94,3,'Network Diagram Notes','<p id=\"bkmrk-si-router---this-is-\">SI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.&nbsp; It has 4 interfaces that connect to the following virtual switches.</p>\r\n<ul id=\"bkmrk-servicesnet---the-si\">\r\n<li class=\"null\">ServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.</li>\r\n<li class=\"null\">Grayspace - The SI-Router will router apprx 1500 IP subnets.&nbsp; These subnets are organized by geo-locations on the NRTS server.&nbsp; To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.&nbsp; The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.</li>\r\n<li class=\"null\">AdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet</li>\r\n<li class=\"null\">RangeWAN - This is where you will connect target domains to the Cyber Range environment.</li>\r\n</ul>\r\n<p id=\"bkmrk-servicenet---esxi-sw\">ServiceNet - ESXI switch that connects to the SI router.&nbsp; Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.</p>\r\n<ul id=\"bkmrk-rootdns---this-is-th\">\r\n<li class=\"null\">RootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.&nbsp; Additionally it has Googles 8.8.8.8 IP address.&nbsp; This server is used for managing grayspace DNS.&nbsp; You can register DNS manually or use the automation scripts build on the NRTS server.&nbsp; For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.</li>\r\n<li class=\"null\">Web-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.&nbsp; These services are build in docker containers and provide the following;\r\n<ul>\r\n<li class=\"null\">Redbook.com - This the bookstack app you are currently looking at.&nbsp; This is used for documentation and covers an overview of the Cyber Range environment.&nbsp; You can also expand upon this with your own documentation for whatever.</li>\r\n<li class=\"null\">dropbox.com - This is an owncloud server to simulated a cloud based file hosting service.&nbsp; It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.&nbsp; See the OPFOR section for some methods.</li>\r\n<li class=\"null\">pastebin.com - This is a haste bin server to simulated the real world pastebin.&nbsp; This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.</li>\r\n<li class=\"null\">diagrams.net - This is draw.io and used for generating whatever diagram you want.&nbsp; Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">CA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.&nbsp; In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.&nbsp; Once that is done, any certs you create with the CA-Server will appear as trusted.&nbsp; For how to generate SSL certs as well as code signing binarys, see CA-Server details.</li>\r\n<li class=\"null\">Traffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.&nbsp; See Traffic-Gen details for more information on this.</li>\r\n<li class=\"null\">Traffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.&nbsp; This exists to allow&nbsp; Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.</li>\r\n</ul>\r\n<p id=\"bkmrk-grayspace---this-is-\">Grayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.&nbsp; By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.&nbsp; Feel free to add whatever else you want.&nbsp;</p>\r\n<ul id=\"bkmrk-nrts-%28not-red-team-s\">\r\n<li class=\"null\">NRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.&nbsp; See NRTS for more details.</li>\r\n<li class=\"null\">Kali - basic kali build, add whatever tools you want.</li>\r\n<li class=\"null\">FlareVM - basic windows VM, but I would advise installing Visual Studios.</li>\r\n</ul>\r\n<p id=\"bkmrk-adminnet---this-is-a\">AdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.&nbsp; There are main servers on this network, AdminNet-DHCP and IA-Proxy.&nbsp; Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.</p>\r\n<ul id=\"bkmrk-adminnet-dhcp---prov\">\r\n<li class=\"null\">Adminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.&nbsp; For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.</li>\r\n<li class=\"null\">IA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.&nbsp; To access real world internet from any VM in the cyber range, just set the proxy to <a href=\"http://172.30.0.2:9999\">http://172.30.0.2:9999</a></li>\r\n</ul>\r\n<p id=\"bkmrk-rangewan---this-is-f\">RangeWAN - This is for connection one or more target domains to the cyber range.&nbsp; Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.&nbsp; Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.&nbsp; More specific details are explained in the target range planning section</p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','SI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.  It has 4 interfaces that connect to the following virtual switches.\r\n\r\nServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.\r\nGrayspace - The SI-Router will router apprx 1500 IP subnets.  These subnets are organized by geo-locations on the NRTS server.  To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.  The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.\r\nAdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet\r\nRangeWAN - This is where you will connect target domains to the Cyber Range environment.\r\n\r\nServiceNet - ESXI switch that connects to the SI router.  Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.\r\n\r\nRootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.  Additionally it has Googles 8.8.8.8 IP address.  This server is used for managing grayspace DNS.  You can register DNS manually or use the automation scripts build on the NRTS server.  For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.\r\nWeb-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.  These services are build in docker containers and provide the following;\r\n\r\nRedbook.com - This the bookstack app you are currently looking at.  This is used for documentation and covers an overview of the Cyber Range environment.  You can also expand upon this with your own documentation for whatever.\r\ndropbox.com - This is an owncloud server to simulated a cloud based file hosting service.  It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.  See the OPFOR section for some methods.\r\npastebin.com - This is a haste bin server to simulated the real world pastebin.  This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.\r\ndiagrams.net - This is draw.io and used for generating whatever diagram you want.  Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.\r\n\r\n\r\nCA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.  In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.  Once that is done, any certs you create with the CA-Server will appear as trusted.  For how to generate SSL certs as well as code signing binarys, see CA-Server details.\r\nTraffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.  See Traffic-Gen details for more information on this.\r\nTraffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.  This exists to allow  Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.\r\n\r\nGrayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.  By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.  Feel free to add whatever else you want. \r\n\r\nNRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.  See NRTS for more details.\r\nKali - basic kali build, add whatever tools you want.\r\nFlareVM - basic windows VM, but I would advise installing Visual Studios.\r\n\r\nAdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.  There are main servers on this network, AdminNet-DHCP and IA-Proxy.  Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.\r\n\r\nAdminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.  For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.\r\nIA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.  To access real world internet from any VM in the cyber range, just set the proxy to http://172.30.0.2:9999\r\n\r\nRangeWAN - This is for connection one or more target domains to the cyber range.  Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.  Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.  More specific details are explained in the target range planning section\r\n',1,'2023-04-04 20:30:23','2023-04-04 20:30:23','network-diagram-notes','network-overview','version','','',3),(95,2,'Network Diagram','<div drawio-diagram=\"15\" id=\"bkmrk-\" contenteditable=\"false\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-04/drawing-1-1680524770.png\"></div>\r\n<h3 id=\"bkmrk-network-diagram-note\">Network Diagram Notes</h3>\r\n<p id=\"bkmrk-si-router---this-is-\">SI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.&nbsp; It has 4 interfaces that connect to the following virtual switches.</p>\r\n<ul id=\"bkmrk-servicesnet---the-si\">\r\n<li class=\"null\">ServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.</li>\r\n<li class=\"null\">Grayspace - The SI-Router will router apprx 1500 IP subnets.&nbsp; These subnets are organized by geo-locations on the NRTS server.&nbsp; To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.&nbsp; The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.</li>\r\n<li class=\"null\">AdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet</li>\r\n<li class=\"null\">RangeWAN - This is where you will connect target domains to the Cyber Range environment.</li>\r\n</ul>\r\n<p id=\"bkmrk-servicenet---esxi-sw\">ServiceNet - ESXI switch that connects to the SI router.&nbsp; Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.</p>\r\n<ul id=\"bkmrk-rootdns---this-is-th\">\r\n<li class=\"null\">RootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.&nbsp; Additionally it has Googles 8.8.8.8 IP address.&nbsp; This server is used for managing grayspace DNS.&nbsp; You can register DNS manually or use the automation scripts build on the NRTS server.&nbsp; For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.</li>\r\n<li class=\"null\">Web-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.&nbsp; These services are build in docker containers and provide the following;\r\n<ul>\r\n<li class=\"null\">Redbook.com - This the bookstack app you are currently looking at.&nbsp; This is used for documentation and covers an overview of the Cyber Range environment.&nbsp; You can also expand upon this with your own documentation for whatever.</li>\r\n<li class=\"null\">dropbox.com - This is an owncloud server to simulated a cloud based file hosting service.&nbsp; It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.&nbsp; See the OPFOR section for some methods.</li>\r\n<li class=\"null\">pastebin.com - This is a haste bin server to simulated the real world pastebin.&nbsp; This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.</li>\r\n<li class=\"null\">diagrams.net - This is draw.io and used for generating whatever diagram you want.&nbsp; Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">CA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.&nbsp; In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.&nbsp; Once that is done, any certs you create with the CA-Server will appear as trusted.&nbsp; For how to generate SSL certs as well as code signing binarys, see CA-Server details.</li>\r\n<li class=\"null\">Traffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.&nbsp; See Traffic-Gen details for more information on this.</li>\r\n<li class=\"null\">Traffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.&nbsp; This exists to allow&nbsp; Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.</li>\r\n</ul>\r\n<p id=\"bkmrk-grayspace---this-is-\">Grayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.&nbsp; By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.&nbsp; Feel free to add whatever else you want.&nbsp;</p>\r\n<ul id=\"bkmrk-nrts-%28not-red-team-s\">\r\n<li class=\"null\">NRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.&nbsp; See NRTS for more details.</li>\r\n<li class=\"null\">Kali - basic kali build, add whatever tools you want.</li>\r\n<li class=\"null\">FlareVM - basic windows VM, but I would advise installing Visual Studios.</li>\r\n</ul>\r\n<p id=\"bkmrk-adminnet---this-is-a\">AdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.&nbsp; There are main servers on this network, AdminNet-DHCP and IA-Proxy.&nbsp; Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.</p>\r\n<ul id=\"bkmrk-adminnet-dhcp---prov\">\r\n<li class=\"null\">Adminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.&nbsp; For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.</li>\r\n<li class=\"null\">IA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.&nbsp; To access real world internet from any VM in the cyber range, just set the proxy to <a href=\"http://172.30.0.2:9999\">http://172.30.0.2:9999</a></li>\r\n</ul>\r\n<p id=\"bkmrk-rangewan---this-is-f\">RangeWAN - This is for connection one or more target domains to the cyber range.&nbsp; Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.&nbsp; Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.&nbsp; More specific details are explained in the target range planning section</p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','\r\nNetwork Diagram Notes\r\nSI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.  It has 4 interfaces that connect to the following virtual switches.\r\n\r\nServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.\r\nGrayspace - The SI-Router will router apprx 1500 IP subnets.  These subnets are organized by geo-locations on the NRTS server.  To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.  The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.\r\nAdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet\r\nRangeWAN - This is where you will connect target domains to the Cyber Range environment.\r\n\r\nServiceNet - ESXI switch that connects to the SI router.  Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.\r\n\r\nRootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.  Additionally it has Googles 8.8.8.8 IP address.  This server is used for managing grayspace DNS.  You can register DNS manually or use the automation scripts build on the NRTS server.  For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.\r\nWeb-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.  These services are build in docker containers and provide the following;\r\n\r\nRedbook.com - This the bookstack app you are currently looking at.  This is used for documentation and covers an overview of the Cyber Range environment.  You can also expand upon this with your own documentation for whatever.\r\ndropbox.com - This is an owncloud server to simulated a cloud based file hosting service.  It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.  See the OPFOR section for some methods.\r\npastebin.com - This is a haste bin server to simulated the real world pastebin.  This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.\r\ndiagrams.net - This is draw.io and used for generating whatever diagram you want.  Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.\r\n\r\n\r\nCA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.  In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.  Once that is done, any certs you create with the CA-Server will appear as trusted.  For how to generate SSL certs as well as code signing binarys, see CA-Server details.\r\nTraffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.  See Traffic-Gen details for more information on this.\r\nTraffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.  This exists to allow  Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.\r\n\r\nGrayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.  By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.  Feel free to add whatever else you want. \r\n\r\nNRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.  See NRTS for more details.\r\nKali - basic kali build, add whatever tools you want.\r\nFlareVM - basic windows VM, but I would advise installing Visual Studios.\r\n\r\nAdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.  There are main servers on this network, AdminNet-DHCP and IA-Proxy.  Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.\r\n\r\nAdminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.  For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.\r\nIA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.  To access real world internet from any VM in the cyber range, just set the proxy to http://172.30.0.2:9999\r\n\r\nRangeWAN - This is for connection one or more target domains to the cyber range.  Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.  Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.  More specific details are explained in the target range planning section\r\n',1,'2023-04-04 20:30:55','2023-04-04 20:30:55','network-diagram','network-overview','version','','',5),(97,10,'Manual Domain Registration','<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on user created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\"><strong>Step 1.</strong> Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\"><strong>Step 2</strong>. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.&nbsp; If you are doing this from an NRTS, you can skip this step since the ssh keys are set up during the initial build of the NRTS.<br></p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code class=\"language-\">ssh-copy-id root@198.41.0.4   ## the password is : toor</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\"><strong>Step 3</strong>. Look at RegisterDNS.sh\'s usage. Run the script without passing a file or argument.&nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerdns-help.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerdns-help.png\" alt=\"RegisterDNS-help.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\"><strong>Step 4</strong>. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/examplednsfile.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/examplednsfile.png\" alt=\"exampleDNSfile.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\"><strong>Step 5</strong>. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt<a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerprocess.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerprocess.png\" alt=\"registerprocess.png\"></a></p>','Add Domains based on user created file\r\nStep 1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.\r\nStep 2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.  If you are doing this from an NRTS, you can skip this step since the ssh keys are set up during the initial build of the NRTS.\r\nssh-copy-id root@198.41.0.4   ## the password is : toor\r\nStep 3. Look at RegisterDNS.sh\'s usage. Run the script without passing a file or argument.  \r\nStep 4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep 5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt',1,'2023-04-04 22:35:55','2023-04-04 22:35:55','manual-domain-registration','how-to-guides','version','','',10),(99,10,'Manual Domain Registration','<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on user created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\"><strong>Step 1.</strong> Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\"><strong>Step 2</strong>. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.&nbsp; If you are doing this from an NRTS, you can skip this step since the ssh keys are set up during the initial build of the NRTS.<br></p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code class=\"language-\">ssh-copy-id root@198.41.0.4   ## the password is : toor</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\"><strong>Step 3</strong>. Look at RegisterDNS.sh\'s usage. Run the script without passing a file or argument.&nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerdns-help.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerdns-help.png\" alt=\"RegisterDNS-help.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\"><strong>Step 4</strong>. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/examplednsfile.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/examplednsfile.png\" alt=\"exampleDNSfile.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\"><strong>Step 5</strong>. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt<a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerprocess.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerprocess.png\" alt=\"registerprocess.png\"></a></p>\r\n<h3 id=\"bkmrk-managing-dns\">Managing DNS</h3>\r\n<p id=\"bkmrk-on-an-nrts-server-in\">On an NRTS server in the /root/scripts directory is a script called ManageDNS.sh.&nbsp;&nbsp; Use this script to View or Delete DNS registrations.&nbsp; DNS is tagged by the user when it\'s created by either the RegisterDNS.sh as part of the process of the buildredteam.sh script.&nbsp; For more information on this go to -&gt; Using the NRTS -&gt; ManageDNS.sh</p>','Add Domains based on user created file\r\nStep 1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.\r\nStep 2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.  If you are doing this from an NRTS, you can skip this step since the ssh keys are set up during the initial build of the NRTS.\r\nssh-copy-id root@198.41.0.4   ## the password is : toor\r\nStep 3. Look at RegisterDNS.sh\'s usage. Run the script without passing a file or argument.  \r\nStep 4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep 5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\nManaging DNS\r\nOn an NRTS server in the /root/scripts directory is a script called ManageDNS.sh.   Use this script to View or Delete DNS registrations.  DNS is tagged by the user when it\'s created by either the RegisterDNS.sh as part of the process of the buildredteam.sh script.  For more information on this go to -> Using the NRTS -> ManageDNS.sh',1,'2023-04-04 22:39:36','2023-04-04 22:39:36','manual-domain-registration','how-to-guides','version','','',11),(100,13,'Creating Cobalt Strike C2 Profiles (buildredteam.sh)','<h3 id=\"bkmrk-script-generated-cob\">Script generated Cobalt Strike Profiles</h3>\r\n<ul id=\"bkmrk-there-are-two-differ\">\r\n<li class=\"null\">There are two different solutions installed on the NRTS by default.&nbsp; These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.&nbsp; You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.&nbsp; One of the more common issues I\'ve seen is very slow download transfer rates through a beacon.&nbsp; After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.&nbsp; Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.&nbsp; So I would also advice testing this on your test target as well.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-c2concealer\">Using C2concealer</h4>\r\n<ul id=\"bkmrk-note%3A-c2concealer-is\">\r\n<li class=\"null\">NOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.</li>\r\n<li class=\"null\">There are two arguments that C2concealer accepts; --variants and --hostname.&nbsp; The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.&nbsp; I believe the max number of variants is 10, but I\'d advise setting this to 0.&nbsp; The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.&nbsp; c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.&nbsp; Below is a usage example.</li>\r\n</ul>\r\n<pre id=\"bkmrk-c2concealer---varian\"><code class=\"language-\">C2concealer --variants 0 --hostname humanzoo.com</code></pre>\r\n<p id=\"bkmrk-the-script-will-ask-\">The script will ask for an SSL option, these options are</p>\r\n<ul id=\"bkmrk-self-signed-ssl-cert\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Self-signed SSL cert</li>\r\n<li class=\"null\">LetsEncrypt SSL cert</li>\r\n<li class=\"null\">Existing Keystore</li>\r\n<li class=\"null\">No SSL</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If you plan on using a redirector, you can select \"No SSL\", the NRTS redirector will handle SSL certs for all the domains you use with it.&nbsp; If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.&nbsp; Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want to emulate in your engagement.&nbsp; The LetsEncrypt SSL cert will fail in this closed grayspace environment.</li>\r\n<li class=\"null\">Once you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;</li>\r\n</ul>\r\n<pre id=\"bkmrk-%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23\"><code class=\"language-\">############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################</code></pre>\r\n<ul id=\"bkmrk-it-saves-the-profile\">\r\n<li class=\"null\">It saves the profile with a \"randomly generated named\".profile in the directory you ran C2concealer from.&nbsp; The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.&nbsp; This directory is /root/Profiles.&nbsp; Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.</li>\r\n</ul>\r\n<pre id=\"bkmrk-mv-ba3e5732.profile-\"><code class=\"language-\">mv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/</code></pre>\r\n<ul id=\"bkmrk-at-this-point-the-pr\">\r\n<li class=\"null\">At this point the profile is ready to use, when you go to set up a Cobalt Strike teamserver on the NRTS, the script will see this profile and give you the option to select it.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-sourcepoint\">Using Sourcepoint</h4>\r\n<ul id=\"bkmrk-sourcepoint-isn%27t-ad\">\r\n<li class=\"null\">Sourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.</li>\r\n<li class=\"null\">Sourepoint has a larger number of arguments and gives you a lot more control.&nbsp; For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.</li>\r\n<li class=\"null\">Required Sourcepoint arguments.\r\n<ul>\r\n<li class=\"null\">-host&nbsp;&nbsp;\r\n<ul>\r\n<li class=\"null\">This is the host name it will add as a server variable in the profile</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Outfile\r\n<ul>\r\n<li class=\"null\">This is the name/path to save the profile as</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Injector\r\n<ul>\r\n<li class=\"null\">This is the process injection method, the script provides two options&nbsp;\r\n<ul>\r\n<li class=\"null\">VirtualAllocEx (Great for cross architecture i.e x86 -&gt; x64 and x64-&gt;x86)</li>\r\n<li class=\"null\">NtMapViewOfSection (A more stealthy option, however fails over to VirtualAllocEx)<br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example Usage</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fsourcepoint\"><code class=\"language-bash\">cd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx</code></pre>\r\n<ul id=\"bkmrk-output-will-look-lik\">\r\n<li class=\"null\">Output will look like.</li>\r\n</ul>\r\n<pre id=\"bkmrk-_____-____-_-__-%2F-__\"><code class=\"language-\">\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source</code></pre>\r\n<ul id=\"bkmrk-note%3A-the-profiles-g\">\r\n<li class=\"null\">NOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.&nbsp; So it\'s a good idea to test these profiles before trying to use them.&nbsp; Below is how to test it on a NRTS.</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fcobaltstrik\"><code class=\"language-bash\">cd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile</code></pre>\r\n<p id=\"bkmrk-%C2%A0\"></p>','Script generated Cobalt Strike Profiles\r\n\r\nThere are two different solutions installed on the NRTS by default.  These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.  You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.  One of the more common issues I\'ve seen is very slow download transfer rates through a beacon.  After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.  Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.  So I would also advice testing this on your test target as well.\r\n\r\nUsing C2concealer\r\n\r\nNOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.\r\nThere are two arguments that C2concealer accepts; --variants and --hostname.  The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.  I believe the max number of variants is 10, but I\'d advise setting this to 0.  The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.  c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.  Below is a usage example.\r\n\r\nC2concealer --variants 0 --hostname humanzoo.com\r\nThe script will ask for an SSL option, these options are\r\n\r\n\r\n\r\nSelf-signed SSL cert\r\nLetsEncrypt SSL cert\r\nExisting Keystore\r\nNo SSL\r\n\r\n\r\nIf you plan on using a redirector, you can select \"No SSL\", the NRTS redirector will handle SSL certs for all the domains you use with it.  If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.  Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want to emulate in your engagement.  The LetsEncrypt SSL cert will fail in this closed grayspace environment.\r\nOnce you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;\r\n\r\n############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################\r\n\r\nIt saves the profile with a \"randomly generated named\".profile in the directory you ran C2concealer from.  The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.  This directory is /root/Profiles.  Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.\r\n\r\nmv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/\r\n\r\nAt this point the profile is ready to use, when you go to set up a Cobalt Strike teamserver on the NRTS, the script will see this profile and give you the option to select it.\r\n\r\nUsing Sourcepoint\r\n\r\nSourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.\r\nSourepoint has a larger number of arguments and gives you a lot more control.  For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.\r\nRequired Sourcepoint arguments.\r\n\r\n-host  \r\n\r\nThis is the host name it will add as a server variable in the profile\r\n\r\n\r\n-Outfile\r\n\r\nThis is the name/path to save the profile as\r\n\r\n\r\n-Injector\r\n\r\nThis is the process injection method, the script provides two options \r\n\r\nVirtualAllocEx (Great for cross architecture i.e x86 -> x64 and x64->x86)\r\nNtMapViewOfSection (A more stealthy option, however fails over to VirtualAllocEx)\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample Usage\r\n\r\ncd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx\r\n\r\nOutput will look like.\r\n\r\n\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source\r\n\r\nNOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.  So it\'s a good idea to test these profiles before trying to use them.  Below is how to test it on a NRTS.\r\n\r\ncd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile\r\n',1,'2023-04-04 22:40:21','2023-04-04 22:40:21','creating-cobalt-strike-c2-profiles-buildredteamsh','using-the-nrts','version','','',4),(101,14,'Starting a Cobalt Strike Teamserver (buildredteam.sh)','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.&nbsp; This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.&nbsp; Doing so would create artifacts on any teamserver you build using the build script.&nbsp; That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.</p>\r\n<p id=\"bkmrk-also-this-guide-is-a\">Also this guide is assuming that you have already created a cobalt strike profile that you want to use.&nbsp; For this example, we will use humanzoo.profile as the profile we created.&nbsp; For instructions on how to create Cobalt Strike C2 profiles go to -&gt; Using the NRTS -&gt; Creating Cobalt Strike C2 Profiles.<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example usage.</li>\r\n<li class=\"null\">\r\n<pre><code class=\"language-bash\">cd /root/scripts\r\n./buildredteam.sh</code></pre>\r\n</li>\r\n<li class=\"null\">This will pop up a text-based menu.&nbsp; At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, I\'ll leave it as the default.<br>\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hGyimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Next it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.&nbsp; Here you select what Geo-based IP you want to set up your teamserver with.&nbsp; For this example we\'ll use USA. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/N1Iimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-drill-\">\r\n<li class=\"null\">Next, it will drill down further with a City location, some only have one option, but the USA one has several.&nbsp; For this example, we\'ll use Seattle. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/KZNimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want a randomly generated IP or to set one manually.&nbsp; The guide will walk through screenshots for both options.&nbsp; For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.&nbsp; For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.&nbsp; It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uPMimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips---option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select option 1, it will add a random IP during processing so the menu will move to the next step.&nbsp; This will be shown after going through the manual process.</li>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; Then next few screenshots shows the manual IP process.&nbsp;&nbsp; Below is the menu when you selected option 2.&nbsp; At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0Ddimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-here-is-what-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Here is what option \"s\" looks like.&nbsp; This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/c2Fimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/c2Fimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-after-i%27ve-decided-w\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After you\'ve decided what subnet you want to use from the list above, write it down or memorize it and then press \"q\" and then \"enter\" to exit out of the IP subnet view screen.&nbsp; This will take you back to the previous menu.&nbsp; From the list above for this example, we\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iWuimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-wh\">\r\n<li class=\"null\">At this point you have either selected to randomly set an IP or set one manually.&nbsp; Next, it will ask what profile you want to use.&nbsp; It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.&nbsp; For this example, we\'ll use the humanzoo2.profile. &nbsp; &nbsp; &nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JHKimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a password to use.&nbsp; For this we\'ll set the password to toor.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3ybimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point%2C-you%27v\">\r\n<li class=\"null\">At this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JB2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-what-the-bu\">\r\n<li class=\"null\">Below is what the build process looks like.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/b00image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b00image.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script exits and your Cobalt Strike teamserver should be up and running in a container.&nbsp; Information about the service is also placed in /root/services/TS1/ directory.&nbsp; To check your container, run docker ps, below is a screenshot of this.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/BAHimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/BAHimage.png\" alt=\"image.png\"></a></p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.  This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.  Doing so would create artifacts on any teamserver you build using the build script.  That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.\r\nAlso this guide is assuming that you have already created a cobalt strike profile that you want to use.  For this example, we will use humanzoo.profile as the profile we created.  For instructions on how to create Cobalt Strike C2 profiles go to -> Using the NRTS -> Creating Cobalt Strike C2 Profiles.\r\n\r\nUse the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nExample usage.\r\n\r\ncd /root/scripts\r\n./buildredteam.sh\r\n\r\nThis will pop up a text-based menu.  At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, I\'ll leave it as the default.\r\n\r\n\r\nNext it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.  Here you select what Geo-based IP you want to set up your teamserver with.  For this example we\'ll use USA.                       \r\n\r\n\r\nNext, it will drill down further with a City location, some only have one option, but the USA one has several.  For this example, we\'ll use Seattle.              \r\n\r\n\r\nThen it will ask if you want a randomly generated IP or to set one manually.  The guide will walk through screenshots for both options.  For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.  For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.  It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select option 1, it will add a random IP during processing so the menu will move to the next step.  This will be shown after going through the manual process.\r\nSetting IPs - Option 2 Set IPs manually.  Then next few screenshots shows the manual IP process.   Below is the menu when you selected option 2.  At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.  \r\n\r\n\r\n\r\n\r\n\r\n\r\nHere is what option \"s\" looks like.  This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP.                                                                                                                \r\n\r\n\r\n\r\n\r\n\r\n\r\nAfter you\'ve decided what subnet you want to use from the list above, write it down or memorize it and then press \"q\" and then \"enter\" to exit out of the IP subnet view screen.  This will take you back to the previous menu.  From the list above for this example, we\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet. \r\n\r\n\r\n\r\n\r\nAt this point you have either selected to randomly set an IP or set one manually.  Next, it will ask what profile you want to use.  It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.  For this example, we\'ll use the humanzoo2.profile.      \r\n\r\n\r\nThen it will ask for a password to use.  For this we\'ll set the password to toor.\r\n\r\n\r\nAt this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.\r\n\r\n\r\nBelow is what the build process looks like.\r\n\r\n\r\nAt this point the script exits and your Cobalt Strike teamserver should be up and running in a container.  Information about the service is also placed in /root/services/TS1/ directory.  To check your container, run docker ps, below is a screenshot of this.\r\n\r\n\r\n',1,'2023-04-04 22:40:39','2023-04-04 22:40:39','starting-a-cobalt-strike-teamserver-buildredteamsh','using-the-nrts','version','','',6),(102,15,'Making a HAProxy Redirector (buildredteam.sh)','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains and doesn\'t match it will forward the traffic to a decoy website.</p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a HAProxy redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\" <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you RD1, or if there is already an RD1, it will give a default of RD2, and so on.&nbsp; You can keep the default name or add own own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, we\'ll leave it as the default of RD1. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/59Fimage.png\" alt=\"image.png\">&nbsp; <br></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for the number of IPs, the script limits this to 20 for sanity reasons.&nbsp; For this example, we\'ll use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vq2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a Geo-location to pull IP addresses from, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. For this example we\'ll use the UK.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6itimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-to-\">\r\n<li class=\"null\">Then it will ask to select a city, some have a few, but a lot only have one.&nbsp; For this example, we\'ll select London.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Ycfimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want to set IPs randomly or manually.&nbsp; This guide will walk through both processes. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/yTwimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips-%28random%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the menu will move on to the next step.&nbsp; This will be shown after going through the manual process.<br></li>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; The next few screenshots shows the manual IP process.&nbsp; Below is the menu when you select Set Ips manually.&nbsp; At this screen you can enter \"s\" to see a list of IP subnets to select IPs from.&nbsp; The blank menu items will store IPs as you add them in.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"><br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-using-the-%22s%22-option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Use the \"s\" option to see available subnets.&nbsp; This shows the available IP subnets based on the geo-location selections you made previously.&nbsp; The list is typically long, you can hit the spacebar to page down and press \"q\" then \"enter\" to exit out of the IP subnet view and go back to the previous menu.&nbsp; You can pick IPs from any of these subnets, so for this example, well use 12.9.80.129/25.&nbsp; Note you can pick IPs from multiple IP subnets from the list, you don\'t have to use just one IP subnet. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/Mc7image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Mc7image.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-after-pressing-%22q%22-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.&nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-then-enter-the-ip.\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Then enter the IP.</li>\r\n<li class=\"null\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jRdimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you-enter-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu.&nbsp; You should now see the IP you entered, continue these steps until you\'ve added IPs for all empty slots.&nbsp; Note:&nbsp; If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three. <a href=\"https://redbook.com/uploads/images/gallery/2023-04/gjaimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/gjaimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either set IPs randomly or manually, below is the next menu screen.&nbsp; Here it asks for what ports to redirect.&nbsp; For this example, we\'ll select HTTP, HTTPS <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pYCimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-once-selected%2C-it-wi\">\r\n<li class=\"null\">Once selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.&nbsp; This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure the Cobalt Strike Listener\'s \"Bind to\" address to do this.&nbsp; However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.&nbsp; To accept the default just press enter.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/XMHimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-abo\">\r\n<li class=\"null\">Next it will ask about changing the bind port for http, again you can do this or just leave it as default.&nbsp; Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6goimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-wha\">\r\n<li class=\"null\">Next it will ask what IP the redirect should be redirecting to.&nbsp; This should be your Cobalt Strike Teamserver IP. &nbsp; For this example we will be using 54.88.220.10.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/hXTimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hXTimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-whi\">\r\n<li class=\"null\">Then it will ask which Cobalt Strike profile to use.&nbsp; This need to be the same as the profile used to start the Cobalt Strike teamserver.&nbsp; The script will use information from the profile to build out ACLs.&nbsp; These ACLs are used to identify C2 traffic from other things hitting a redirector domain.&nbsp; If you select the wrong profile, your C2 will not work.&nbsp; For this example we will use the humanzoo2.profile.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uJUimage.png\" alt=\"image.png\"><br></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.&nbsp; NOTE: this has to be a site that exist in the range and is reachable.&nbsp; If you put in a domain that isn\'t reachable, the HAProxy will stop working.&nbsp; The default is set to redbook.com.&nbsp; We\'ll leave the default for this example.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/B4Aimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B4Aimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to create manual domains or have them randomly generated.&nbsp; If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.&nbsp; This guide will walk through both options. &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iTDimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assigning-domains-%28o\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains - Option 1 - (use randomly generated one/s).&nbsp; If we select option 1, the script moves will add these during processing and move on to the next step.&nbsp; We\'ll cover that after going through the manual process.<br></li>\r\n<li class=\"null\">Assigning Domains - Option 2 - (Manually create domain name/s).&nbsp; When you select option 2, you get the menu shown below.&nbsp; Here you pick an IP from the list and&nbsp; it will take you to a menu for entering a domain name for that IP.&nbsp; For this example will use option 1&nbsp; for IP 208.82.7.57<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2I5image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you-selected-an\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you selected an IP to add a domain for, you get the menu shown below.&nbsp; For this example we\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3UBimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-press-enter-on-the-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve added a domain named and pressed \"enter\" it takes you back to the original menu, but now you will see the domain you entered is populated next to the IP.&nbsp; Repeat this process for all IPs, and select \"d\" for done when you are finished. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Nxsimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point%2C-you-h\">\r\n<li class=\"null\">At this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a Tag for these domains.&nbsp; This tag is used by other scripts to identify who created these domains and/or what there purpose is.&nbsp; This will allow these domains to be deleted later like say after an engagement and you no longer need them.&nbsp; For this example, I\'ll use \"test-DNS\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dj9image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h7Iimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li class=\"null\">Below is a screenshot of the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vleimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-you-should-now-have-\">\r\n<li class=\"null\">You should now have a working redirector.&nbsp; The information regarding the redirector is located at /root/services/RD1.&nbsp; This directory will have you DNS information, IP information, where it\'s redirecting to, and the name of the C2 profile used .&nbsp; You can validate if your redirector is running by looking at docker.&nbsp; Run docker ps and you should see RD1 up and running.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dhEimage.png\" alt=\"image.png\"></li>\r\n</ul>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains and doesn\'t match it will forward the traffic to a decoy website.\r\nNOTE: This guide is assuming you already have a Cobalt Strike team server running.  \r\nFor this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.\r\n\r\nUse the following script to start a HAProxy redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\" \r\n\r\n\r\nNext it will ask for a service tag, by default it will give you RD1, or if there is already an RD1, it will give a default of RD2, and so on.  You can keep the default name or add own own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, we\'ll leave it as the default of RD1.                                                                                                                                  \r\n\r\n\r\nNext it will ask for the number of IPs, the script limits this to 20 for sanity reasons.  For this example, we\'ll use 5.\r\n\r\n\r\nThen it will ask for a Geo-location to pull IP addresses from, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. For this example we\'ll use the UK.  \r\n\r\n\r\nThen it will ask to select a city, some have a few, but a lot only have one.  For this example, we\'ll select London.\r\n\r\n\r\nThen it will ask if you want to set IPs randomly or manually.  This guide will walk through both processes. \r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select option 1, it will add random IPs during processing so the menu will move on to the next step.  This will be shown after going through the manual process.\r\nSetting IPs - Option 2 Set IPs manually.  The next few screenshots shows the manual IP process.  Below is the menu when you select Set Ips manually.  At this screen you can enter \"s\" to see a list of IP subnets to select IPs from.  The blank menu items will store IPs as you add them in.                                                                                                       \r\n\r\n\r\n\r\n\r\n\r\n\r\nUse the \"s\" option to see available subnets.  This shows the available IP subnets based on the geo-location selections you made previously.  The list is typically long, you can hit the spacebar to page down and press \"q\" then \"enter\" to exit out of the IP subnet view and go back to the previous menu.  You can pick IPs from any of these subnets, so for this example, well use 12.9.80.129/25.  Note you can pick IPs from multiple IP subnets from the list, you don\'t have to use just one IP subnet.                                                                                                                           \r\n\r\n\r\n\r\n\r\n\r\n\r\nAfter pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot. \r\n\r\n\r\n\r\n\r\n\r\n\r\nThen enter the IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu.  You should now see the IP you entered, continue these steps until you\'ve added IPs for all empty slots.  Note:  If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three. \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either set IPs randomly or manually, below is the next menu screen.  Here it asks for what ports to redirect.  For this example, we\'ll select HTTP, HTTPS \r\n\r\n\r\nOnce selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.  This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure the Cobalt Strike Listener\'s \"Bind to\" address to do this.  However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.  To accept the default just press enter.                      \r\n\r\n\r\nNext it will ask about changing the bind port for http, again you can do this or just leave it as default.  Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.\r\n\r\n\r\nNext it will ask what IP the redirect should be redirecting to.  This should be your Cobalt Strike Teamserver IP.   For this example we will be using 54.88.220.10.\r\n\r\n\r\nThen it will ask which Cobalt Strike profile to use.  This need to be the same as the profile used to start the Cobalt Strike teamserver.  The script will use information from the profile to build out ACLs.  These ACLs are used to identify C2 traffic from other things hitting a redirector domain.  If you select the wrong profile, your C2 will not work.  For this example we will use the humanzoo2.profile.\r\n\r\n\r\nNext it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.  NOTE: this has to be a site that exist in the range and is reachable.  If you put in a domain that isn\'t reachable, the HAProxy will stop working.  The default is set to redbook.com.  We\'ll leave the default for this example.          \r\n\r\n\r\nNext it will ask if you want to create manual domains or have them randomly generated.  If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.  This guide will walk through both options.          \r\n\r\n\r\n\r\n\r\nAssigning Domains - Option 1 - (use randomly generated one/s).  If we select option 1, the script moves will add these during processing and move on to the next step.  We\'ll cover that after going through the manual process.\r\nAssigning Domains - Option 2 - (Manually create domain name/s).  When you select option 2, you get the menu shown below.  Here you pick an IP from the list and  it will take you to a menu for entering a domain name for that IP.  For this example will use option 1  for IP 208.82.7.57\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you selected an IP to add a domain for, you get the menu shown below.  For this example we\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57.  \r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve added a domain named and pressed \"enter\" it takes you back to the original menu, but now you will see the domain you entered is populated next to the IP.  Repeat this process for all IPs, and select \"d\" for done when you are finished.           \r\n\r\n\r\n\r\n\r\nAt this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a Tag for these domains.  This tag is used by other scripts to identify who created these domains and/or what there purpose is.  This will allow these domains to be deleted later like say after an engagement and you no longer need them.  For this example, I\'ll use \"test-DNS\"\r\n\r\n\r\nFinally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.\r\n\r\n\r\nBelow is a screenshot of the build process.\r\n\r\n\r\nYou should now have a working redirector.  The information regarding the redirector is located at /root/services/RD1.  This directory will have you DNS information, IP information, where it\'s redirecting to, and the name of the C2 profile used .  You can validate if your redirector is running by looking at docker.  Run docker ps and you should see RD1 up and running.\r\n',1,'2023-04-04 22:40:56','2023-04-04 22:40:56','making-a-haproxy-redirector-buildredteamsh','using-the-nrts','version','','',9),(103,16,'Making a NGINX Redirector (buildredteam.sh)','<p id=\"bkmrk-note%3A-the-nrts-is-de\">&nbsp;NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The NGINX redirector can be use with most C2 servers and can redirect DNS traffic.<br></p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike or other team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a teamserver running at 54.88.220.10<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a NGINX redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select Option 1 \"Set up a NGINX redirector (http,https, DNS)\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you RD1, or if there is already a RD1, it will give a default of RD2, and so on.&nbsp; You can keep the default or set your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, we\'ll leave the default of RD1.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/CBYimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-asks-for-the\">\r\n<li class=\"null\">Next it asks for the number of IPs.&nbsp; For the example we\'ll use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ApVimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a geo-location base for your setting your IP\'s.&nbsp; The NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. &nbsp; For this example we\'ll use option 4 Canada.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/RStimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-narrows-it-d\">\r\n<li class=\"null\">Then it narrows it down by city, for this example we\'ll use Toronto.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/VBWimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP manually or randomly.&nbsp; This guide will walk through both options.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Qhimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips-%281-set-r\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the menu will move on to the next step.&nbsp; This will be shown after going over the Manual IP option.</li>\r\n<li class=\"null\">Setting IPs&nbsp; - Option 2 set IPs Manually.&nbsp; Then next few screenshots shows the manual IP process. Below is the menu when you select option 2.&nbsp; At this screen you can enter \"s\" to see a list of IP subnets to select an IP from.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/bTcimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available Subnets\", you can use this information to select your IPs.&nbsp; This list can be long, use spacebar to page down, then enter \"q\" and press \"enter\" to exit out and get back to the previous menu.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/X3Rimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-using-the-list-of-av\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Using the list of available IP\'s you can use IP\'s out of any of these subnets, for this example I\'ll use 72.3.244.1/25 - but you can use multiple subnets from the list.&nbsp; Press \"q\" then \"enter\" to exit the IP subnet view and back at the manual IP menu.&nbsp; For this example, we\'ll select 1 for the first blank space.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/bTcimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-this-brings-up-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">This brings up the IP entry menu, for this example we\'ll use 72.3.244.20.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hdjimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-i-press-enter%2C-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve enter the IP and pressed enter, it goes back to the manual IP menu and now you see slot one is populated with the IP, continue this process until you\'ve filled all the blanks, then select \"d\" for done.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jJGimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-i-have\">\r\n<li class=\"null\">At this point I have either selected to IPs randomly or manually set IPs, which brings us to the next menu that asks what ports to redirect as shown below.&nbsp;&nbsp; For this example, we\'ll select option 4 for DNS, HTTP and HTTPS.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/rocimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to set a different port for the \"bind to\" this is related to a cobalt strike feature where you can have a listener set the \"bind to\" a different port.&nbsp; The payload you build will still use port 443 for example of a HTTPS payload, but the teamserver will listen on a different port like say 8443.&nbsp; You need a redirector to do something like this, however since the teamserver and redirectors are running in containers, there isn\'t really a need to do this.&nbsp; For this example we will leave it at the default.&nbsp; The screenshoot shows it asks this for each port being redirected.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/rtkimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for the IP to redirect to.&nbsp; This should be your C2 server\'s IP.&nbsp; For this example we are using a teamserver running on 54.88.220.10.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dp2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-want-to\">\r\n<li class=\"null\">Next it will want to set up DNS and it will give you the option for randomly generated DNS or will let you manually create your domain names.&nbsp; This is necessary whenever you select to redirect HTTPS, the script will need the domain names to generator the CA signed SSL certificates.&nbsp; The script will automatically connect to the CA server to get these signed so they can be used by the NGINX redirector.&nbsp; This guide will walk through both Random and manually domain options.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/LCiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assigning-domains-na\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning domains - Option 1 (Use randomly generated one/s).&nbsp; When you select this, the script will randomly generate domain names during processing, so it just moves on to the next menu.&nbsp; This will be shown after going over the Manual domain name option. &nbsp;&nbsp; <br></li>\r\n<li class=\"null\">Assigning domains - Option 2 (Manually create domain names/s).&nbsp; This will take you to the menu below.&nbsp; Note there is a list of IP\'s, you select a menu number next to an IP to set the domain for that IP.&nbsp; For this example, we\'ll set option 1 (205.225.141.68)<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/nkAimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-show-the-m\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">This will show the menu below where it asks for the domain name.&nbsp; Enter the domain you want to use for that IP and press enter.&nbsp; For this example, we\'ll use goatfarmer.com.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/J49image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you%27ve-entered-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve entered the domain and pressed enter it takes you back to the manual domain name menu, now you should see the domain populated next to the IP, repeat this process for all IPs and press \"d\" when you are finished.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/sbaimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either selected randomly generated domain names or completed adding domain names manual.&nbsp; Next the script will ask you to set a tag for your DNS.&nbsp; This is used to identify the domains later when you want to remove them.&nbsp; For this example, we\'ll use \"test-DNS\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xo4image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-now-the-script-has-a\">\r\n<li class=\"null\">Now the script has all the information it needs to build your NGINX redirector.&nbsp; Review the settings and if you are happy with it press enter to start the docker container build process. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ROCimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-shows-the-buil\">\r\n<li class=\"null\">Below shows the build process, you should now have a NGINX redirector.&nbsp; You can get information about it from the /root/services/RD1 folder. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HDTimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-to-check-that-your-c\">\r\n<li class=\"null\">To check that your container is running run docker ps, you should see a container running with the \"Docker service Tag\" from above.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/4KAimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/4KAimage.png\" alt=\"image.png\"></a></p>',' NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The NGINX redirector can be use with most C2 servers and can redirect DNS traffic.\r\nNOTE: This guide is assuming you already have a Cobalt Strike or other team server running.  \r\nFor this example, we\'ll assume we have a teamserver running at 54.88.220.10\r\n\r\nUse the following script to start a NGINX redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select Option 1 \"Set up a NGINX redirector (http,https, DNS)\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you RD1, or if there is already a RD1, it will give a default of RD2, and so on.  You can keep the default or set your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, we\'ll leave the default of RD1.\r\n\r\n\r\nNext it asks for the number of IPs.  For the example we\'ll use 5.\r\n\r\n\r\nNext it will ask for a geo-location base for your setting your IP\'s.  The NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.   For this example we\'ll use option 4 Canada.\r\n\r\n\r\nThen it narrows it down by city, for this example we\'ll use Toronto.\r\n\r\n\r\nNext, it will ask if you want to set IP manually or randomly.  This guide will walk through both options.\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 set random IPs.  When you select option 1, it will add random IPs during processing so the menu will move on to the next step.  This will be shown after going over the Manual IP option.\r\nSetting IPs  - Option 2 set IPs Manually.  Then next few screenshots shows the manual IP process. Below is the menu when you select option 2.  At this screen you can enter \"s\" to see a list of IP subnets to select an IP from.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available Subnets\", you can use this information to select your IPs.  This list can be long, use spacebar to page down, then enter \"q\" and press \"enter\" to exit out and get back to the previous menu.                                                                                                                                                 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nUsing the list of available IP\'s you can use IP\'s out of any of these subnets, for this example I\'ll use 72.3.244.1/25 - but you can use multiple subnets from the list.  Press \"q\" then \"enter\" to exit the IP subnet view and back at the manual IP menu.  For this example, we\'ll select 1 for the first blank space.  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThis brings up the IP entry menu, for this example we\'ll use 72.3.244.20.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve enter the IP and pressed enter, it goes back to the manual IP menu and now you see slot one is populated with the IP, continue this process until you\'ve filled all the blanks, then select \"d\" for done.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point I have either selected to IPs randomly or manually set IPs, which brings us to the next menu that asks what ports to redirect as shown below.   For this example, we\'ll select option 4 for DNS, HTTP and HTTPS.\r\n\r\n\r\nNext it will ask if you want to set a different port for the \"bind to\" this is related to a cobalt strike feature where you can have a listener set the \"bind to\" a different port.  The payload you build will still use port 443 for example of a HTTPS payload, but the teamserver will listen on a different port like say 8443.  You need a redirector to do something like this, however since the teamserver and redirectors are running in containers, there isn\'t really a need to do this.  For this example we will leave it at the default.  The screenshoot shows it asks this for each port being redirected.\r\n\r\n\r\nNext it will ask for the IP to redirect to.  This should be your C2 server\'s IP.  For this example we are using a teamserver running on 54.88.220.10.\r\n\r\n\r\nNext it will want to set up DNS and it will give you the option for randomly generated DNS or will let you manually create your domain names.  This is necessary whenever you select to redirect HTTPS, the script will need the domain names to generator the CA signed SSL certificates.  The script will automatically connect to the CA server to get these signed so they can be used by the NGINX redirector.  This guide will walk through both Random and manually domain options.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning domains - Option 1 (Use randomly generated one/s).  When you select this, the script will randomly generate domain names during processing, so it just moves on to the next menu.  This will be shown after going over the Manual domain name option.    \r\nAssigning domains - Option 2 (Manually create domain names/s).  This will take you to the menu below.  Note there is a list of IP\'s, you select a menu number next to an IP to set the domain for that IP.  For this example, we\'ll set option 1 (205.225.141.68)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThis will show the menu below where it asks for the domain name.  Enter the domain you want to use for that IP and press enter.  For this example, we\'ll use goatfarmer.com.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve entered the domain and pressed enter it takes you back to the manual domain name menu, now you should see the domain populated next to the IP, repeat this process for all IPs and press \"d\" when you are finished.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either selected randomly generated domain names or completed adding domain names manual.  Next the script will ask you to set a tag for your DNS.  This is used to identify the domains later when you want to remove them.  For this example, we\'ll use \"test-DNS\"\r\n\r\n\r\nNow the script has all the information it needs to build your NGINX redirector.  Review the settings and if you are happy with it press enter to start the docker container build process. \r\n\r\n\r\nBelow shows the build process, you should now have a NGINX redirector.  You can get information about it from the /root/services/RD1 folder.                     \r\n\r\n\r\nTo check that your container is running run docker ps, you should see a container running with the \"Docker service Tag\" from above.\r\n\r\n',1,'2023-04-04 22:41:17','2023-04-04 22:41:17','making-a-nginx-redirector-buildredteamsh','using-the-nrts','version','','',4),(104,17,'Building a Payload Host (buildredteam.sh)','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp;</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Payload Host on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-then-ask-y\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you P1, or if there is already a P1, it will give a default of P2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates at /root/services for its docker container build and also the name of the container itself.&nbsp; For this example, we\'ll leave it as the default of P1.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jICimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.&nbsp; For this example we will use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/E0aimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a geo-location for your IPs.&nbsp; The NRTS has a list of IP Subnets stored in a Geo-location folder structure at /root/backbonerouters.&nbsp; For this example, we\'ll set our geolocation to option 7 - France. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hzximage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a city, some options have a few and some only have one.&nbsp; For example France only has one, so we\'ll select 1 -Paris since there isn\'t another option.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/UQkimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP\'s randomly or manually.&nbsp; This guide will walk through both paths.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Pysimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ip%27s-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IP\'s - Option 1 Set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the script will move on to the next step.&nbsp; We\'ll cover that after going over the manual IP process.</li>\r\n<li class=\"null\">Setting IP\'s - Option 2 Set IPs manually.&nbsp; When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.&nbsp; Select a blank option to get to the IP input screen.&nbsp; First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3Qyimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available subnets\".&nbsp; This can be a long list, use spacebar to page down then&nbsp; press \"q\" followed by \"enter\" to exit out of the subnet view and get back to the previous menu.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qstimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-now-that-we-know-wha\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Now that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.&nbsp; You can use any IP from the list of subnets and pull IPs from multiple subnets.&nbsp; Back at the manual IP menu, we\'ll select option 1 for the first blank spot.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3Qyimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-%C2%A0then-at-the-ip-entr\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">&nbsp;Then at the IP entry menu below we\'ll&nbsp; put in 184.84.181.201.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/GViimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-when-i-press-enter-f\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve entered an IP and pressed enter, it will take you back to the manual IP menu, only now the blank at option one is populated with the IP you just entered.&nbsp; Repeat this for all blanks and then press \"d\" when you are done.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/EYoimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-you-ha\">\r\n<li class=\"null\">At this point you have either selected to set IP\'s Randomly or have completed entering manual IPs.&nbsp; This brings you to the next menu.&nbsp; Here it asks you how you want to assign DNS.&nbsp; You can select random or manual, this guide will walk you through both paths.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/9nzimage.png\" alt=\"image.png\"> &nbsp;</li>\r\n</ul>\r\n<ul id=\"bkmrk-assign-dns-option-1-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains -&nbsp; Option 1 use randomly generated one/s.&nbsp; When you select this, the script will generate random domains during processing and it will move on to the next step.&nbsp; This will be covered after walking through the manual DNS option.<br></li>\r\n<li class=\"null\">Assigning Domains -&nbsp; Option 2 Manually create domain name/s.&nbsp; This will take you to a new menu that shows a list of IPs.&nbsp; Here you select an IP and then it will ask you to enter the domain name to use for that IP.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HNlimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-for-this-example-we%27\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">For this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name entry menu below.&nbsp; Then we\'ll use goatfarmer.com for that IP.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h9Rimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-we-enter-the-do\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.&nbsp; Repeat this process for all IP\'s press \"d\" when complete.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Mtimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-you-ha-1\">\r\n<li class=\"null\">At this point you have either selected to have domain names created Randomly&nbsp; or have completed the manual domain name process.&nbsp; Next the script will ask you for a DNS tag.&nbsp; This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.&nbsp; For this example we\'ll use \"test-DNS\".<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/aUSimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/YcJimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho-1\">\r\n<li class=\"null\">Below is a screenshot of the build process.&nbsp; After its complete information about the payload host service is located at /root/services/P1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dDwimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-you-can-check-that-y\">\r\n<li class=\"null\">You can check that your payload host container is running by running docker ps.&nbsp; You should see a container named P1 or whatever you set as the Docker Service Tag.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dj1image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-to-add-payloads\">\r\n<li class=\"null\">Then to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.&nbsp; Note: if you set a custom service tag go there, ex.&nbsp; /root/services/&lt;docker service tag&gt;/WWW.</li>\r\n</ul>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so. \r\n\r\nUse the following script to start a Payload Host on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you P1, or if there is already a P1, it will give a default of P2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates at /root/services for its docker container build and also the name of the container itself.  For this example, we\'ll leave it as the default of P1.\r\n\r\n\r\nNext it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.  For this example we will use 5.\r\n\r\n\r\nThen it will ask for a geo-location for your IPs.  The NRTS has a list of IP Subnets stored in a Geo-location folder structure at /root/backbonerouters.  For this example, we\'ll set our geolocation to option 7 - France. \r\n\r\n\r\nNext it will ask for a city, some options have a few and some only have one.  For example France only has one, so we\'ll select 1 -Paris since there isn\'t another option.\r\n\r\n\r\nNext, it will ask if you want to set IP\'s randomly or manually.  This guide will walk through both paths.\r\n\r\n\r\n\r\n\r\n\r\n\r\nSetting IP\'s - Option 1 Set random IPs.  When you select option 1, it will add random IPs during processing so the script will move on to the next step.  We\'ll cover that after going over the manual IP process.\r\nSetting IP\'s - Option 2 Set IPs manually.  When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.  Select a blank option to get to the IP input screen.  First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available subnets\".  This can be a long list, use spacebar to page down then  press \"q\" followed by \"enter\" to exit out of the subnet view and get back to the previous menu.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nNow that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.  You can use any IP from the list of subnets and pull IPs from multiple subnets.  Back at the manual IP menu, we\'ll select option 1 for the first blank spot.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n Then at the IP entry menu below we\'ll  put in 184.84.181.201.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve entered an IP and pressed enter, it will take you back to the manual IP menu, only now the blank at option one is populated with the IP you just entered.  Repeat this for all blanks and then press \"d\" when you are done.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point you have either selected to set IP\'s Randomly or have completed entering manual IPs.  This brings you to the next menu.  Here it asks you how you want to assign DNS.  You can select random or manual, this guide will walk you through both paths.                                           \r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning Domains -  Option 1 use randomly generated one/s.  When you select this, the script will generate random domains during processing and it will move on to the next step.  This will be covered after walking through the manual DNS option.\r\nAssigning Domains -  Option 2 Manually create domain name/s.  This will take you to a new menu that shows a list of IPs.  Here you select an IP and then it will ask you to enter the domain name to use for that IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nFor this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name entry menu below.  Then we\'ll use goatfarmer.com for that IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.  Repeat this process for all IP\'s press \"d\" when complete.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point you have either selected to have domain names created Randomly  or have completed the manual domain name process.  Next the script will ask you for a DNS tag.  This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.  For this example we\'ll use \"test-DNS\".\r\n\r\n\r\nAt this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.\r\n\r\n\r\nBelow is a screenshot of the build process.  After its complete information about the payload host service is located at /root/services/P1.                                                                               \r\n\r\n\r\nYou can check that your payload host container is running by running docker ps.  You should see a container named P1 or whatever you set as the Docker Service Tag.\r\n\r\n\r\n\r\nThen to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.  Note: if you set a custom service tag go there, ex.  /root/services/<docker service tag>/WWW.\r\n',1,'2023-04-04 22:41:36','2023-04-04 22:41:36','building-a-payload-host-buildredteamsh','using-the-nrts','version','','',5),(105,18,'Setting up a Phishing Attack (buildredteam.sh)','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The Phishing attack option doesn\'t build a docker container.&nbsp; Instead it sets up the NRTS host to perform the phishing attack.&nbsp; This step is just preparing the NRTS to mimic a domain for sending the phish.<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to set up phishing attack on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-then-ask-t\">\r\n<li class=\"null\">This will then ask to select a geo-location based IP, first select a country.&nbsp; For this example we\'ll use China. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2LTimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-you\">\r\n<li class=\"null\">Next it will ask you to select a city, for this example we\'ll use Beijing.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/pOSimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pOSimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-the-script-wil\">\r\n<li class=\"null\">Next, the script will ask if you want a randomly generated IP or if you want to manually set it.&nbsp; This guide will walk through both paths. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/zhIimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-set-ips---option-1-%28\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.&nbsp; This will be shown after going over the set IPs manually process.</li>\r\n<li class=\"null\">Setting&nbsp; IPs - Option 2 Set IPs manually.&nbsp; When you select this option it will ask you to provide an IP.&nbsp; Before you can provide one, you will need to know what what IP subnets are available for the Geo-location you previously selected.&nbsp; Enter \"s\" at the menu below to see a list of IP subnets. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/PKKimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit out of thte IP subnet view and get back to the IP input menu.&nbsp; For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ntHimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-type-%22q%22-and-hit-ent\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Type \"q\" and hit enter to exit the IP subnet list, then enter an IP that falls within the subnet you selected.&nbsp; NOTE: do not use the actual listed IP from the list. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HqFimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have set our selected to get a randomly generated IP or set it manually.&nbsp; The next menu screen asks how we want to assign our Domain name.&nbsp; Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Zjsimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assign-dns-%28option-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domain names -&nbsp; Option 1 Use randomly generated one/s.&nbsp; This option will assign random domain names during processing and will move on to the next step.&nbsp; We\'ll cover that after going over the manual domain name option.<br></li>\r\n<li class=\"null\">Assigning Domain names - Option 2 Manually create domain name/s.&nbsp;&nbsp; Selecting this option will bring up&nbsp; the following menu.&nbsp; It will ask for the domain you want to use, for this example we\'ll use goatfarmer.com. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ABNimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav-1\">\r\n<li class=\"null\">At this point we have either selected to have a domain name generated randomly or we manually set a domain name.&nbsp; The script will then want a Tag for your DNS.&nbsp; This tag is used to identify your DNS later, like say after an engagement and you want to remove the the DNS records used.&nbsp; For this example, we\'ll use \"test-DNS\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0yJimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has all the information it needs to set up for a phishing attack.&nbsp; Press enter at the screen below.<br>\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/7saimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Below is a screenshot of the phish preparation build.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Bxbimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<p id=\"bkmrk-the-script-edits-the\">The script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.&nbsp; After this you use the scripts at /root/scripts/phish to send your phishing attack.&nbsp; In the /root/scripts/phish directory there are two scripts for sending phishing attacks.&nbsp; They are phish.sh and spam.sh.&nbsp; Below is some information on what to modify in these scripts for your attack.<br></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F\">\r\n<li class=\"null\">/root/scripts/phish/phish.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a single email address.</li>\r\n<li class=\"null\">The script needs to be modified for your attack.&nbsp;</li>\r\n<li class=\"null\">vi phish.sh</li>\r\n<li class=\"null\">The top lines set the \"From\" address. &nbsp; Edit the from and realname to match the domain you set up prior and whatever username you want. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/eUlimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/eUlimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n<li class=\"null\">Then the last line in the script is the phish.&nbsp; Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.&nbsp; If you don\'t have an attachment, delete out the \"-a /path\" from the line.&nbsp; Then at the end replace target@domain.com with the email address you want to send the phish to.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/xITimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xITimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F-1\">\r\n<li class=\"null\">/root/scripts/phish/spam.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a list of email addresses.&nbsp; This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.&nbsp; The only difference here is that you don\'t add the target email address in the script.&nbsp; Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The Phishing attack option doesn\'t build a docker container.  Instead it sets up the NRTS host to perform the phishing attack.  This step is just preparing the NRTS to mimic a domain for sending the phish.\r\n\r\nUse the following script to set up phishing attack on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"      \r\n\r\n\r\nThis will then ask to select a geo-location based IP, first select a country.  For this example we\'ll use China.         \r\n\r\n\r\nNext it will ask you to select a city, for this example we\'ll use Beijing.        \r\n\r\n\r\nNext, the script will ask if you want a randomly generated IP or if you want to manually set it.  This guide will walk through both paths.          \r\n\r\n\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.  This will be shown after going over the set IPs manually process.\r\nSetting  IPs - Option 2 Set IPs manually.  When you select this option it will ask you to provide an IP.  Before you can provide one, you will need to know what what IP subnets are available for the Geo-location you previously selected.  Enter \"s\" at the menu below to see a list of IP subnets.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit out of thte IP subnet view and get back to the IP input menu.  For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30                                                                                                                                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nType \"q\" and hit enter to exit the IP subnet list, then enter an IP that falls within the subnet you selected.  NOTE: do not use the actual listed IP from the list.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have set our selected to get a randomly generated IP or set it manually.  The next menu screen asks how we want to assign our Domain name.  Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths.                             \r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning Domain names -  Option 1 Use randomly generated one/s.  This option will assign random domain names during processing and will move on to the next step.  We\'ll cover that after going over the manual domain name option.\r\nAssigning Domain names - Option 2 Manually create domain name/s.   Selecting this option will bring up  the following menu.  It will ask for the domain you want to use, for this example we\'ll use goatfarmer.com. \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either selected to have a domain name generated randomly or we manually set a domain name.  The script will then want a Tag for your DNS.  This tag is used to identify your DNS later, like say after an engagement and you want to remove the the DNS records used.  For this example, we\'ll use \"test-DNS\"          \r\n\r\n\r\nFinally the script has all the information it needs to set up for a phishing attack.  Press enter at the screen below.\r\n\r\n\r\nBelow is a screenshot of the phish preparation build.\r\n\r\nThe script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.  After this you use the scripts at /root/scripts/phish to send your phishing attack.  In the /root/scripts/phish directory there are two scripts for sending phishing attacks.  They are phish.sh and spam.sh.  Below is some information on what to modify in these scripts for your attack.\r\n\r\n/root/scripts/phish/phish.sh\r\n\r\nThis is used to send a phish to a single email address.\r\nThe script needs to be modified for your attack. \r\nvi phish.sh\r\nThe top lines set the \"From\" address.   Edit the from and realname to match the domain you set up prior and whatever username you want.                          \r\n\r\n\r\nThen the last line in the script is the phish.  Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.  If you don\'t have an attachment, delete out the \"-a /path\" from the line.  Then at the end replace target@domain.com with the email address you want to send the phish to.\r\n\r\n\r\n\r\n\r\n\r\n/root/scripts/phish/spam.sh\r\n\r\nThis is used to send a phish to a list of email addresses.  This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.  The only difference here is that you don\'t add the target email address in the script.  Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.\r\n\r\n\r\n\r\n',1,'2023-04-04 22:41:53','2023-04-04 22:41:53','setting-up-a-phishing-attack-buildredteamsh','using-the-nrts','version','','',5),(106,19,'Managing Services (buildredteam.sh)','<p id=\"bkmrk-then-nrts-builds-red\">Then NRTS builds red team infrastructure in docker containers.&nbsp; These containers and services can be managed using the /root/scripts/buildredteam.sh.&nbsp; NOTE: phishing is currently the only service not build in a container, but the script will set up the NRTS host to be able to mimic a domain of your choosing for phishing attacks.&nbsp;</p>\r\n<ul id=\"bkmrk-to-view%2C-restart-or-\">\r\n<li class=\"null\">To View, restart or delete a NRTS red team infrastructure service run /root/scripts/buildredteam.sh to get the the menu below.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b0Yimage.png\" alt=\"image.png\"></li>\r\n<li class=\"null\">Then select option 6 - Container management.&nbsp; From this menu you can view, delete or start a saved container.&nbsp;\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/HCCimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HCCimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n</ul>','Then NRTS builds red team infrastructure in docker containers.  These containers and services can be managed using the /root/scripts/buildredteam.sh.  NOTE: phishing is currently the only service not build in a container, but the script will set up the NRTS host to be able to mimic a domain of your choosing for phishing attacks. \r\n\r\nTo View, restart or delete a NRTS red team infrastructure service run /root/scripts/buildredteam.sh to get the the menu below.                                                                                                                                                            \r\nThen select option 6 - Container management.  From this menu you can view, delete or start a saved container. \r\n\r\n\r\n',1,'2023-04-04 22:42:09','2023-04-04 22:42:09','managing-services-buildredteamsh','using-the-nrts','version','','',2),(108,19,'Managing Services (buildredteam.sh)','<p id=\"bkmrk-then-nrts-builds-red\">Then NRTS builds red team infrastructure in docker containers.&nbsp; These containers and services can be managed using the /root/scripts/buildredteam.sh.&nbsp; NOTE: phishing is currently the only service not build in a container, but the script will set up the NRTS host to be able to mimic a domain of your choosing for phishing attacks.&nbsp;</p>\r\n<ul id=\"bkmrk-to-view%2C-restart-or-\">\r\n<li class=\"null\">To View, restart or delete a NRTS red team infrastructure service run /root/scripts/buildredteam.sh to get the the menu below.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b0Yimage.png\" alt=\"image.png\"></li>\r\n<li class=\"null\">Then select option 6 - Container management.&nbsp; From this menu you can view, delete, start or stop a saved container.&nbsp;\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Kb5image.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">The <strong>View Container Menu </strong>will show you the status of the various service containers.&nbsp; Below is and example.&nbsp; NOTE: This view will show if the container is currently running or stopped.&nbsp; You\'ll also notice the \"phish\" service doesn\'t show a running or stopped status.&nbsp; This is because the phish set up doesn\'t create a docker container.&nbsp; Instead it prep\'s the NRTS host to sending phishing attacks and then phishing attacks are done from other scripts at /root/scripts/phish.&nbsp; For more on phishing attacks goto -&gt; Using the NRTS -&gt; Setting up Phishing attacks\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/llJimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">From the View Menu, you can select a service to see more information about it.&nbsp; It will show all the relevant information, below is examples of looking at the information page for each service type.\r\n<ul id=\"bkmrk-%C2%A0payload-host-servic\">\r\n<li class=\"null\">&nbsp;payload host service (P1)\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/tHEimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">phish set up (phish)\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/wRNimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">redirector (RD1)\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/s1Nimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Cobalt strike teamserver (TS1)\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/oIPimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">The <strong>Delete Container Menu</strong> option shows the following.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/roTimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-from-the-delete-menu\">\r\n<li class=\"null\">From the delete menu you can select a service to delete whether it is running or not.&nbsp; This will stop the container, remove it, remove any IP\'s set on the host for the container and delete out the /root/services/&lt;servicetag&gt; directory.&nbsp; <br></li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">The&nbsp;<strong>Start Container menu</strong> option allows you to start a stopped container.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HB3image.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">The&nbsp;<strong>Stop Container menu&nbsp;</strong>option allows you to stop a running container.&nbsp; This will just kill and remove the container, it can be restarted later with no lose in functionality.\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/gLFimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/gLFimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','Then NRTS builds red team infrastructure in docker containers.  These containers and services can be managed using the /root/scripts/buildredteam.sh.  NOTE: phishing is currently the only service not build in a container, but the script will set up the NRTS host to be able to mimic a domain of your choosing for phishing attacks. \r\n\r\nTo View, restart or delete a NRTS red team infrastructure service run /root/scripts/buildredteam.sh to get the the menu below.                                                                                                                                                            \r\nThen select option 6 - Container management.  From this menu you can view, delete, start or stop a saved container. \r\n\r\n\r\nThe View Container Menu will show you the status of the various service containers.  Below is and example.  NOTE: This view will show if the container is currently running or stopped.  You\'ll also notice the \"phish\" service doesn\'t show a running or stopped status.  This is because the phish set up doesn\'t create a docker container.  Instead it prep\'s the NRTS host to sending phishing attacks and then phishing attacks are done from other scripts at /root/scripts/phish.  For more on phishing attacks goto -> Using the NRTS -> Setting up Phishing attacks\r\n\r\n\r\nFrom the View Menu, you can select a service to see more information about it.  It will show all the relevant information, below is examples of looking at the information page for each service type.\r\n\r\n payload host service (P1)\r\n\r\n\r\nphish set up (phish)\r\n\r\n\r\nredirector (RD1)\r\n\r\n\r\nCobalt strike teamserver (TS1)\r\n\r\n\r\n\r\n\r\nThe Delete Container Menu option shows the following.\r\n\r\n\r\nFrom the delete menu you can select a service to delete whether it is running or not.  This will stop the container, remove it, remove any IP\'s set on the host for the container and delete out the /root/services/<servicetag> directory.  \r\n\r\n\r\nThe Start Container menu option allows you to start a stopped container.\r\n\r\n\r\nThe Stop Container menu option allows you to stop a running container.  This will just kill and remove the container, it can be restarted later with no lose in functionality.\r\n\r\n\r\n\r\n ',1,'2023-04-05 00:01:57','2023-04-05 00:01:57','managing-services-buildredteamsh','using-the-nrts','version','','',3),(109,13,'Creating Cobalt Strike C2 Profiles','<h3 id=\"bkmrk-script-generated-cob\">Script generated Cobalt Strike Profiles</h3>\r\n<ul id=\"bkmrk-there-are-two-differ\">\r\n<li class=\"null\">There are two different solutions installed on the NRTS by default.&nbsp; These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.&nbsp; You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.&nbsp; One of the more common issues I\'ve seen is very slow download transfer rates through a beacon.&nbsp; After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.&nbsp; Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.&nbsp; So I would also advice testing this on your test target as well.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-c2concealer\">Using C2concealer</h4>\r\n<ul id=\"bkmrk-note%3A-c2concealer-is\">\r\n<li class=\"null\">NOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.</li>\r\n<li class=\"null\">There are two arguments that C2concealer accepts; --variants and --hostname.&nbsp; The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.&nbsp; I believe the max number of variants is 10, but I\'d advise setting this to 0.&nbsp; The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.&nbsp; c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.&nbsp; Below is a usage example.</li>\r\n</ul>\r\n<pre id=\"bkmrk-c2concealer---varian\"><code class=\"language-\">C2concealer --variants 0 --hostname humanzoo.com</code></pre>\r\n<p id=\"bkmrk-the-script-will-ask-\">The script will ask for an SSL option, these options are</p>\r\n<ul id=\"bkmrk-self-signed-ssl-cert\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Self-signed SSL cert</li>\r\n<li class=\"null\">LetsEncrypt SSL cert</li>\r\n<li class=\"null\">Existing Keystore</li>\r\n<li class=\"null\">No SSL</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If you plan on using a redirector, you can select \"No SSL\", the NRTS redirector will handle SSL certs for all the domains you use with it.&nbsp; If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.&nbsp; Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want to emulate in your engagement.&nbsp; The LetsEncrypt SSL cert will fail in this closed grayspace environment.</li>\r\n<li class=\"null\">Once you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;</li>\r\n</ul>\r\n<pre id=\"bkmrk-%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23\"><code class=\"language-\">############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################</code></pre>\r\n<ul id=\"bkmrk-it-saves-the-profile\">\r\n<li class=\"null\">It saves the profile with a \"randomly generated named\".profile in the directory you ran C2concealer from.&nbsp; The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.&nbsp; This directory is /root/Profiles.&nbsp; Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.</li>\r\n</ul>\r\n<pre id=\"bkmrk-mv-ba3e5732.profile-\"><code class=\"language-\">mv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/</code></pre>\r\n<ul id=\"bkmrk-at-this-point-the-pr\">\r\n<li class=\"null\">At this point the profile is ready to use, when you go to set up a Cobalt Strike teamserver on the NRTS, the script will see this profile and give you the option to select it.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-sourcepoint\">Using Sourcepoint</h4>\r\n<ul id=\"bkmrk-sourcepoint-isn%27t-ad\">\r\n<li class=\"null\">Sourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.</li>\r\n<li class=\"null\">Sourepoint has a larger number of arguments and gives you a lot more control.&nbsp; For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.</li>\r\n<li class=\"null\">Required Sourcepoint arguments.\r\n<ul>\r\n<li class=\"null\">-host&nbsp;&nbsp;\r\n<ul>\r\n<li class=\"null\">This is the host name it will add as a server variable in the profile</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Outfile\r\n<ul>\r\n<li class=\"null\">This is the name/path to save the profile as</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Injector\r\n<ul>\r\n<li class=\"null\">This is the process injection method, the script provides two options&nbsp;\r\n<ul>\r\n<li class=\"null\">VirtualAllocEx (Great for cross architecture i.e x86 -&gt; x64 and x64-&gt;x86)</li>\r\n<li class=\"null\">NtMapViewOfSection (A more stealthy option, however fails over to VirtualAllocEx)<br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example Usage</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fsourcepoint\"><code class=\"language-bash\">cd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx</code></pre>\r\n<ul id=\"bkmrk-output-will-look-lik\">\r\n<li class=\"null\">Output will look like.</li>\r\n</ul>\r\n<pre id=\"bkmrk-_____-____-_-__-%2F-__\"><code class=\"language-\">\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source</code></pre>\r\n<ul id=\"bkmrk-note%3A-the-profiles-g\">\r\n<li class=\"null\">NOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.&nbsp; So it\'s a good idea to test these profiles before trying to use them.&nbsp; Below is how to test it on a NRTS.</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fcobaltstrik\"><code class=\"language-bash\">cd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile</code></pre>\r\n<p id=\"bkmrk-%C2%A0\"></p>','Script generated Cobalt Strike Profiles\r\n\r\nThere are two different solutions installed on the NRTS by default.  These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.  You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.  One of the more common issues I\'ve seen is very slow download transfer rates through a beacon.  After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.  Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.  So I would also advice testing this on your test target as well.\r\n\r\nUsing C2concealer\r\n\r\nNOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.\r\nThere are two arguments that C2concealer accepts; --variants and --hostname.  The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.  I believe the max number of variants is 10, but I\'d advise setting this to 0.  The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.  c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.  Below is a usage example.\r\n\r\nC2concealer --variants 0 --hostname humanzoo.com\r\nThe script will ask for an SSL option, these options are\r\n\r\n\r\n\r\nSelf-signed SSL cert\r\nLetsEncrypt SSL cert\r\nExisting Keystore\r\nNo SSL\r\n\r\n\r\nIf you plan on using a redirector, you can select \"No SSL\", the NRTS redirector will handle SSL certs for all the domains you use with it.  If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.  Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want to emulate in your engagement.  The LetsEncrypt SSL cert will fail in this closed grayspace environment.\r\nOnce you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;\r\n\r\n############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################\r\n\r\nIt saves the profile with a \"randomly generated named\".profile in the directory you ran C2concealer from.  The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.  This directory is /root/Profiles.  Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.\r\n\r\nmv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/\r\n\r\nAt this point the profile is ready to use, when you go to set up a Cobalt Strike teamserver on the NRTS, the script will see this profile and give you the option to select it.\r\n\r\nUsing Sourcepoint\r\n\r\nSourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.\r\nSourepoint has a larger number of arguments and gives you a lot more control.  For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.\r\nRequired Sourcepoint arguments.\r\n\r\n-host  \r\n\r\nThis is the host name it will add as a server variable in the profile\r\n\r\n\r\n-Outfile\r\n\r\nThis is the name/path to save the profile as\r\n\r\n\r\n-Injector\r\n\r\nThis is the process injection method, the script provides two options \r\n\r\nVirtualAllocEx (Great for cross architecture i.e x86 -> x64 and x64->x86)\r\nNtMapViewOfSection (A more stealthy option, however fails over to VirtualAllocEx)\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample Usage\r\n\r\ncd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx\r\n\r\nOutput will look like.\r\n\r\n\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source\r\n\r\nNOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.  So it\'s a good idea to test these profiles before trying to use them.  Below is how to test it on a NRTS.\r\n\r\ncd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile\r\n',1,'2023-04-05 00:04:22','2023-04-05 00:04:22','creating-cobalt-strike-c2-profiles','using-the-nrts','version','','',5),(110,20,'Managing DNS','<p id=\"bkmrk-the-cyber-range-is-d\">The Cyber range is designed for Red Team domain name registration via the NRTS server.&nbsp; The various service scripts interact with the RootDNS server to create and register domains.&nbsp; To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.&nbsp; To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.&nbsp; Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.&nbsp; The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh</p>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','The Cyber range is designed for Red Team domain name registration via the NRTS server.  The various service scripts interact with the RootDNS server to create and register domains.  To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.  To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.  Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.  The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh\r\n ',1,'2023-04-05 00:09:09','2023-04-05 00:09:09','managing-dns','using-the-nrts','version','','Initial publish',1),(112,20,'Managing DNS','<p id=\"bkmrk-the-cyber-range-is-d\">The Cyber range is designed for Red Team domain name registration via the NRTS server.&nbsp; The various service scripts interact with the RootDNS server to create and register domains.&nbsp; To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.&nbsp; To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.&nbsp; Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.&nbsp; The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh</p>\r\n<ul id=\"bkmrk-launch-the-script-fr\">\r\n<li class=\"null\">Launch the script from the NRTS server</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fscripts-.%2Fm\"><code class=\"language-bash\">cd /root/scripts\r\n./ManageDNS.sh</code></pre>\r\n<ul id=\"bkmrk-this-will-bring-up-t\">\r\n<li class=\"null\">This will bring up the text based menu below.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/X9Ximage.png\" alt=\"image.png\"></li>\r\n<li class=\"null\">Option 1 - View DNS records, will bring up a list of Tags, as shown below\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HfLimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">From the View menu you can pick an option to see the domains that have been registered for the selected tag.&nbsp; For example, below is option 2 for \"OPFOR-chip-test\".</li>\r\n</ul>','The Cyber range is designed for Red Team domain name registration via the NRTS server.  The various service scripts interact with the RootDNS server to create and register domains.  To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.  To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.  Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.  The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh\r\n\r\nLaunch the script from the NRTS server\r\n\r\ncd /root/scripts\r\n./ManageDNS.sh\r\n\r\nThis will bring up the text based menu below.\r\nOption 1 - View DNS records, will bring up a list of Tags, as shown below\r\n\r\n\r\nFrom the View menu you can pick an option to see the domains that have been registered for the selected tag.  For example, below is option 2 for \"OPFOR-chip-test\".\r\n',1,'2023-04-05 00:16:02','2023-04-05 00:16:02','managing-dns','using-the-nrts','version','','',2),(114,20,'Managing DNS (ManageDNS.sh)','<p id=\"bkmrk-the-cyber-range-is-d\">The Cyber range is designed for Red Team domain name registration via the NRTS server.&nbsp; The various service scripts interact with the RootDNS server to create and register domains.&nbsp; To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.&nbsp; To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.&nbsp; Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.&nbsp; The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh</p>\r\n<ul id=\"bkmrk-launch-the-script-fr\">\r\n<li class=\"null\">Launch the script from the NRTS server</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fscripts-.%2Fm\"><code class=\"language-bash\">cd /root/scripts\r\n./ManageDNS.sh</code></pre>\r\n<ul id=\"bkmrk-this-will-bring-up-t\">\r\n<li class=\"null\">This will bring up the text based menu below.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/X9Ximage.png\" alt=\"image.png\"></li>\r\n<li class=\"null\">Option 1 - View DNS records, will bring up a list of Tags, as shown below\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HfLimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">From the View menu you can pick an option to see the domains that have been registered for the selected tag.&nbsp; For example, below is option 2 for \"OPFOR-chip-test\".\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/NWzimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Option 2 - Delete DNS records, will bring up a list of tags as shown below.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/buTimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">When you select to delete DNS for a tag, it will give you a warning and a 10 second delay to allow the user to \"CTRL-C\" out of it.&nbsp; If a user selects delete all it adds a 30 second delay for the same reason.&nbsp; Here is a screenshot showing the deletion of the tag \"OPFOR-Chip-test\"\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/TFUimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Here is what it shows when you enter y to continue.\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/8awimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/8awimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n</ul>','The Cyber range is designed for Red Team domain name registration via the NRTS server.  The various service scripts interact with the RootDNS server to create and register domains.  To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.  To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.  Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.  The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh\r\n\r\nLaunch the script from the NRTS server\r\n\r\ncd /root/scripts\r\n./ManageDNS.sh\r\n\r\nThis will bring up the text based menu below.\r\nOption 1 - View DNS records, will bring up a list of Tags, as shown below\r\n\r\n\r\nFrom the View menu you can pick an option to see the domains that have been registered for the selected tag.  For example, below is option 2 for \"OPFOR-chip-test\".\r\n\r\n\r\nOption 2 - Delete DNS records, will bring up a list of tags as shown below.\r\n\r\n\r\nWhen you select to delete DNS for a tag, it will give you a warning and a 10 second delay to allow the user to \"CTRL-C\" out of it.  If a user selects delete all it adds a 30 second delay for the same reason.  Here is a screenshot showing the deletion of the tag \"OPFOR-Chip-test\"\r\n\r\n\r\nHere is what it shows when you enter y to continue.\r\n\r\n\r\n',1,'2023-04-05 00:35:13','2023-04-05 00:35:13','managing-dns-managednssh','using-the-nrts','version','','',3),(115,18,'Phishing Attack (buildredteam.sh)','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The Phishing attack option doesn\'t build a docker container.&nbsp; Instead it sets up the NRTS host to perform the phishing attack.&nbsp; This step is just preparing the NRTS to mimic a domain for sending the phish.<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to set up phishing attack on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-then-ask-t\">\r\n<li class=\"null\">This will then ask to select a geo-location based IP, first select a country.&nbsp; For this example we\'ll use China. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2LTimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-you\">\r\n<li class=\"null\">Next it will ask you to select a city, for this example we\'ll use Beijing.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/pOSimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pOSimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-the-script-wil\">\r\n<li class=\"null\">Next, the script will ask if you want a randomly generated IP or if you want to manually set it.&nbsp; This guide will walk through both paths. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/zhIimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-set-ips---option-1-%28\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.&nbsp; This will be shown after going over the set IPs manually process.</li>\r\n<li class=\"null\">Setting&nbsp; IPs - Option 2 Set IPs manually.&nbsp; When you select this option it will ask you to provide an IP.&nbsp; Before you can provide one, you will need to know what what IP subnets are available for the Geo-location you previously selected.&nbsp; Enter \"s\" at the menu below to see a list of IP subnets. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/PKKimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit out of thte IP subnet view and get back to the IP input menu.&nbsp; For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ntHimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-type-%22q%22-and-hit-ent\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Type \"q\" and hit enter to exit the IP subnet list, then enter an IP that falls within the subnet you selected.&nbsp; NOTE: do not use the actual listed IP from the list. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HqFimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have set our selected to get a randomly generated IP or set it manually.&nbsp; The next menu screen asks how we want to assign our Domain name.&nbsp; Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Zjsimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assign-dns-%28option-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domain names -&nbsp; Option 1 Use randomly generated one/s.&nbsp; This option will assign random domain names during processing and will move on to the next step.&nbsp; We\'ll cover that after going over the manual domain name option.<br></li>\r\n<li class=\"null\">Assigning Domain names - Option 2 Manually create domain name/s.&nbsp;&nbsp; Selecting this option will bring up&nbsp; the following menu.&nbsp; It will ask for the domain you want to use, for this example we\'ll use goatfarmer.com. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ABNimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav-1\">\r\n<li class=\"null\">At this point we have either selected to have a domain name generated randomly or we manually set a domain name.&nbsp; The script will then want a Tag for your DNS.&nbsp; This tag is used to identify your DNS later, like say after an engagement and you want to remove the the DNS records used.&nbsp; For this example, we\'ll use \"test-DNS\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0yJimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has all the information it needs to set up for a phishing attack.&nbsp; Press enter at the screen below.<br>\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/7saimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Below is a screenshot of the phish preparation build.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Bxbimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<p id=\"bkmrk-the-script-edits-the\">The script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.&nbsp; After this you use the scripts at /root/scripts/phish to send your phishing attack.&nbsp; In the /root/scripts/phish directory there are two scripts for sending phishing attacks.&nbsp; They are phish.sh and spam.sh.&nbsp; Below is some information on what to modify in these scripts for your attack.<br></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F\">\r\n<li class=\"null\">/root/scripts/phish/phish.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a single email address.</li>\r\n<li class=\"null\">The script needs to be modified for your attack.&nbsp;</li>\r\n<li class=\"null\">vi phish.sh</li>\r\n<li class=\"null\">The top lines set the \"From\" address. &nbsp; Edit the from and realname to match the domain you set up prior and whatever username you want. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/eUlimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/eUlimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n<li class=\"null\">Then the last line in the script is the phish.&nbsp; Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.&nbsp; If you don\'t have an attachment, delete out the \"-a /path\" from the line.&nbsp; Then at the end replace target@domain.com with the email address you want to send the phish to.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/xITimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xITimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F-1\">\r\n<li class=\"null\">/root/scripts/phish/spam.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a list of email addresses.&nbsp; This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.&nbsp; The only difference here is that you don\'t add the target email address in the script.&nbsp; Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The Phishing attack option doesn\'t build a docker container.  Instead it sets up the NRTS host to perform the phishing attack.  This step is just preparing the NRTS to mimic a domain for sending the phish.\r\n\r\nUse the following script to set up phishing attack on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"      \r\n\r\n\r\nThis will then ask to select a geo-location based IP, first select a country.  For this example we\'ll use China.         \r\n\r\n\r\nNext it will ask you to select a city, for this example we\'ll use Beijing.        \r\n\r\n\r\nNext, the script will ask if you want a randomly generated IP or if you want to manually set it.  This guide will walk through both paths.          \r\n\r\n\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.  This will be shown after going over the set IPs manually process.\r\nSetting  IPs - Option 2 Set IPs manually.  When you select this option it will ask you to provide an IP.  Before you can provide one, you will need to know what what IP subnets are available for the Geo-location you previously selected.  Enter \"s\" at the menu below to see a list of IP subnets.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit out of thte IP subnet view and get back to the IP input menu.  For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30                                                                                                                                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nType \"q\" and hit enter to exit the IP subnet list, then enter an IP that falls within the subnet you selected.  NOTE: do not use the actual listed IP from the list.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have set our selected to get a randomly generated IP or set it manually.  The next menu screen asks how we want to assign our Domain name.  Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths.                             \r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning Domain names -  Option 1 Use randomly generated one/s.  This option will assign random domain names during processing and will move on to the next step.  We\'ll cover that after going over the manual domain name option.\r\nAssigning Domain names - Option 2 Manually create domain name/s.   Selecting this option will bring up  the following menu.  It will ask for the domain you want to use, for this example we\'ll use goatfarmer.com. \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either selected to have a domain name generated randomly or we manually set a domain name.  The script will then want a Tag for your DNS.  This tag is used to identify your DNS later, like say after an engagement and you want to remove the the DNS records used.  For this example, we\'ll use \"test-DNS\"          \r\n\r\n\r\nFinally the script has all the information it needs to set up for a phishing attack.  Press enter at the screen below.\r\n\r\n\r\nBelow is a screenshot of the phish preparation build.\r\n\r\nThe script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.  After this you use the scripts at /root/scripts/phish to send your phishing attack.  In the /root/scripts/phish directory there are two scripts for sending phishing attacks.  They are phish.sh and spam.sh.  Below is some information on what to modify in these scripts for your attack.\r\n\r\n/root/scripts/phish/phish.sh\r\n\r\nThis is used to send a phish to a single email address.\r\nThe script needs to be modified for your attack. \r\nvi phish.sh\r\nThe top lines set the \"From\" address.   Edit the from and realname to match the domain you set up prior and whatever username you want.                          \r\n\r\n\r\nThen the last line in the script is the phish.  Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.  If you don\'t have an attachment, delete out the \"-a /path\" from the line.  Then at the end replace target@domain.com with the email address you want to send the phish to.\r\n\r\n\r\n\r\n\r\n\r\n/root/scripts/phish/spam.sh\r\n\r\nThis is used to send a phish to a list of email addresses.  This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.  The only difference here is that you don\'t add the target email address in the script.  Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.\r\n\r\n\r\n\r\n',1,'2023-04-05 00:35:38','2023-04-05 00:35:38','phishing-attack-buildredteamsh','using-the-nrts','version','','',6),(117,20,'Managing DNS (ManageDNS.sh)','<p id=\"bkmrk-the-cyber-range-is-d\">The Cyber range is designed for Red Team domain name registration via the NRTS server.&nbsp; The various service scripts interact with the RootDNS server to create and register domains.&nbsp; To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.&nbsp; To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.&nbsp; Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.&nbsp; The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh</p>\r\n<p id=\"bkmrk-note%3A-if-you-want-to\">NOTE: if you want to register DNS outside of the automation built into the buildredteam.sh, there is another script on the NRTS called RegisterDNS.sh.&nbsp; For usage of this go to -&gt; How to guides -&gt; Manual Domain Registration.</p>\r\n<ul id=\"bkmrk-launch-the-script-fr\">\r\n<li class=\"null\">Launch the script from the NRTS server</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fscripts-.%2Fm\"><code class=\"language-bash\">cd /root/scripts\r\n./ManageDNS.sh</code></pre>\r\n<ul id=\"bkmrk-this-will-bring-up-t\">\r\n<li class=\"null\">This will bring up the text based menu below.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/X9Ximage.png\" alt=\"image.png\"></li>\r\n<li class=\"null\">Option 1 - View DNS records, will bring up a list of Tags, as shown below\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HfLimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">From the View menu you can pick an option to see the domains that have been registered for the selected tag.&nbsp; For example, below is option 2 for \"OPFOR-chip-test\".\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/NWzimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Option 2 - Delete DNS records, will bring up a list of tags as shown below.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/buTimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">When you select to delete DNS for a tag, it will give you a warning and a 10 second delay to allow the user to \"CTRL-C\" out of it.&nbsp; If a user selects delete all it adds a 30 second delay for the same reason.&nbsp; Here is a screenshot showing the deletion of the tag \"OPFOR-Chip-test\"\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/TFUimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Here is what it shows when you enter y to continue.\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/8awimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/8awimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n</ul>','The Cyber range is designed for Red Team domain name registration via the NRTS server.  The various service scripts interact with the RootDNS server to create and register domains.  To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.  To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.  Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.  The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh\r\nNOTE: if you want to register DNS outside of the automation built into the buildredteam.sh, there is another script on the NRTS called RegisterDNS.sh.  For usage of this go to -> How to guides -> Manual Domain Registration.\r\n\r\nLaunch the script from the NRTS server\r\n\r\ncd /root/scripts\r\n./ManageDNS.sh\r\n\r\nThis will bring up the text based menu below.\r\nOption 1 - View DNS records, will bring up a list of Tags, as shown below\r\n\r\n\r\nFrom the View menu you can pick an option to see the domains that have been registered for the selected tag.  For example, below is option 2 for \"OPFOR-chip-test\".\r\n\r\n\r\nOption 2 - Delete DNS records, will bring up a list of tags as shown below.\r\n\r\n\r\nWhen you select to delete DNS for a tag, it will give you a warning and a 10 second delay to allow the user to \"CTRL-C\" out of it.  If a user selects delete all it adds a 30 second delay for the same reason.  Here is a screenshot showing the deletion of the tag \"OPFOR-Chip-test\"\r\n\r\n\r\nHere is what it shows when you enter y to continue.\r\n\r\n\r\n',1,'2023-04-05 00:38:36','2023-04-05 00:38:36','managing-dns-managednssh','using-the-nrts','version','','',4),(118,21,'Reverting the NRTS','<p id=\"bkmrk-if-you-want-to-wipe-\">If you want to wipe out all containers/services/configurations on an NRTS, there is a revert.sh script to do this.&nbsp; It\'s located on the NRTS at /root/scripts/revert.sh</p>\r\n<p id=\"bkmrk-below-is-usage\">below is usage</p>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fscripts-.%2Fr\"><code class=\"language-bash\">cd /root/scripts\r\n./revert.sh</code></pre>\r\n<ul id=\"bkmrk-when-you-run-this%2C-i\">\r\n<li class=\"null\">When you run this, it will make sure you want to by making you confirm.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Awbimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n</ul>','If you want to wipe out all containers/services/configurations on an NRTS, there is a revert.sh script to do this.  It\'s located on the NRTS at /root/scripts/revert.sh\r\nbelow is usage\r\ncd /root/scripts\r\n./revert.sh\r\n\r\nWhen you run this, it will make sure you want to by making you confirm.\r\n\r\n\r\n',1,'2023-04-05 00:42:15','2023-04-05 00:42:15','reverting-the-nrts','using-the-nrts','version','','Initial publish',1),(119,22,'Cred list','','',1,'2023-04-05 00:47:39','2023-04-05 00:47:39','cred-list','default-creds-for-all-the-things','version','','Initial publish',1),(121,22,'Cred list','<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\" id=\"bkmrk-system-username-pass\"><colgroup><col style=\"width: 33.3745%;\"><col style=\"width: 33.3745%;\"><col style=\"width: 33.3745%;\"></colgroup>\r\n<tbody>\r\n<tr>\r\n<td>System<br></td>\r\n<td>Username<br></td>\r\n<td>Password<br></td>\r\n</tr>\r\n<tr>\r\n<td>IA-Proxy<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>CA-Server<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>rootDNS<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>web-services<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Traffic-Gen<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Traffic-WebHost<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>NRTS<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Adminnet-DHCP<br></td>\r\n<td>vyos<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>SI-router<br></td>\r\n<td>vyos<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>redbook.com web GUI (bookstack)<br></td>\r\n<td>admin@admin.com<br></td>\r\n<td>toortoor</td>\r\n</tr>\r\n<tr>\r\n<td>dropbox.com web GUI (owncloud)<br></td>\r\n<td>admin<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n</tbody>\r\n</table>','\r\n\r\n\r\nSystem\r\nUsername\r\nPassword\r\n\r\n\r\nIA-Proxy\r\nuser & root\r\ntoor\r\n\r\n\r\nCA-Server\r\nuser & root\r\ntoor\r\n\r\n\r\nrootDNS\r\nuser & root\r\ntoor\r\n\r\n\r\nweb-services\r\nuser & root\r\ntoor\r\n\r\n\r\nTraffic-Gen\r\nuser & root\r\ntoor\r\n\r\n\r\nTraffic-WebHost\r\nuser & root\r\ntoor\r\n\r\n\r\nNRTS\r\nuser & root\r\ntoor\r\n\r\n\r\nAdminnet-DHCP\r\nvyos\r\ntoor\r\n\r\n\r\nSI-router\r\nvyos\r\ntoor\r\n\r\n\r\nredbook.com web GUI (bookstack)\r\nadmin@admin.com\r\ntoortoor\r\n\r\n\r\ndropbox.com web GUI (owncloud)\r\nadmin\r\ntoor\r\n\r\n\r\n',1,'2023-04-05 00:58:07','2023-04-05 00:58:07','cred-list','default-creds-for-all-the-things','version','','',2),(122,22,'Cred list','<table id=\"bkmrk-system-username-pass\" style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><colgroup><col style=\"width: 33.3745%;\"><col style=\"width: 33.3745%;\"><col style=\"width: 33.3745%;\"></colgroup>\r\n<tbody>\r\n<tr>\r\n<td><strong>System</strong><br></td>\r\n<td><strong>Username</strong><br></td>\r\n<td><strong>Password</strong><br></td>\r\n</tr>\r\n<tr>\r\n<td>IA-Proxy<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>CA-Server<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>rootDNS<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>web-services<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Traffic-Gen<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Traffic-WebHost<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>NRTS<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Adminnet-DHCP<br></td>\r\n<td>vyos<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>SI-router<br></td>\r\n<td>vyos<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>redbook.com web GUI (bookstack)<br></td>\r\n<td>admin@admin.com<br></td>\r\n<td>toortoor</td>\r\n</tr>\r\n<tr>\r\n<td>dropbox.com web GUI (owncloud)<br></td>\r\n<td>admin<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n</tbody>\r\n</table>','\r\n\r\n\r\nSystem\r\nUsername\r\nPassword\r\n\r\n\r\nIA-Proxy\r\nuser & root\r\ntoor\r\n\r\n\r\nCA-Server\r\nuser & root\r\ntoor\r\n\r\n\r\nrootDNS\r\nuser & root\r\ntoor\r\n\r\n\r\nweb-services\r\nuser & root\r\ntoor\r\n\r\n\r\nTraffic-Gen\r\nuser & root\r\ntoor\r\n\r\n\r\nTraffic-WebHost\r\nuser & root\r\ntoor\r\n\r\n\r\nNRTS\r\nuser & root\r\ntoor\r\n\r\n\r\nAdminnet-DHCP\r\nvyos\r\ntoor\r\n\r\n\r\nSI-router\r\nvyos\r\ntoor\r\n\r\n\r\nredbook.com web GUI (bookstack)\r\nadmin@admin.com\r\ntoortoor\r\n\r\n\r\ndropbox.com web GUI (owncloud)\r\nadmin\r\ntoor\r\n\r\n\r\n',1,'2023-04-05 00:58:39','2023-04-05 00:58:39','cred-list','default-creds-for-all-the-things','version','','',3),(124,22,'Cred list','<table id=\"bkmrk-system-username-pass\" style=\"border-collapse: collapse; width: 61.2346%;\" border=\"1\"><colgroup><col style=\"width: 47.0516%;\"><col style=\"width: 29.5141%;\"><col style=\"width: 23.4343%;\"></colgroup>\r\n<tbody>\r\n<tr>\r\n<td><strong>System</strong><br></td>\r\n<td><strong>Username</strong><br></td>\r\n<td><strong>Password</strong><br></td>\r\n</tr>\r\n<tr>\r\n<td>IA-Proxy<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>CA-Server<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td class=\"align-left\">rootDNS<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>web-services<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Traffic-Gen<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Traffic-WebHost<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>NRTS<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Adminnet-DHCP<br></td>\r\n<td>vyos<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>SI-router<br></td>\r\n<td>vyos<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>redbook.com web GUI (bookstack)<br></td>\r\n<td>admin@admin.com<br></td>\r\n<td>toortoor</td>\r\n</tr>\r\n<tr>\r\n<td>dropbox.com web GUI (owncloud)<br></td>\r\n<td>admin<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n</tbody>\r\n</table>','\r\n\r\n\r\nSystem\r\nUsername\r\nPassword\r\n\r\n\r\nIA-Proxy\r\nuser & root\r\ntoor\r\n\r\n\r\nCA-Server\r\nuser & root\r\ntoor\r\n\r\n\r\nrootDNS\r\nuser & root\r\ntoor\r\n\r\n\r\nweb-services\r\nuser & root\r\ntoor\r\n\r\n\r\nTraffic-Gen\r\nuser & root\r\ntoor\r\n\r\n\r\nTraffic-WebHost\r\nuser & root\r\ntoor\r\n\r\n\r\nNRTS\r\nuser & root\r\ntoor\r\n\r\n\r\nAdminnet-DHCP\r\nvyos\r\ntoor\r\n\r\n\r\nSI-router\r\nvyos\r\ntoor\r\n\r\n\r\nredbook.com web GUI (bookstack)\r\nadmin@admin.com\r\ntoortoor\r\n\r\n\r\ndropbox.com web GUI (owncloud)\r\nadmin\r\ntoor\r\n\r\n\r\n',1,'2023-04-05 00:59:29','2023-04-05 00:59:29','cred-list','default-creds-for-all-the-things','version','','',4);
/*!40000 ALTER TABLE `page_revisions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages`
--

DROP TABLE IF EXISTS `pages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pages` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `book_id` int(11) NOT NULL,
  `chapter_id` int(11) NOT NULL,
  `name` varchar(191) NOT NULL,
  `slug` varchar(191) NOT NULL,
  `html` longtext NOT NULL,
  `text` longtext NOT NULL,
  `priority` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `updated_by` int(11) NOT NULL,
  `draft` tinyint(1) NOT NULL DEFAULT 0,
  `markdown` longtext NOT NULL DEFAULT '',
  `revision_count` int(11) NOT NULL,
  `template` tinyint(1) NOT NULL DEFAULT 0,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `owned_by` int(10) unsigned NOT NULL,
  `editor` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `pages_slug_index` (`slug`),
  KEY `pages_book_id_index` (`book_id`),
  KEY `pages_chapter_id_index` (`chapter_id`),
  KEY `pages_priority_index` (`priority`),
  KEY `pages_created_by_index` (`created_by`),
  KEY `pages_updated_by_index` (`updated_by`),
  KEY `pages_draft_index` (`draft`),
  KEY `pages_template_index` (`template`),
  KEY `pages_owned_by_index` (`owned_by`),
  KEY `pages_updated_at_index` (`updated_at`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages`
--

LOCK TABLES `pages` WRITE;
/*!40000 ALTER TABLE `pages` DISABLE KEYS */;
INSERT INTO `pages` VALUES (1,1,0,'New Page','new-page','<div drawio-diagram=\"1\" contenteditable=\"false\" id=\"bkmrk-\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-03/drawing-1-1680023230.png\"></div>','',2,'2023-03-28 22:06:51','2023-03-28 23:24:32',1,1,0,'',1,0,'2023-03-28 23:24:32',1,''),(2,2,0,'Network Diagram','network-diagram','<div drawio-diagram=\"15\" id=\"bkmrk-\" contenteditable=\"false\"><img id=\"bkmrk--1\" src=\"https://redbook.com/uploads/images/drawio/2023-04/drawing-1-1680524770.png\"></div>\r\n<h3 id=\"bkmrk-network-diagram-note\">Network Diagram Notes</h3>\r\n<p id=\"bkmrk-si-router---this-is-\">SI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.&nbsp; It has 4 interfaces that connect to the following virtual switches.</p>\r\n<ul id=\"bkmrk-servicesnet---the-si\">\r\n<li class=\"null\">ServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.</li>\r\n<li class=\"null\">Grayspace - The SI-Router will router apprx 1500 IP subnets.&nbsp; These subnets are organized by geo-locations on the NRTS server.&nbsp; To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.&nbsp; The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.</li>\r\n<li class=\"null\">AdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet</li>\r\n<li class=\"null\">RangeWAN - This is where you will connect target domains to the Cyber Range environment.</li>\r\n</ul>\r\n<p id=\"bkmrk-servicenet---esxi-sw\">ServiceNet - ESXI switch that connects to the SI router.&nbsp; Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.</p>\r\n<ul id=\"bkmrk-rootdns---this-is-th\">\r\n<li class=\"null\">RootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.&nbsp; Additionally it has Googles 8.8.8.8 IP address.&nbsp; This server is used for managing grayspace DNS.&nbsp; You can register DNS manually or use the automation scripts build on the NRTS server.&nbsp; For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.</li>\r\n<li class=\"null\">Web-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.&nbsp; These services are build in docker containers and provide the following;\r\n<ul>\r\n<li class=\"null\">Redbook.com - This the bookstack app you are currently looking at.&nbsp; This is used for documentation and covers an overview of the Cyber Range environment.&nbsp; You can also expand upon this with your own documentation for whatever.</li>\r\n<li class=\"null\">dropbox.com - This is an owncloud server to simulated a cloud based file hosting service.&nbsp; It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.&nbsp; See the OPFOR section for some methods.</li>\r\n<li class=\"null\">pastebin.com - This is a haste bin server to simulated the real world pastebin.&nbsp; This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.</li>\r\n<li class=\"null\">diagrams.net - This is draw.io and used for generating whatever diagram you want.&nbsp; Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">CA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.&nbsp; In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.&nbsp; Once that is done, any certs you create with the CA-Server will appear as trusted.&nbsp; For how to generate SSL certs as well as code signing binarys, see CA-Server details.</li>\r\n<li class=\"null\">Traffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.&nbsp; See Traffic-Gen details for more information on this.</li>\r\n<li class=\"null\">Traffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.&nbsp; This exists to allow&nbsp; Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.</li>\r\n</ul>\r\n<p id=\"bkmrk-grayspace---this-is-\">Grayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.&nbsp; By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.&nbsp; Feel free to add whatever else you want.&nbsp;</p>\r\n<ul id=\"bkmrk-nrts-%28not-red-team-s\">\r\n<li class=\"null\">NRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.&nbsp; See NRTS for more details.</li>\r\n<li class=\"null\">Kali - basic kali build, add whatever tools you want.</li>\r\n<li class=\"null\">FlareVM - basic windows VM, but I would advise installing Visual Studios.</li>\r\n</ul>\r\n<p id=\"bkmrk-adminnet---this-is-a\">AdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.&nbsp; There are main servers on this network, AdminNet-DHCP and IA-Proxy.&nbsp; Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.</p>\r\n<ul id=\"bkmrk-adminnet-dhcp---prov\">\r\n<li class=\"null\">Adminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.&nbsp; For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.</li>\r\n<li class=\"null\">IA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.&nbsp; To access real world internet from any VM in the cyber range, just set the proxy to <a href=\"http://172.30.0.2:9999\">http://172.30.0.2:9999</a></li>\r\n</ul>\r\n<p id=\"bkmrk-rangewan---this-is-f\">RangeWAN - This is for connection one or more target domains to the cyber range.&nbsp; Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.&nbsp; Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.&nbsp; More specific details are explained in the target range planning section</p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','\r\nNetwork Diagram Notes\r\nSI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.  It has 4 interfaces that connect to the following virtual switches.\r\n\r\nServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.\r\nGrayspace - The SI-Router will router apprx 1500 IP subnets.  These subnets are organized by geo-locations on the NRTS server.  To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.  The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.\r\nAdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet\r\nRangeWAN - This is where you will connect target domains to the Cyber Range environment.\r\n\r\nServiceNet - ESXI switch that connects to the SI router.  Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.\r\n\r\nRootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.  Additionally it has Googles 8.8.8.8 IP address.  This server is used for managing grayspace DNS.  You can register DNS manually or use the automation scripts build on the NRTS server.  For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.\r\nWeb-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.  These services are build in docker containers and provide the following;\r\n\r\nRedbook.com - This the bookstack app you are currently looking at.  This is used for documentation and covers an overview of the Cyber Range environment.  You can also expand upon this with your own documentation for whatever.\r\ndropbox.com - This is an owncloud server to simulated a cloud based file hosting service.  It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.  See the OPFOR section for some methods.\r\npastebin.com - This is a haste bin server to simulated the real world pastebin.  This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.\r\ndiagrams.net - This is draw.io and used for generating whatever diagram you want.  Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.\r\n\r\n\r\nCA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.  In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.  Once that is done, any certs you create with the CA-Server will appear as trusted.  For how to generate SSL certs as well as code signing binarys, see CA-Server details.\r\nTraffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.  See Traffic-Gen details for more information on this.\r\nTraffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.  This exists to allow  Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.\r\n\r\nGrayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.  By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.  Feel free to add whatever else you want. \r\n\r\nNRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.  See NRTS for more details.\r\nKali - basic kali build, add whatever tools you want.\r\nFlareVM - basic windows VM, but I would advise installing Visual Studios.\r\n\r\nAdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.  There are main servers on this network, AdminNet-DHCP and IA-Proxy.  Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.\r\n\r\nAdminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.  For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.\r\nIA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.  To access real world internet from any VM in the cyber range, just set the proxy to http://172.30.0.2:9999\r\n\r\nRangeWAN - This is for connection one or more target domains to the cyber range.  Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.  Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.  More specific details are explained in the target range planning section\r\n',2,'2023-03-28 22:36:23','2023-04-04 20:30:55',1,1,0,'',5,0,NULL,1,''),(3,2,0,'Network Diagram Notes','network-diagram-notes','<p id=\"bkmrk-si-router---this-is-\">SI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.&nbsp; It has 4 interfaces that connect to the following virtual switches.</p>\r\n<ul id=\"bkmrk-servicesnet---the-si\">\r\n<li class=\"null\">ServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.</li>\r\n<li class=\"null\">Grayspace - The SI-Router will router apprx 1500 IP subnets.&nbsp; These subnets are organized by geo-locations on the NRTS server.&nbsp; To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.&nbsp; The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.</li>\r\n<li class=\"null\">AdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet</li>\r\n<li class=\"null\">RangeWAN - This is where you will connect target domains to the Cyber Range environment.</li>\r\n</ul>\r\n<p id=\"bkmrk-servicenet---esxi-sw\">ServiceNet - ESXI switch that connects to the SI router.&nbsp; Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.</p>\r\n<ul id=\"bkmrk-rootdns---this-is-th\">\r\n<li class=\"null\">RootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.&nbsp; Additionally it has Googles 8.8.8.8 IP address.&nbsp; This server is used for managing grayspace DNS.&nbsp; You can register DNS manually or use the automation scripts build on the NRTS server.&nbsp; For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.</li>\r\n<li class=\"null\">Web-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.&nbsp; These services are build in docker containers and provide the following;\r\n<ul>\r\n<li class=\"null\">Redbook.com - This the bookstack app you are currently looking at.&nbsp; This is used for documentation and covers an overview of the Cyber Range environment.&nbsp; You can also expand upon this with your own documentation for whatever.</li>\r\n<li class=\"null\">dropbox.com - This is an owncloud server to simulated a cloud based file hosting service.&nbsp; It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.&nbsp; See the OPFOR section for some methods.</li>\r\n<li class=\"null\">pastebin.com - This is a haste bin server to simulated the real world pastebin.&nbsp; This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.</li>\r\n<li class=\"null\">diagrams.net - This is draw.io and used for generating whatever diagram you want.&nbsp; Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">CA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.&nbsp; In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.&nbsp; Once that is done, any certs you create with the CA-Server will appear as trusted.&nbsp; For how to generate SSL certs as well as code signing binarys, see CA-Server details.</li>\r\n<li class=\"null\">Traffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.&nbsp; See Traffic-Gen details for more information on this.</li>\r\n<li class=\"null\">Traffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.&nbsp; This exists to allow&nbsp; Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.</li>\r\n</ul>\r\n<p id=\"bkmrk-grayspace---this-is-\">Grayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.&nbsp; By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.&nbsp; Feel free to add whatever else you want.&nbsp;</p>\r\n<ul id=\"bkmrk-nrts-%28not-red-team-s\">\r\n<li class=\"null\">NRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.&nbsp; See NRTS for more details.</li>\r\n<li class=\"null\">Kali - basic kali build, add whatever tools you want.</li>\r\n<li class=\"null\">FlareVM - basic windows VM, but I would advise installing Visual Studios.</li>\r\n</ul>\r\n<p id=\"bkmrk-adminnet---this-is-a\">AdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.&nbsp; There are main servers on this network, AdminNet-DHCP and IA-Proxy.&nbsp; Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.</p>\r\n<ul id=\"bkmrk-adminnet-dhcp---prov\">\r\n<li class=\"null\">Adminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.&nbsp; For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.</li>\r\n<li class=\"null\">IA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.&nbsp; To access real world internet from any VM in the cyber range, just set the proxy to <a href=\"http://172.30.0.2:9999\">http://172.30.0.2:9999</a></li>\r\n</ul>\r\n<p id=\"bkmrk-rangewan---this-is-f\">RangeWAN - This is for connection one or more target domains to the cyber range.&nbsp; Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.&nbsp; Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.&nbsp; More specific details are explained in the target range planning section</p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','SI-Router - This is a vyos router that handles all the routing within the Cyber Range and to your target domains.  It has 4 interfaces that connect to the following virtual switches.\r\n\r\nServicesNet - The SI-Router will route several IP subnets related to systems on the ServicesNet network.\r\nGrayspace - The SI-Router will router apprx 1500 IP subnets.  These subnets are organized by geo-locations on the NRTS server.  To see a list of available subnets and coorisponding geo-locations, look on the NRTS at /root/backbonerouters.  The NRTS will use the list of these subnets to automate IP address assignments for various OPFOR infastructure services.\r\nAdminNet - This is used as a network to allow all Cyber Range VMs access to the real internet\r\nRangeWAN - This is where you will connect target domains to the Cyber Range environment.\r\n\r\nServiceNet - ESXI switch that connects to the SI router.  Used for hosting the RootDNS, Web-services, CA-Server, Traffic-Gen, and Traffic-Web host servers.\r\n\r\nRootDNS - This is the Grayspaces DNS server, it has been IP\'ed with all of the real world root DNS server IPs, meaning the A-root through M-root real world DNS servers.  Additionally it has Googles 8.8.8.8 IP address.  This server is used for managing grayspace DNS.  You can register DNS manually or use the automation scripts build on the NRTS server.  For more details on the RootDNS servers configuration see Grayspace Detailed Configurations - rootDNS.\r\nWeb-Services - This provides a few simulated real world services that can be used by OPFOR or general range management.  These services are build in docker containers and provide the following;\r\n\r\nRedbook.com - This the bookstack app you are currently looking at.  This is used for documentation and covers an overview of the Cyber Range environment.  You can also expand upon this with your own documentation for whatever.\r\ndropbox.com - This is an owncloud server to simulated a cloud based file hosting service.  It has a web dav, api\'s and provides additional ways for OPFOR to host payloads.  See the OPFOR section for some methods.\r\npastebin.com - This is a haste bin server to simulated the real world pastebin.  This can also be used for hosting code snippets that can be pulled from grayspace for OPFOR needs.\r\ndiagrams.net - This is draw.io and used for generating whatever diagram you want.  Its integrated into redbook (bookstack) and was used to make the network diagrams found in this documenation.\r\n\r\n\r\nCA-Server - This is an openssl certificate authority and intermediate certificate authority to simulate a real world CA server to provide SSL certificates for your training environment.  In order to make these certs trusted in your target domain environments you will need to copy the ca.globalcert.com.crt.pem and int.globalcert.com.crt.pem over to your target domain domain controller and add them to target domain Trust stores via GPO, see xxx for how to do this.  Once that is done, any certs you create with the CA-Server will appear as trusted.  For how to generate SSL certs as well as code signing binarys, see CA-Server details.\r\nTraffic-Gen - This as a ubuntu server running customizable docker containers that will send emails to users in your target domain to simulated real world traffic.  See Traffic-Gen details for more information on this.\r\nTraffic-WebHost - This is a ubuntu server running apache and hosting several virtual host websites.  This exists to allow  Ghost agents on target domains to be able to open browsers and hit various websites for traffic generation purposes.\r\n\r\nGrayspace - This is an ESXI virtual switch used to connect OPFOR infastructure systems.  By default the Cyber range instructions will build out an NRTS server, a Kali server, and a FlareVM.  Feel free to add whatever else you want. \r\n\r\nNRTS (Not Red Team Server) - This is a customized ubuntu server that can create various red team infastructure systems in docker containers.  See NRTS for more details.\r\nKali - basic kali build, add whatever tools you want.\r\nFlareVM - basic windows VM, but I would advise installing Visual Studios.\r\n\r\nAdminNet - This is an ESXI virtual Switch and is used to enable real world internet access to all the VM\'s in the Cyber Range.  There are main servers on this network, AdminNet-DHCP and IA-Proxy.  Additionally all of the VMs in this cyber range have a secondary nic built that connects to this network and will automatically get a DHCP lease on the 172.30.0.0/21 subnet.\r\n\r\nAdminnet-DHCP - provides DHCP services to all systems in the Cyber Range, with the exception of the target domains.  For target domains it\'s preferable to add a real internet proxy in its domain verses using this proxy for reason better explained in the target range planning section.\r\nIA-Proxy - This is a ubuntu server running a squid proxy to allow Cyber Range VM\'s internet access.  To access real world internet from any VM in the cyber range, just set the proxy to http://172.30.0.2:9999\r\n\r\nRangeWAN - This is for connection one or more target domains to the cyber range.  Once you\'ve build out a target domain, pick an public IP address for the WAN connection point and connect it to this virual switch.  Then edit the RangeWAN interface on the SI router to complete the connect of your target domain to the cyber range.  More specific details are explained in the target range planning section\r\n',3,'2023-03-28 23:24:56','2023-04-04 20:31:12',1,1,0,'',3,0,'2023-04-04 20:31:12',1,''),(4,3,0,'RootDNS','rootdns','<p id=\"bkmrk-the-rootdns-server-i\">The RootDNS server is built on Ubuntu 22.01 and runs a recursive bind9 server.&nbsp; To simulate real world DNS, the server is configured with the following IP addresses;</p>\r\n<ul id=\"bkmrk-8.8.8.8---simulated-\">\r\n<li class=\"null\">8.8.8.8 - simulated Googles recursive DNS server</li>\r\n<li class=\"null\">198.41.0.4 - simulates the real world A-root server</li>\r\n<li class=\"null\">192.228.79.59 - simulates the real world B-root server</li>\r\n<li class=\"null\">192.33.4.12- simulates the real world C-root server</li>\r\n<li class=\"null\">128.8.10.90- simulates the real world D-root server</li>\r\n<li class=\"null\">192.203.230.10- simulates the real world E-root server</li>\r\n<li class=\"null\">195.5.5.241- simulates the real world F-root server</li>\r\n<li class=\"null\">192.112.36.4- simulates the real world G-root server</li>\r\n<li class=\"null\">128.63.2.53- simulates the real world H-root server</li>\r\n<li class=\"null\">192.36.148.17- simulates the real world I-root server</li>\r\n<li class=\"null\">192.58.128.30- simulates the real world J-root server</li>\r\n<li class=\"null\">193.0.15.129- simulates the real world K-root server</li>\r\n<li class=\"null\">199.7.83.42- simulates the real world L-root server</li>\r\n<li class=\"null\">202.12.27.33- simulates the real world M-root server</li>\r\n</ul>\r\n<p id=\"bkmrk-the-rootdns-server-i-1\">The RootDNS server in the Cyber Range handles all \"grayspace\" DNS.&nbsp; To keep this a bit organized, the configuration for the bind9 server has been broken up into functional sections.&nbsp; Below is a listing of the file/folder structure along with a brief explanation of its purpose.</p>\r\n<p id=\"bkmrk-bind9-configuration-\">BIND9 CONFIGURATION Overview</p>\r\n<ul id=\"bkmrk-configuration-files-\">\r\n<li class=\"null\">Configuration Files\r\n<ul>\r\n<li class=\"null\">/etc/bind/named.conf&nbsp; &nbsp;- Contains \"includes\" for the segmented out \"named.conf\" files.</li>\r\n<li class=\"null\">/etc/bind/named.conf.options&nbsp; - Contains the bind9 options that make it a recursive DNS server.&nbsp; This file also specifies the IPs the server listens on.</li>\r\n<li class=\"null\">/etc/bind/named.conf.default-zones - This is a default zone created by bind9, it has been unmodified.</li>\r\n<li class=\"null\">/etc/bind/named.conf.OPFOR - This contains the domain references for all OPFOR DNS entries.&nbsp; For the most part entries here are managed via scripts on the RootDNS server&nbsp; and NRTS servers.</li>\r\n<li class=\"null\">/etc/bind/named.conf.RANGE - This contains the domain references for all DNS needed by the ServicesNet systems and target domains, with the exception of the traffic-gen and traffic-webhost servers</li>\r\n<li class=\"null\">/etc/bind/named.conf.TRAFFIC - This contains the domain references for all traffic gen systems.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">FOLDERS\r\n<ul>\r\n<li class=\"null\">/etc/bind/OPFOR - Stores all domain zones files for all the referenced domains in the named.conf.OPFOR config file.</li>\r\n<li class=\"null\">/etc/bind/RANGE - Stores all domain zone files for all referenced domains in the named.conf.RANGE config file.</li>\r\n<li class=\"null\">/etc/bind/TRAFFIC - Stores all domain zone files for all the referenced domains in the named.conf.TRAFFIC config file.</li>\r\n<li class=\"null\">/etc/bind/blackhole - This contains two files.\r\n<ul>\r\n<li class=\"null\">db.blackhole - this is a zone file that points to 127.0.0.1</li>\r\n<li class=\"null\">Rangism.zone - this is a conf file that references several domains and pointing them all to the db.blackhole.&nbsp; This is used to capture various auto generated OS and application DNS requests for real world systems that can\'t be reached or replicated in this environment.&nbsp; Things like updateapi.google.com, etc.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-dns-automation-overv\">DNS AUTOMATION Overview</p>\r\n<p id=\"bkmrk-the-root-dns-server-\">The root DNS server has some automation built in to automate OPFOR DNS registration.&nbsp; The scripts and path for adding/removing OPFOR DNS entries are listed below along with an explanation of their functionality.</p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fadd-re\">\r\n<li class=\"null\">/root/scripts/add-REDTEAM-DNS.sh\r\n<ul>\r\n<li class=\"null\">This script will create a PID lock when it\'s executed to prevent the script from running more than one instance.&nbsp; If this was ran concurrently, it would likely result in a corruption of the bind configuration.&nbsp; The way it works is the DNS registration section of the NRTS server\'s /root/scripts/buildredteam.sh script will SCP a dns file containing domain names and IPs using an SSH key, then remotely run the add-REDTEAM-DNS.sh script and feed it the dns file as an argument.&nbsp; The script will take this list, check if the domain already exists in any of the zone file locations, aka, RANGE, OPFOR, and TRAFFIC zone file folders.&nbsp; If it exists in the RANGE or TRAFFIC folder, it will skip that DNS registration request, if it exists in the OPFOR folder, it will assume the user wants to update the record and process it.&nbsp; It then creates a zone file for each domain, addd it to the OPFOR directory and created a copy of the named.conf.OPFOR config file and append the zone reference in the copy if the reference didn\'t already exist.&nbsp; It will then run a named-check-conf against the copy, if this passed, it will replace the named.conf.OPFOR with the copy smf restart the bind9 service to read in the new configurations.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/delete-REDTEAM-DNS.sh\r\n<ul>\r\n<li class=\"null\">This script will remove DNS records from the OPFOR directory as well as remove the zone file references from the named.conf.OPFOR config file.&nbsp; The way this works is when the add-REDTEAM-DNS.sh script runs and originally added the OPFOR DNS, it will tag the zone file as well as add tags to the section in the named.conf.OPFOR file.&nbsp; This tag is a user added value that is entered when the user requests DNS registration from an NRTS server.&nbsp; On the NRTS there is a script for managing DNS at /root/scripts/ManageDNS.sh.&nbsp; This script will connect to the rootDNS server and get a list of all OPFOR DNS organized by tags.&nbsp; A user can select OPFOR DNS entries to be removed by selecting its tag.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/makednsfile.sh\r\n<ul>\r\n<li class=\"null\">This script will generate a DNS file to feed to add-REDTEAM-DNS.sh.&nbsp; It\'s for when a user elects randomly generated domains.&nbsp; In this case the NRTS will send a list of IPs to the rootDNS server and this script will randomly select available domains from the masterdomainlist.txt file and pair one it to each of the IP in the list.&nbsp; When it selects a domain from the masterdomainlist, it will edit that domain by adding a \"#\" to the front of the domain to prevent it from being reused.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/masterdomainlist.txt\r\n<ul>\r\n<li class=\"null\">This is a file that contains roughly 11000 domain names.&nbsp; This list was generated by scrapping a website that listed expired domain names.&nbsp; The goal here is to have a large pool of domains that aren\'t owned in the real world.&nbsp; The concept here is that these domains would be available to be purchased by an adversary.&nbsp; It wouldn\'t make sense for an adversary to be able to use www.microsoft.com for their C2.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/autoredirector/resetmasterdomainlist.sh\r\n<ul>\r\n<li class=\"null\">This script will remove and \"#\" from the front of any domain names in the list.&nbsp; This is for when you\'ve deleted out all red team DNS and want to make all previously used domains from the list available again.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">NOTE: the other half of DNS automation references on the NRTS, /root/scripts/buildredteam.sh, /root/scripts/ManageDNS.sh and /root/scripts/RegisterDNS.sh are explained on the NRTS overview.</li>\r\n</ul>\r\n<p id=\"bkmrk-how-to-manually-add-\">HOW TO MANUALLY ADD DNS</p>\r\n<ul id=\"bkmrk-to-add-new-target-do\">\r\n<li class=\"null\">To add new target domain records, you will need to create a zone file in the /etc/bind/RANGE and modify the /etc/bind/named.conf.RANGE file to add the reference.&nbsp; There is an example zone file in the /etc/bind/RANGE directory to use as a reference called db.example.com.&nbsp; Then, to add the reference in the named.conf.RANGE file, simply follow the syntax used for other zone files.</li>\r\n<li class=\"null\">Once you have created the zone file and added the reference, you need to run \"service bind9 restart\" to read in the new domain.&nbsp; However, before doing this it\'s a good idea to check your syntax first.&nbsp; To test your zone file run\r\n<ul>\r\n<li class=\"null\">named-checkzone mydomain.com /etc/bind/RANGE/db.mydomain.com&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;- replace \"mydomain.com\" with your domain.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Then to check if you messed up adding the reference run.\r\n<ul>\r\n<li class=\"null\">named-checkconfig /etc/bind/named.conf.RANGE</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If either errors, check your syntax, make corrections and try again.&nbsp; Once they both pass run \"service bind9 restart\"</li>\r\n<li class=\"null\">To add DNS manually in either TRAFFIC or OPFOR, follow the same steps, just make sure you are adding the zone file to the correct directory and you are modifying the correct \"named.conf.xxxx\" file.</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\" style=\"padding-left: 40px;\"></p>\r\n<p id=\"bkmrk-%C2%A0-1\" style=\"padding-left: 40px;\"></p>','The RootDNS server is built on Ubuntu 22.01 and runs a recursive bind9 server.  To simulate real world DNS, the server is configured with the following IP addresses;\r\n\r\n8.8.8.8 - simulated Googles recursive DNS server\r\n198.41.0.4 - simulates the real world A-root server\r\n192.228.79.59 - simulates the real world B-root server\r\n192.33.4.12- simulates the real world C-root server\r\n128.8.10.90- simulates the real world D-root server\r\n192.203.230.10- simulates the real world E-root server\r\n195.5.5.241- simulates the real world F-root server\r\n192.112.36.4- simulates the real world G-root server\r\n128.63.2.53- simulates the real world H-root server\r\n192.36.148.17- simulates the real world I-root server\r\n192.58.128.30- simulates the real world J-root server\r\n193.0.15.129- simulates the real world K-root server\r\n199.7.83.42- simulates the real world L-root server\r\n202.12.27.33- simulates the real world M-root server\r\n\r\nThe RootDNS server in the Cyber Range handles all \"grayspace\" DNS.  To keep this a bit organized, the configuration for the bind9 server has been broken up into functional sections.  Below is a listing of the file/folder structure along with a brief explanation of its purpose.\r\nBIND9 CONFIGURATION Overview\r\n\r\nConfiguration Files\r\n\r\n/etc/bind/named.conf   - Contains \"includes\" for the segmented out \"named.conf\" files.\r\n/etc/bind/named.conf.options  - Contains the bind9 options that make it a recursive DNS server.  This file also specifies the IPs the server listens on.\r\n/etc/bind/named.conf.default-zones - This is a default zone created by bind9, it has been unmodified.\r\n/etc/bind/named.conf.OPFOR - This contains the domain references for all OPFOR DNS entries.  For the most part entries here are managed via scripts on the RootDNS server  and NRTS servers.\r\n/etc/bind/named.conf.RANGE - This contains the domain references for all DNS needed by the ServicesNet systems and target domains, with the exception of the traffic-gen and traffic-webhost servers\r\n/etc/bind/named.conf.TRAFFIC - This contains the domain references for all traffic gen systems.\r\n\r\n\r\nFOLDERS\r\n\r\n/etc/bind/OPFOR - Stores all domain zones files for all the referenced domains in the named.conf.OPFOR config file.\r\n/etc/bind/RANGE - Stores all domain zone files for all referenced domains in the named.conf.RANGE config file.\r\n/etc/bind/TRAFFIC - Stores all domain zone files for all the referenced domains in the named.conf.TRAFFIC config file.\r\n/etc/bind/blackhole - This contains two files.\r\n\r\ndb.blackhole - this is a zone file that points to 127.0.0.1\r\nRangism.zone - this is a conf file that references several domains and pointing them all to the db.blackhole.  This is used to capture various auto generated OS and application DNS requests for real world systems that can\'t be reached or replicated in this environment.  Things like updateapi.google.com, etc.\r\n\r\n\r\n\r\n\r\n\r\nDNS AUTOMATION Overview\r\nThe root DNS server has some automation built in to automate OPFOR DNS registration.  The scripts and path for adding/removing OPFOR DNS entries are listed below along with an explanation of their functionality.\r\n\r\n/root/scripts/add-REDTEAM-DNS.sh\r\n\r\nThis script will create a PID lock when it\'s executed to prevent the script from running more than one instance.  If this was ran concurrently, it would likely result in a corruption of the bind configuration.  The way it works is the DNS registration section of the NRTS server\'s /root/scripts/buildredteam.sh script will SCP a dns file containing domain names and IPs using an SSH key, then remotely run the add-REDTEAM-DNS.sh script and feed it the dns file as an argument.  The script will take this list, check if the domain already exists in any of the zone file locations, aka, RANGE, OPFOR, and TRAFFIC zone file folders.  If it exists in the RANGE or TRAFFIC folder, it will skip that DNS registration request, if it exists in the OPFOR folder, it will assume the user wants to update the record and process it.  It then creates a zone file for each domain, addd it to the OPFOR directory and created a copy of the named.conf.OPFOR config file and append the zone reference in the copy if the reference didn\'t already exist.  It will then run a named-check-conf against the copy, if this passed, it will replace the named.conf.OPFOR with the copy smf restart the bind9 service to read in the new configurations.\r\n\r\n\r\n/root/scripts/delete-REDTEAM-DNS.sh\r\n\r\nThis script will remove DNS records from the OPFOR directory as well as remove the zone file references from the named.conf.OPFOR config file.  The way this works is when the add-REDTEAM-DNS.sh script runs and originally added the OPFOR DNS, it will tag the zone file as well as add tags to the section in the named.conf.OPFOR file.  This tag is a user added value that is entered when the user requests DNS registration from an NRTS server.  On the NRTS there is a script for managing DNS at /root/scripts/ManageDNS.sh.  This script will connect to the rootDNS server and get a list of all OPFOR DNS organized by tags.  A user can select OPFOR DNS entries to be removed by selecting its tag.\r\n\r\n\r\n/root/scripts/autoredirector/makednsfile.sh\r\n\r\nThis script will generate a DNS file to feed to add-REDTEAM-DNS.sh.  It\'s for when a user elects randomly generated domains.  In this case the NRTS will send a list of IPs to the rootDNS server and this script will randomly select available domains from the masterdomainlist.txt file and pair one it to each of the IP in the list.  When it selects a domain from the masterdomainlist, it will edit that domain by adding a \"#\" to the front of the domain to prevent it from being reused.\r\n\r\n\r\n/root/scripts/autoredirector/masterdomainlist.txt\r\n\r\nThis is a file that contains roughly 11000 domain names.  This list was generated by scrapping a website that listed expired domain names.  The goal here is to have a large pool of domains that aren\'t owned in the real world.  The concept here is that these domains would be available to be purchased by an adversary.  It wouldn\'t make sense for an adversary to be able to use www.microsoft.com for their C2.\r\n\r\n\r\n/root/scripts/autoredirector/resetmasterdomainlist.sh\r\n\r\nThis script will remove and \"#\" from the front of any domain names in the list.  This is for when you\'ve deleted out all red team DNS and want to make all previously used domains from the list available again.\r\n\r\n\r\nNOTE: the other half of DNS automation references on the NRTS, /root/scripts/buildredteam.sh, /root/scripts/ManageDNS.sh and /root/scripts/RegisterDNS.sh are explained on the NRTS overview.\r\n\r\nHOW TO MANUALLY ADD DNS\r\n\r\nTo add new target domain records, you will need to create a zone file in the /etc/bind/RANGE and modify the /etc/bind/named.conf.RANGE file to add the reference.  There is an example zone file in the /etc/bind/RANGE directory to use as a reference called db.example.com.  Then, to add the reference in the named.conf.RANGE file, simply follow the syntax used for other zone files.\r\nOnce you have created the zone file and added the reference, you need to run \"service bind9 restart\" to read in the new domain.  However, before doing this it\'s a good idea to check your syntax first.  To test your zone file run\r\n\r\nnamed-checkzone mydomain.com /etc/bind/RANGE/db.mydomain.com         <- replace \"mydomain.com\" with your domain.\r\n\r\n\r\nThen to check if you messed up adding the reference run.\r\n\r\nnamed-checkconfig /etc/bind/named.conf.RANGE\r\n\r\n\r\nIf either errors, check your syntax, make corrections and try again.  Once they both pass run \"service bind9 restart\"\r\nTo add DNS manually in either TRAFFIC or OPFOR, follow the same steps, just make sure you are adding the zone file to the correct directory and you are modifying the correct \"named.conf.xxxx\" file.\r\n\r\n\r\n',2,'2023-03-28 23:58:33','2023-04-03 16:44:56',1,1,0,'',3,0,NULL,1,''),(5,3,0,'Web-Services','web-services','<p id=\"bkmrk-the-web-services-vm-\">The web services VM adds the following webservers to the Cyber Range environment;</p>\r\n<ul id=\"bkmrk-pastebin.com---this-\">\r\n<li class=\"null\">pastebin.com - this is a hastebin server running in a docker container that simulates pastebin.com</li>\r\n<li class=\"null\">redbook.com - this is a bookstack server running in a docker container used for Cyber Range documenation, you are using it right now.</li>\r\n<li class=\"null\">dropbox.com - this is a owncloud file share server running in a docker container used to simulate a cloud file sharing service.&nbsp; This could be used for range management, like hosting various apps that you want to install on various target domains, but mostly it\'s there for payload hosting or as an exfiltration point for OPFOR.</li>\r\n<li class=\"null\">diagrams.net - this is draw.io running in a docker container used for creating diagrams on redbook.&nbsp;</li>\r\n</ul>\r\n<p id=\"bkmrk-the-services-above-r\">The services above reside in the following folders on the web-services VM</p>\r\n<ul id=\"bkmrk-%2Froot%2Fpastebin%C2%A0-%2Froo\">\r\n<li class=\"null\">/root/pastebin&nbsp;<br></li>\r\n<li class=\"null\">/root/redbook</li>\r\n<li class=\"null\">/root/owncloud</li>\r\n<li class=\"null\">/root/drawio<br></li>\r\n</ul>\r\n<p id=\"bkmrk-in-each-directory-ar\">In each directory are any config files need for the container along with a docker-compose file.&nbsp; The containers should all start up automatically on reboot.&nbsp; To check the status of the container, I\'d advise googling docker to see how to interact and do things in docker.&nbsp; For a quick check you can run \"docker ps\" and it will list running containers.</p>\r\n<p id=\"bkmrk-note%3A-both-redbook-%28\">NOTE: both redbook (bookstack) and owncloud (dropbox) use a mysql database.&nbsp; If you want to make make backups here is the syntax for creating the backups and for restoring from these backups.</p>\r\n<p id=\"bkmrk-backing-up\">BACKING UP</p>\r\n<ul id=\"bkmrk-for-bookstack-%28redbo\">\r\n<li class=\"null\">FOR BOOKSTACK (redbook.com)\r\n<ul>\r\n<li class=\"null\">docker exec -i bookstack_db mysqldump -uroot -pbookstack bookstackapp &gt; bookstackbackup.sql</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">FOR OWNCLOUD (dropbox.com)\r\n<ul>\r\n<li class=\"null\">docker exec -i owncloud_db mysqldump -uowncloud -powncloud owncloud &gt; owncloudbackup.sql</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-restoring\">RESTORING</p>\r\n<ul id=\"bkmrk-for-bookstack-%28redbo-1\">\r\n<li class=\"null\">FOR BOOKSTACK (redbook.com)\r\n<ul>\r\n<li class=\"null\">docker exec -i bookstack_db mysql -uroot -pbookstack bookstackapp &lt; bookstackbackup.sql</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">FOR OWNCLOUD (dropbox.com)\r\n<ul>\r\n<li class=\"null\">docker exec -i owncloud_db mysql -uowncloud -powncloud owncloud &lt; owncloudbackup.sql</li>\r\n</ul>\r\n</li>\r\n</ul>','The web services VM adds the following webservers to the Cyber Range environment;\r\n\r\npastebin.com - this is a hastebin server running in a docker container that simulates pastebin.com\r\nredbook.com - this is a bookstack server running in a docker container used for Cyber Range documenation, you are using it right now.\r\ndropbox.com - this is a owncloud file share server running in a docker container used to simulate a cloud file sharing service.  This could be used for range management, like hosting various apps that you want to install on various target domains, but mostly it\'s there for payload hosting or as an exfiltration point for OPFOR.\r\ndiagrams.net - this is draw.io running in a docker container used for creating diagrams on redbook. \r\n\r\nThe services above reside in the following folders on the web-services VM\r\n\r\n/root/pastebin \r\n/root/redbook\r\n/root/owncloud\r\n/root/drawio\r\n\r\nIn each directory are any config files need for the container along with a docker-compose file.  The containers should all start up automatically on reboot.  To check the status of the container, I\'d advise googling docker to see how to interact and do things in docker.  For a quick check you can run \"docker ps\" and it will list running containers.\r\nNOTE: both redbook (bookstack) and owncloud (dropbox) use a mysql database.  If you want to make make backups here is the syntax for creating the backups and for restoring from these backups.\r\nBACKING UP\r\n\r\nFOR BOOKSTACK (redbook.com)\r\n\r\ndocker exec -i bookstack_db mysqldump -uroot -pbookstack bookstackapp > bookstackbackup.sql\r\n\r\n\r\nFOR OWNCLOUD (dropbox.com)\r\n\r\ndocker exec -i owncloud_db mysqldump -uowncloud -powncloud owncloud > owncloudbackup.sql\r\n\r\n\r\n\r\nRESTORING\r\n\r\nFOR BOOKSTACK (redbook.com)\r\n\r\ndocker exec -i bookstack_db mysql -uroot -pbookstack bookstackapp < bookstackbackup.sql\r\n\r\n\r\nFOR OWNCLOUD (dropbox.com)\r\n\r\ndocker exec -i owncloud_db mysql -uowncloud -powncloud owncloud < owncloudbackup.sql\r\n\r\n\r\n',3,'2023-03-29 01:05:37','2023-03-29 01:21:11',1,1,0,'',1,0,NULL,1,''),(6,3,0,'CA-Server','ca-server','<p id=\"bkmrk-the-ca-server-is-bui\">The CA server is build on Ubuntu 22.01 and uses openSSL to create a Certificate Authority and intermediate Certificate Authority for signing SSL certs.&nbsp; The CA and intermediate certs have already been created using the domain of globalcerts.com.&nbsp; To create new SSL certs or to sign binaries, you can use scripts that exist on this server.&nbsp; The NRTS will also use these scripts automatically to sign SSL certs for the redirectors and payload hosts services it builds.&nbsp; More on that is explained in the NRTS server overview.&nbsp; That said, if you want do generate these manually, below is an overview of scripts on the CA-server.</p>\r\n<ul id=\"bkmrk-%2Froot%2Fcertmaker.sh-t\">\r\n<li class=\"null\">/root/certmaker.sh\r\n<ul>\r\n<li class=\"null\">This is used to create HTTPS SSL certs.&nbsp; The script has a help menu that is pretty self explanatory.&nbsp; below is the help menu that lists the various flags.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p style=\"padding-left: 40px;\" id=\"bkmrk-required-flags%C2%A0-%C2%A0-%C2%A0-\">REQUIRED Flags<br>&nbsp; &nbsp; &nbsp; &nbsp; -d or --domain FQDN, &nbsp;ex. -d www.example.com<br>OPTIONAL Flags - random values will be used if not set<br>&nbsp; &nbsp; &nbsp; &nbsp; -r or --random, this will randomize Country, City, State, and organization info<br>&nbsp; &nbsp; &nbsp; &nbsp; -q or --quiet, will built the certs without showing settings and asking for confirmation<br>&nbsp; &nbsp; &nbsp; &nbsp; -C or --country 2LetterAbbrv, ex. -C US<br>&nbsp; &nbsp; &nbsp; &nbsp; -ST or --state &nbsp;State, ex -ST \'New York\' NOTE: single quotes need if spaces<br>&nbsp; &nbsp; &nbsp; &nbsp; -L or --locality, ex -L \'New York City\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -O or --organization, ex -O \'example LTD\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -CN or --commonname, ex -CN \'www.example.com\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -A or --alias, ex -A \'example-server\'<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS1 or --SAN1 &nbsp;Subject Alt Name 1<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS2 or --SAN2 &nbsp;Subject Alt Name 2<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS3 or --SAN3 &nbsp;Subject Alt Name 3<br>&nbsp; &nbsp; &nbsp; &nbsp; -DNS4 or --SAN4 &nbsp;Subject Alt Name 4<br></p>\r\n<ul id=\"bkmrk-below-is-an-example-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is an example for created a cert for humanzoo.com\r\n<ul>\r\n<li class=\"null\">./certmaker.sh -d humanzoo.com -C US -ST NY -L \'New York City\' -O \'Human Zoo foundation\' -CN humanzoo.com -A humanzoo -DNS1 <a href=\"https://www.humanzoo.com\">www.humanzoo.com</a> -DNS2 login.humanzoo.com</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/codesigncertmaker.sh</li>\r\n<li class=\"null\">/root/cs_codesigncertmaker.sh</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>','The CA server is build on Ubuntu 22.01 and uses openSSL to create a Certificate Authority and intermediate Certificate Authority for signing SSL certs.  The CA and intermediate certs have already been created using the domain of globalcerts.com.  To create new SSL certs or to sign binaries, you can use scripts that exist on this server.  The NRTS will also use these scripts automatically to sign SSL certs for the redirectors and payload hosts services it builds.  More on that is explained in the NRTS server overview.  That said, if you want do generate these manually, below is an overview of scripts on the CA-server.\r\n\r\n/root/certmaker.sh\r\n\r\nThis is used to create HTTPS SSL certs.  The script has a help menu that is pretty self explanatory.  below is the help menu that lists the various flags.\r\n\r\n\r\n\r\nREQUIRED Flags        -d or --domain FQDN,  ex. -d www.example.comOPTIONAL Flags - random values will be used if not set        -r or --random, this will randomize Country, City, State, and organization info        -q or --quiet, will built the certs without showing settings and asking for confirmation        -C or --country 2LetterAbbrv, ex. -C US        -ST or --state  State, ex -ST \'New York\' NOTE: single quotes need if spaces        -L or --locality, ex -L \'New York City\'        -O or --organization, ex -O \'example LTD\'        -CN or --commonname, ex -CN \'www.example.com\'        -A or --alias, ex -A \'example-server\'        -DNS1 or --SAN1  Subject Alt Name 1        -DNS2 or --SAN2  Subject Alt Name 2        -DNS3 or --SAN3  Subject Alt Name 3        -DNS4 or --SAN4  Subject Alt Name 4\r\n\r\n\r\n\r\nBelow is an example for created a cert for humanzoo.com\r\n\r\n./certmaker.sh -d humanzoo.com -C US -ST NY -L \'New York City\' -O \'Human Zoo foundation\' -CN humanzoo.com -A humanzoo -DNS1 www.humanzoo.com -DNS2 login.humanzoo.com\r\n\r\n\r\n\r\n\r\n/root/codesigncertmaker.sh\r\n/root/cs_codesigncertmaker.sh\r\n\r\n',4,'2023-03-29 01:21:16','2023-04-03 16:55:17',1,1,0,'',3,0,NULL,1,''),(7,3,0,'Traffic-Gen','traffic-gen','<p id=\"bkmrk-the-traffic-gen-serv\">The Traffic-gen server was build on Ubuntu 22.01 and uses a customized docker container that will use Postfix and mutt to send emails to a given list of users.&nbsp; The email context was pulled using the Enron data dump.&nbsp; About 20 years ago, the FCC forced Enron to make it\'s corporate emails public.&nbsp; Since then several projects have organized these emails into databases.&nbsp; It\'s a decent source for pulling out human readable \"subject\" and \"body\" content.&nbsp; The container will use a script that will randomly pull subject and email body content from a CSV file, then randomly select a email address from the user provide list and send an email.&nbsp; The functionality of this is very customization.&nbsp; Here is an overview of how this server is used to generate email traffic.</p>\r\n<p id=\"bkmrk-file-structure\">FILE STRUCTURE</p>\r\n<ul id=\"bkmrk-%2Froot%2Fbuildcompose.s\">\r\n<li class=\"null\">Email Traffic generation scripts\r\n<ul id=\"bkmrk-%C2%A0%2Froot%2Fbuildcompose.\">\r\n<li class=\"null\">&nbsp;/root/buildcompose.sh\r\n<ul id=\"bkmrk-this-script-will-mod\">\r\n<li class=\"null\">This script will modify the docker-compose file based on user input.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/killtrafficgen.sh\r\n<ul id=\"bkmrk-simple-script-that-i\">\r\n<li class=\"null\">Simple script that is basically \"docker-compose up -d\"</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/starttrafficgen.sh\r\n<ul id=\"bkmrk-simple-script-that-i-1\">\r\n<li class=\"null\">Simple script that is basically \"docker-compose down\"</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-folder-structure-of-\">Folder structure of the email traffic generator.&nbsp;&nbsp;</p>\r\n<ul id=\"bkmrk-%2Froot%2Femailerlist.tx\">\r\n<li class=\"null\">/root/emailerlist.txt\r\n<ul id=\"bkmrk-this-file-contains-t\">\r\n<li class=\"null\">This file contains the domains and IPs that will be used by the email traffic generator.&nbsp; This is read in by the build-compose file to configure a docker container for each one.&nbsp; Then each container will use the contents of the /root/TG folder for composing and sending emails.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">&nbsp;/root/TG\r\n<ul id=\"bkmrk-%2Froot%2Ftg%2Fcontent%2Fema\">\r\n<li class=\"null\">/root/TG/Content/EmailContent.csv\r\n<ul id=\"bkmrk-this-file-is-a-csv-o\">\r\n<li class=\"null\">This file is a CSV of subject, email body content.&nbsp; This content was extracted from publicly available databases of the Enron data mentioned earlier.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/RandomFiles/\r\n<ul id=\"bkmrk-this-directory-conta\">\r\n<li class=\"null\">This directory contains 108 random files of types .doc, .docx, .ppt, .pptx, .pdf, and .xlsx.&nbsp; These files are used as email attachments.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/SendTo/&lt;user defined dir&gt;/sendto.txt\r\n<ul id=\"bkmrk-the-sendto.txt-file-\">\r\n<li class=\"null\">The sendto.txt file should contain a list of email addresses that the traffic generator will send emails to.&nbsp; This is designed to support multiple target domains.&nbsp; The way this works is you create a folder for each target domain that you connect to the Cyber Range.&nbsp; This is the &lt;user defined dir&gt;.&nbsp; When you run the buildcompose.sh, it will first ask which of these directories should it build the docker-compose file for.&nbsp; For example, if I made a target domain called widgets.com, I would make a directory at /root/TG/SendTo/widgets.&nbsp; Then in that directory I would make a file called \"sendto.txt\" and fill it with email addresses for the users in the widget domain that I want the email traffic generator to send emails to.&nbsp; Always name the email list in the \"target domain\" folder as sendto.txt - this file name is hardcoded in the email sending script.<br></li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TG/Senders/senders.txt\r\n<ul id=\"bkmrk-this-file-contains-t-1\">\r\n<li class=\"null\">This file contains the \"from\" names in a firstname.lastname format.&nbsp; The email traffic generator will use this in combination with each containers domain from the emailerlist.txt to generate the \"from\" email address.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">&nbsp;/root/TG/Scripts/StartEmail.sh\r\n<ul id=\"bkmrk-this-is-the-entrypoi\">\r\n<li class=\"null\">This is the entrypoint script for the docker containers.&nbsp; It runs and endless loop that will send emails to the addresses in the \"sendto.txt\" file.&nbsp; This script is customizable where you can adjust the time interval between emails sent, add jitter to that time internal, set a max number of recipients, and set a max number of attachments.&nbsp; These settings can be modified two ways.&nbsp; First you can edit the script and change the default values set for these, or you could modify the docker-compose file and add the appropriate setting flags to the entrypoint script.&nbsp;</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/TrafficLog\r\n<ul id=\"bkmrk-this-directory-is-wh\">\r\n<li class=\"null\">This directory is where each container will create a traffic log.&nbsp; The name of each log will be log_&lt;senderdomain&gt;.&nbsp; The log will track a count of emails sent by that container, the time, and who the email was sent to.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>','The Traffic-gen server was build on Ubuntu 22.01 and uses a customized docker container that will use Postfix and mutt to send emails to a given list of users.  The email context was pulled using the Enron data dump.  About 20 years ago, the FCC forced Enron to make it\'s corporate emails public.  Since then several projects have organized these emails into databases.  It\'s a decent source for pulling out human readable \"subject\" and \"body\" content.  The container will use a script that will randomly pull subject and email body content from a CSV file, then randomly select a email address from the user provide list and send an email.  The functionality of this is very customization.  Here is an overview of how this server is used to generate email traffic.\r\nFILE STRUCTURE\r\n\r\nEmail Traffic generation scripts\r\n\r\n /root/buildcompose.sh\r\n\r\nThis script will modify the docker-compose file based on user input.\r\n\r\n\r\n/root/killtrafficgen.sh\r\n\r\nSimple script that is basically \"docker-compose up -d\"\r\n\r\n\r\n/root/starttrafficgen.sh\r\n\r\nSimple script that is basically \"docker-compose down\"\r\n\r\n\r\n\r\n\r\n\r\nFolder structure of the email traffic generator.  \r\n\r\n/root/emailerlist.txt\r\n\r\nThis file contains the domains and IPs that will be used by the email traffic generator.  This is read in by the build-compose file to configure a docker container for each one.  Then each container will use the contents of the /root/TG folder for composing and sending emails.\r\n\r\n\r\n /root/TG\r\n\r\n/root/TG/Content/EmailContent.csv\r\n\r\nThis file is a CSV of subject, email body content.  This content was extracted from publicly available databases of the Enron data mentioned earlier.\r\n\r\n\r\n/root/TG/RandomFiles/\r\n\r\nThis directory contains 108 random files of types .doc, .docx, .ppt, .pptx, .pdf, and .xlsx.  These files are used as email attachments.\r\n\r\n\r\n/root/TG/SendTo/<user defined dir>/sendto.txt\r\n\r\nThe sendto.txt file should contain a list of email addresses that the traffic generator will send emails to.  This is designed to support multiple target domains.  The way this works is you create a folder for each target domain that you connect to the Cyber Range.  This is the <user defined dir>.  When you run the buildcompose.sh, it will first ask which of these directories should it build the docker-compose file for.  For example, if I made a target domain called widgets.com, I would make a directory at /root/TG/SendTo/widgets.  Then in that directory I would make a file called \"sendto.txt\" and fill it with email addresses for the users in the widget domain that I want the email traffic generator to send emails to.  Always name the email list in the \"target domain\" folder as sendto.txt - this file name is hardcoded in the email sending script.\r\n\r\n\r\n/root/TG/Senders/senders.txt\r\n\r\nThis file contains the \"from\" names in a firstname.lastname format.  The email traffic generator will use this in combination with each containers domain from the emailerlist.txt to generate the \"from\" email address.\r\n\r\n\r\n /root/TG/Scripts/StartEmail.sh\r\n\r\nThis is the entrypoint script for the docker containers.  It runs and endless loop that will send emails to the addresses in the \"sendto.txt\" file.  This script is customizable where you can adjust the time interval between emails sent, add jitter to that time internal, set a max number of recipients, and set a max number of attachments.  These settings can be modified two ways.  First you can edit the script and change the default values set for these, or you could modify the docker-compose file and add the appropriate setting flags to the entrypoint script. \r\n\r\n\r\n/root/TrafficLog\r\n\r\nThis directory is where each container will create a traffic log.  The name of each log will be log_<senderdomain>.  The log will track a count of emails sent by that container, the time, and who the email was sent to.\r\n\r\n\r\n\r\n\r\n',5,'2023-03-29 01:32:17','2023-04-03 17:03:25',1,1,0,'',3,0,NULL,1,''),(8,3,0,'Traffic-WebHost','traffic-webhost','<p id=\"bkmrk-this-hosts-several-w\">This hosts several websites that can be used by Ghost to create outbound http and https traffic from within a target domain.</p>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','This hosts several websites that can be used by Ghost to create outbound http and https traffic from within a target domain.\r\n ',6,'2023-03-29 01:40:43','2023-03-29 01:41:20',1,1,0,'',1,0,NULL,1,''),(9,3,0,'NRTS','nrts','<p id=\"bkmrk-the-not-red-team-ser\">The not red team server (NRTS) is build on Ubuntu 22.01 and is used to quickly build out OPFOR infrastructure.&nbsp; It uses docker to containerize each individual infrastructure system so that one NRTS can support multiple services, such as a redirector, cobalt strike teamserver, payload host, or multiple of each.&nbsp; I haven\'t tested the bounds of this so not sure what the maximum is.&nbsp; I have had 3 teamservers, 3 redirectors, and 3 payloads host running successfully simultaneously.&nbsp; However, this server isn\'t meant to be the single server for all OPFOR infrastructure needs.&nbsp; You can clone this VM and make as many NRTS as you would like.&nbsp; This server can do several things and will greatly reduce your OPFOR teams time required to deploy infrastructure systems significantly.&nbsp; There is a lot going on in this VM, below is a description of the folder structure, for more details on how to use this VM, see the \"NRTS\" in the How to\" section.</p>\r\n<p id=\"bkmrk-folder-structure\">Folder Structure</p>\r\n<ul id=\"bkmrk-%2Froot%2Fbackbonerouter\">\r\n<li class=\"null\">/root/backbonerouters\r\n<ul>\r\n<li class=\"null\">This directory contains a list of all the IP subnets that the SI-router will route for systems connected to the grayspace esxi switch.&nbsp; Its structure by geo-location, in the following format /root/backbonerouters/&lt;country&gt;/&lt;city.txt&gt;.&nbsp; &nbsp;This folder structure is used by other scripts on the NRTS to generator IP addresses.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/C2concealer\r\n<ul>\r\n<li class=\"null\">This is a tool for generating Cobalt Strike C2 profiles, see the \"NRTS\" section in the \"How to\"</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/cobaltstrike-local\r\n<ul>\r\n<li class=\"null\">This is a copy of cobaltstrike, this is a clean copy and when you build a teamserver using the buildredteam.sh, it will make a copy of this for each teamserver you build.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/go\r\n<ul>\r\n<li class=\"null\">Golang is install for whatever go projects you want to mess with.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/Profiles\r\n<ul>\r\n<li class=\"null\">This is where to put your cobalt strike profiles, this is where the buildredteam.sh will look for profiles when it\'s setting up a teamserver or an HAProxy redirector that will set up ACLs based on C2 profiles.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts\r\n<ul>\r\n<li class=\"null\">This is where most of the custom scripts reside.</li>\r\n<li class=\"null\">/root/scripts/buildreadteam.sh\r\n<ul>\r\n<li class=\"null\">This is the script used to automate the build of OPFOR infastructure, it will create redirectors, payload hosts, phishing hosts, and teamservers in docker containers.&nbsp; See the how to section for more information.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/ManageDNS.sh\r\n<ul>\r\n<li class=\"null\">This script is used to manage DNS records that get added to the rootDNS server.&nbsp; See the how to section for more information.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/RegisterDNS.sh\r\n<ul>\r\n<li class=\"null\">This script is used to create new DNS records that will get added to the rootDNS server.&nbsp; See the how to section for more information.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/phish\r\n<ul>\r\n<li class=\"null\">This directory contains scripts for sending phishing emails.</li>\r\n<li class=\"null\">/root/scripts/phish/phish.sh\r\n<ul>\r\n<li class=\"null\">Used to send a phish to a single target.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/scripts/phish/spam.sh\r\n<ul>\r\n<li class=\"null\">Used to send phishing attacks to a list of targets.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/services\r\n<ul>\r\n<li class=\"null\">This directory is used for storing information regarding containers that the buildredteam.sh script creates.</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">/root/SourcePoint\r\n<ul>\r\n<li class=\"null\">This is another tool for generating Cobalt Strike profiles, see the \"how to\" section.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>','The not red team server (NRTS) is build on Ubuntu 22.01 and is used to quickly build out OPFOR infrastructure.  It uses docker to containerize each individual infrastructure system so that one NRTS can support multiple services, such as a redirector, cobalt strike teamserver, payload host, or multiple of each.  I haven\'t tested the bounds of this so not sure what the maximum is.  I have had 3 teamservers, 3 redirectors, and 3 payloads host running successfully simultaneously.  However, this server isn\'t meant to be the single server for all OPFOR infrastructure needs.  You can clone this VM and make as many NRTS as you would like.  This server can do several things and will greatly reduce your OPFOR teams time required to deploy infrastructure systems significantly.  There is a lot going on in this VM, below is a description of the folder structure, for more details on how to use this VM, see the \"NRTS\" in the How to\" section.\r\nFolder Structure\r\n\r\n/root/backbonerouters\r\n\r\nThis directory contains a list of all the IP subnets that the SI-router will route for systems connected to the grayspace esxi switch.  Its structure by geo-location, in the following format /root/backbonerouters/<country>/<city.txt>.   This folder structure is used by other scripts on the NRTS to generator IP addresses.\r\n\r\n\r\n/root/C2concealer\r\n\r\nThis is a tool for generating Cobalt Strike C2 profiles, see the \"NRTS\" section in the \"How to\"\r\n\r\n\r\n/root/cobaltstrike-local\r\n\r\nThis is a copy of cobaltstrike, this is a clean copy and when you build a teamserver using the buildredteam.sh, it will make a copy of this for each teamserver you build.\r\n\r\n\r\n/root/go\r\n\r\nGolang is install for whatever go projects you want to mess with.\r\n\r\n\r\n/root/Profiles\r\n\r\nThis is where to put your cobalt strike profiles, this is where the buildredteam.sh will look for profiles when it\'s setting up a teamserver or an HAProxy redirector that will set up ACLs based on C2 profiles.\r\n\r\n\r\n/root/scripts\r\n\r\nThis is where most of the custom scripts reside.\r\n/root/scripts/buildreadteam.sh\r\n\r\nThis is the script used to automate the build of OPFOR infastructure, it will create redirectors, payload hosts, phishing hosts, and teamservers in docker containers.  See the how to section for more information.\r\n\r\n\r\n/root/scripts/ManageDNS.sh\r\n\r\nThis script is used to manage DNS records that get added to the rootDNS server.  See the how to section for more information.\r\n\r\n\r\n/root/scripts/RegisterDNS.sh\r\n\r\nThis script is used to create new DNS records that will get added to the rootDNS server.  See the how to section for more information.\r\n\r\n\r\n/root/scripts/phish\r\n\r\nThis directory contains scripts for sending phishing emails.\r\n/root/scripts/phish/phish.sh\r\n\r\nUsed to send a phish to a single target.\r\n\r\n\r\n/root/scripts/phish/spam.sh\r\n\r\nUsed to send phishing attacks to a list of targets.\r\n\r\n\r\n\r\n\r\n\r\n\r\n/root/services\r\n\r\nThis directory is used for storing information regarding containers that the buildredteam.sh script creates.\r\n\r\n\r\n/root/SourcePoint\r\n\r\nThis is another tool for generating Cobalt Strike profiles, see the \"how to\" section.\r\n\r\n\r\n\r\n',7,'2023-03-29 01:41:24','2023-03-29 17:34:27',1,1,0,'',3,0,NULL,1,''),(10,4,0,'Manual Domain Registration','manual-domain-registration','<h2 id=\"bkmrk-add-domains-based-on\">Add Domains based on user created file</h2>\r\n<p id=\"bkmrk-step1.-obtain-the-%22r\"><strong>Step 1.</strong> Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.</p>\r\n<p id=\"bkmrk-step2.-set-up-ssh-ke\"><strong>Step 2</strong>. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.&nbsp; If you are doing this from an NRTS, you can skip this step since the ssh keys are set up during the initial build of the NRTS.<br></p>\r\n<pre id=\"bkmrk-ssh-copy-id-root%40198\"><code class=\"language-\">ssh-copy-id root@198.41.0.4   ## the password is : toor</code></pre>\r\n<p id=\"bkmrk-step3.-look-at-regis\"><strong>Step 3</strong>. Look at RegisterDNS.sh\'s usage. Run the script without passing a file or argument.&nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerdns-help.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerdns-help.png\" alt=\"RegisterDNS-help.png\"></a></p>\r\n<p id=\"bkmrk-step4.-create-a-dns-\"><strong>Step 4</strong>. Create a DNS file according to the scripts usage. Below is an example.</p>\r\n<p id=\"bkmrk--11\"><a href=\"https://redbook.com/uploads/images/gallery/2023-03/examplednsfile.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/examplednsfile.png\" alt=\"exampleDNSfile.png\"></a></p>\r\n<p id=\"bkmrk-step5.-run-registerd\"><strong>Step 5</strong>. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt<a href=\"https://redbook.com/uploads/images/gallery/2023-03/registerprocess.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-03/scaled-1680-/registerprocess.png\" alt=\"registerprocess.png\"></a></p>\r\n<h3 id=\"bkmrk-managing-dns\">Managing DNS</h3>\r\n<p id=\"bkmrk-on-an-nrts-server-in\">On an NRTS server in the /root/scripts directory is a script called ManageDNS.sh.&nbsp;&nbsp; Use this script to View or Delete DNS registrations.&nbsp; DNS is tagged by the user when it\'s created by either the RegisterDNS.sh as part of the process of the buildredteam.sh script.&nbsp; For more information on this go to -&gt; Using the NRTS -&gt; ManageDNS.sh</p>','Add Domains based on user created file\r\nStep 1. Obtain the \"RegisterDNS.sh\" script. This can be found on any NRTS server at /root/scripts. You can use it from the NRTS or SCP it over to Kali or most Linux based systems.\r\nStep 2. Set up ssh keys between the system you are on and the main DNS server at 198.41.0.4.  If you are doing this from an NRTS, you can skip this step since the ssh keys are set up during the initial build of the NRTS.\r\nssh-copy-id root@198.41.0.4   ## the password is : toor\r\nStep 3. Look at RegisterDNS.sh\'s usage. Run the script without passing a file or argument.  \r\nStep 4. Create a DNS file according to the scripts usage. Below is an example.\r\n\r\nStep 5. Run RegisterDNS.sh with the path to your DNS file, ex .\\RegisterDNS.sh mydns.txt\r\nManaging DNS\r\nOn an NRTS server in the /root/scripts directory is a script called ManageDNS.sh.   Use this script to View or Delete DNS registrations.  DNS is tagged by the user when it\'s created by either the RegisterDNS.sh as part of the process of the buildredteam.sh script.  For more information on this go to -> Using the NRTS -> ManageDNS.sh',2,'2023-03-30 17:46:53','2023-04-04 22:39:36',1,1,0,'',11,0,NULL,1,'wysiwyg'),(11,4,0,'Proxy All the things','proxy-all-the-things','<p id=\"bkmrk-note%3A-the-proxy-is-a\">NOTE: The proxy is at http://172.30.0.2:9999</p>\r\n<h3 id=\"bkmrk-setting-up-docker-in\">Setting up Docker in linux</h3>\r\n<ul id=\"bkmrk-add-folder-for-the-d\">\r\n<li class=\"null\">Add folder for the docker service if it doesn\'t exist and add a proxy conf file&nbsp; &nbsp; &nbsp;&nbsp; <br></li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Fetc%2Fsystemd%2Fsyst\"><code class=\"language-bash\">cd /etc/systemd/system\r\nmkdir docker.service.d\r\ncd docker.service.d\r\nvi http-proxy.conf</code></pre>\r\n<ul id=\"bkmrk-put-the-following-in\">\r\n<li class=\"null\">Put the following in the http-proxy.conf</li>\r\n</ul>\r\n<pre id=\"bkmrk-%5Bservice%5D-environmen\"><code class=\"language-bash\">[Service]\r\nEnvironment=\"HTTP_PROXY=http://172.30.0.2:9999\"\r\nEnvironment=\"HTTPS_PROXY=http://172.30.0.2:9999\"</code></pre>\r\n<ul id=\"bkmrk-lastly%2C-reload-daemo\">\r\n<li class=\"null\">Lastly, reload daemon and restart the docker service<br></li>\r\n</ul>\r\n<pre id=\"bkmrk-systemctl-daemon-rel\"><code class=\"language-\">systemctl daemon-reload\r\nsystemctl restart docker</code></pre>\r\n<h4 id=\"bkmrk-adding-proxy-to-a-do\">Adding Proxy to a Dockerfile</h4>\r\n<ul id=\"bkmrk-edit-your-dockerfile\">\r\n<li class=\"null\">edit your dockerfile in your favorite linux text editor and add these variables.</li>\r\n</ul>\r\n<pre id=\"bkmrk-env-http_proxy-http%3A\"><code class=\"language-\">ENV http_proxy http://172.30.0.2:9999\r\nENV https_proxy http://172.30.0.2:9999</code></pre>\r\n<h3 id=\"bkmrk-add-proxy-to-apt\">Add Proxy to Apt</h3>\r\n<ul id=\"bkmrk-go-to-the-apt.conf.d\">\r\n<li class=\"null\">Go to the apt.conf.d directory and create a proxy.conf file</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Fetc%2Fapt%2Fapt.conf\"><code class=\"language-bash\">cd /etc/apt/apt.conf.d\r\nvi proxy.conf</code></pre>\r\n<ul id=\"bkmrk-put-the-following-in-1\">\r\n<li class=\"null\">Put the following in the proxy.conf file</li>\r\n</ul>\r\n<pre id=\"bkmrk-acquire%3A%3Ahttp%3A%3Aproxy\"><code class=\"language-\">Acquire::http::Proxy \"http://172.30.0.2:9999\";\r\nAcquire::https::Proxy \"http://172.30.0.2:9999\";</code></pre>\r\n<h3 id=\"bkmrk-add-proxy-for-wget\">Add proxy for wget</h3>\r\n<ul id=\"bkmrk-edit-the-%2Fetc%2Fwgetrc\">\r\n<li class=\"null\">Edit the /etc/wgetrc file.&nbsp; Find the lines \"use_proxy\", \"http_proxy\", and \"https_proxy\" and edit them to match the following.</li>\r\n</ul>\r\n<pre id=\"bkmrk-use_proxy%3Dyes-http_p\"><code class=\"language-\">use_proxy=yes\r\nhttp_proxy=http://172.30.0.2:9999\r\nhttps_proxy=http://172.30.0.2:9999</code></pre>\r\n<h3 id=\"bkmrk-cobalt-strike-update\">Cobalt Strike Update script</h3>\r\n<ul id=\"bkmrk-in-order-to-run-the-\">\r\n<li class=\"null\">In order to run the update script for Cobalt Strike, you need to modify the \"update\" script to add proxy information in to the java command.&nbsp; Below is the additional flags you need to add.</li>\r\n</ul>\r\n<pre id=\"bkmrk-java--dhttp.proxyhos\"><code class=\"language-\">java -Dhttp.proxyHost=172.30.0.2 -Dhttp.proxyPort=9999 -Dhttps.proxyhost=172.30.0.2 -Dhttps.proxyPort=9999</code></pre>\r\n<h3 id=\"bkmrk-using-git-via-proxy\">Using git via proxy</h3>\r\n<ul id=\"bkmrk-git-can-use-your-env\">\r\n<li class=\"null\">git can use your environment variables to use a proxy, wget can to depending on the version of linux.&nbsp; To use git through the proxy, set the following environment variables with the following command.</li>\r\n</ul>\r\n<pre id=\"bkmrk-export-http_proxy%3Dht\"><code class=\"language-\">export http_proxy=http://172.30.0.2:9999\r\nexport https_proxy=http://172.30.0.2:9999</code></pre>\r\n<h3 id=\"bkmrk-pip3-install-via-pro\">PIP3 install via proxy</h3>\r\n<ul id=\"bkmrk-on-occasion-pip3-ins\">\r\n<li class=\"null\">On occasion pip3 installs on ubuntu runs into issues.&nbsp; The following has worked to resolve it.</li>\r\n</ul>\r\n<pre id=\"bkmrk-apt-remove---purge-p\"><code class=\"language-\">apt remove --purge python3-pip -y\r\nexport http_proxy=http://172.30.0.2:9999\r\nexport https_proxy=http://172.30.0.2:9999\r\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"install-pip2-ubuntu.py\"\r\npython3 install-pip3-ubuntu.py</code></pre>','NOTE: The proxy is at http://172.30.0.2:9999\r\nSetting up Docker in linux\r\n\r\nAdd folder for the docker service if it doesn\'t exist and add a proxy conf file       \r\n\r\ncd /etc/systemd/system\r\nmkdir docker.service.d\r\ncd docker.service.d\r\nvi http-proxy.conf\r\n\r\nPut the following in the http-proxy.conf\r\n\r\n[Service]\r\nEnvironment=\"HTTP_PROXY=http://172.30.0.2:9999\"\r\nEnvironment=\"HTTPS_PROXY=http://172.30.0.2:9999\"\r\n\r\nLastly, reload daemon and restart the docker service\r\n\r\nsystemctl daemon-reload\r\nsystemctl restart docker\r\nAdding Proxy to a Dockerfile\r\n\r\nedit your dockerfile in your favorite linux text editor and add these variables.\r\n\r\nENV http_proxy http://172.30.0.2:9999\r\nENV https_proxy http://172.30.0.2:9999\r\nAdd Proxy to Apt\r\n\r\nGo to the apt.conf.d directory and create a proxy.conf file\r\n\r\ncd /etc/apt/apt.conf.d\r\nvi proxy.conf\r\n\r\nPut the following in the proxy.conf file\r\n\r\nAcquire::http::Proxy \"http://172.30.0.2:9999\";\r\nAcquire::https::Proxy \"http://172.30.0.2:9999\";\r\nAdd proxy for wget\r\n\r\nEdit the /etc/wgetrc file.  Find the lines \"use_proxy\", \"http_proxy\", and \"https_proxy\" and edit them to match the following.\r\n\r\nuse_proxy=yes\r\nhttp_proxy=http://172.30.0.2:9999\r\nhttps_proxy=http://172.30.0.2:9999\r\nCobalt Strike Update script\r\n\r\nIn order to run the update script for Cobalt Strike, you need to modify the \"update\" script to add proxy information in to the java command.  Below is the additional flags you need to add.\r\n\r\njava -Dhttp.proxyHost=172.30.0.2 -Dhttp.proxyPort=9999 -Dhttps.proxyhost=172.30.0.2 -Dhttps.proxyPort=9999\r\nUsing git via proxy\r\n\r\ngit can use your environment variables to use a proxy, wget can to depending on the version of linux.  To use git through the proxy, set the following environment variables with the following command.\r\n\r\nexport http_proxy=http://172.30.0.2:9999\r\nexport https_proxy=http://172.30.0.2:9999\r\nPIP3 install via proxy\r\n\r\nOn occasion pip3 installs on ubuntu runs into issues.  The following has worked to resolve it.\r\n\r\napt remove --purge python3-pip -y\r\nexport http_proxy=http://172.30.0.2:9999\r\nexport https_proxy=http://172.30.0.2:9999\r\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"install-pip2-ubuntu.py\"\r\npython3 install-pip3-ubuntu.py',3,'2023-04-03 19:54:40','2023-04-03 20:15:24',1,1,0,'',2,0,NULL,1,''),(12,4,0,'Code Signing Certificates for Binaries','code-signing-certificates-for-binaries','<p id=\"bkmrk-using-the-ca-server-\">Using the CA-server to sign binaries.</p>\r\n<ul id=\"bkmrk-ssh-into-globalcerts\">\r\n<li class=\"null\">SSH into globalcerts.com.&nbsp;&nbsp; Creds: root&nbsp; password: toor</li>\r\n<li class=\"null\">\r\n</ul>','Using the CA-server to sign binaries.\r\n\r\nSSH into globalcerts.com.   Creds: root  password: toor\r\n\r\n',4,'2023-04-03 20:15:55','2023-04-03 20:18:59',1,1,0,'',1,0,NULL,1,''),(13,6,0,'Creating Cobalt Strike C2 Profiles','creating-cobalt-strike-c2-profiles','<h3 id=\"bkmrk-script-generated-cob\">Script generated Cobalt Strike Profiles</h3>\r\n<ul id=\"bkmrk-there-are-two-differ\">\r\n<li class=\"null\">There are two different solutions installed on the NRTS by default.&nbsp; These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.&nbsp; You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.&nbsp; One of the more common issues I\'ve seen is very slow download transfer rates through a beacon.&nbsp; After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.&nbsp; Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.&nbsp; So I would also advice testing this on your test target as well.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-c2concealer\">Using C2concealer</h4>\r\n<ul id=\"bkmrk-note%3A-c2concealer-is\">\r\n<li class=\"null\">NOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.</li>\r\n<li class=\"null\">There are two arguments that C2concealer accepts; --variants and --hostname.&nbsp; The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.&nbsp; I believe the max number of variants is 10, but I\'d advise setting this to 0.&nbsp; The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.&nbsp; c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.&nbsp; Below is a usage example.</li>\r\n</ul>\r\n<pre id=\"bkmrk-c2concealer---varian\"><code class=\"language-\">C2concealer --variants 0 --hostname humanzoo.com</code></pre>\r\n<p id=\"bkmrk-the-script-will-ask-\">The script will ask for an SSL option, these options are</p>\r\n<ul id=\"bkmrk-self-signed-ssl-cert\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Self-signed SSL cert</li>\r\n<li class=\"null\">LetsEncrypt SSL cert</li>\r\n<li class=\"null\">Existing Keystore</li>\r\n<li class=\"null\">No SSL</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">If you plan on using a redirector, you can select \"No SSL\", the NRTS redirector will handle SSL certs for all the domains you use with it.&nbsp; If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.&nbsp; Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want to emulate in your engagement.&nbsp; The LetsEncrypt SSL cert will fail in this closed grayspace environment.</li>\r\n<li class=\"null\">Once you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;</li>\r\n</ul>\r\n<pre id=\"bkmrk-%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23\"><code class=\"language-\">############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################</code></pre>\r\n<ul id=\"bkmrk-it-saves-the-profile\">\r\n<li class=\"null\">It saves the profile with a \"randomly generated named\".profile in the directory you ran C2concealer from.&nbsp; The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.&nbsp; This directory is /root/Profiles.&nbsp; Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.</li>\r\n</ul>\r\n<pre id=\"bkmrk-mv-ba3e5732.profile-\"><code class=\"language-\">mv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/</code></pre>\r\n<ul id=\"bkmrk-at-this-point-the-pr\">\r\n<li class=\"null\">At this point the profile is ready to use, when you go to set up a Cobalt Strike teamserver on the NRTS, the script will see this profile and give you the option to select it.</li>\r\n</ul>\r\n<h4 id=\"bkmrk-using-sourcepoint\">Using Sourcepoint</h4>\r\n<ul id=\"bkmrk-sourcepoint-isn%27t-ad\">\r\n<li class=\"null\">Sourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.</li>\r\n<li class=\"null\">Sourepoint has a larger number of arguments and gives you a lot more control.&nbsp; For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.</li>\r\n<li class=\"null\">Required Sourcepoint arguments.\r\n<ul>\r\n<li class=\"null\">-host&nbsp;&nbsp;\r\n<ul>\r\n<li class=\"null\">This is the host name it will add as a server variable in the profile</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Outfile\r\n<ul>\r\n<li class=\"null\">This is the name/path to save the profile as</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">-Injector\r\n<ul>\r\n<li class=\"null\">This is the process injection method, the script provides two options&nbsp;\r\n<ul>\r\n<li class=\"null\">VirtualAllocEx (Great for cross architecture i.e x86 -&gt; x64 and x64-&gt;x86)</li>\r\n<li class=\"null\">NtMapViewOfSection (A more stealthy option, however fails over to VirtualAllocEx)<br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example Usage</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fsourcepoint\"><code class=\"language-bash\">cd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx</code></pre>\r\n<ul id=\"bkmrk-output-will-look-lik\">\r\n<li class=\"null\">Output will look like.</li>\r\n</ul>\r\n<pre id=\"bkmrk-_____-____-_-__-%2F-__\"><code class=\"language-\">\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source</code></pre>\r\n<ul id=\"bkmrk-note%3A-the-profiles-g\">\r\n<li class=\"null\">NOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.&nbsp; So it\'s a good idea to test these profiles before trying to use them.&nbsp; Below is how to test it on a NRTS.</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fcobaltstrik\"><code class=\"language-bash\">cd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile</code></pre>\r\n<p id=\"bkmrk-%C2%A0\"></p>','Script generated Cobalt Strike Profiles\r\n\r\nThere are two different solutions installed on the NRTS by default.  These are Forty North Securities C2Concealer and Tylous\'s Github SourcePoint.  You should test these out prior to building out an engagement worth of payloads, there are some issues especially since Cobalt Strike updates have a tendency to mess around with C2 profile syntax.  One of the more common issues I\'ve seen is very slow download transfer rates through a beacon.  After you build a profile, I\'d advice generating a payload, dropping it on a test target and trying to download some 50mb or larger file to see how long it takes.  Another issue involves processes used for fork and run actions, like beacon spawning or running execute-assembly.  So I would also advice testing this on your test target as well.\r\n\r\nUsing C2concealer\r\n\r\nNOTE: C2concealer is added to the NRTS path, so you don\'t need to be in the C2concealer directory to use it.\r\nThere are two arguments that C2concealer accepts; --variants and --hostname.  The script will generate a C2 profile based off of the hostname you provide and add variants based on the number of variants you set.  I believe the max number of variants is 10, but I\'d advise setting this to 0.  The script will test it\'s profile against Cobalt Strikes c2lint script and the more variants you provide the great the chance that it will fail the c2lint test.  c2lint is a built in script that comes with Cobalt Strike that is designed to test/validate a C2 profile.  Below is a usage example.\r\n\r\nC2concealer --variants 0 --hostname humanzoo.com\r\nThe script will ask for an SSL option, these options are\r\n\r\n\r\n\r\nSelf-signed SSL cert\r\nLetsEncrypt SSL cert\r\nExisting Keystore\r\nNo SSL\r\n\r\n\r\nIf you plan on using a redirector, you can select \"No SSL\", the NRTS redirector will handle SSL certs for all the domains you use with it.  If you aren\'t using a redirector, you can generator SSL certs on the CA-server and then add those to a keystore in Cobalt Strike - check the Cobalt Strike keystore how to guide for this.  Or you select self-signed certs, but those will be self-signed and not a great solution unless self-signed is an indicator you want to emulate in your engagement.  The LetsEncrypt SSL cert will fail in this closed grayspace environment.\r\nOnce you\'ve made a selection, the tool should generate a profile for you, and you\'d get an output that will scroll through the C2lint check and finish with the following;\r\n\r\n############################################################\r\n# Profile successfully passed C2lintcheck                  #\r\n# Profile name: ba3e5732.profile                           #\r\n# Generated by FortyNorthSecurity\'s C2concealer tool.      #\r\n############################################################\r\n\r\nIt saves the profile with a \"randomly generated named\".profile in the directory you ran C2concealer from.  The next step is to rename the profile to something meaningful and moving it to the directory on the NRTS that the buildredteam.sh script will look in when it\'s building a Cobalt Strike teamserver.  This directory is /root/Profiles.  Below is an example, so modify as needed based on where you created the profile and what you get in regards of a randomized profile name.\r\n\r\nmv ba3e5732.profile humanzoo.profile\r\nmv humanzoo.profile /root/Profiles/\r\n\r\nAt this point the profile is ready to use, when you go to set up a Cobalt Strike teamserver on the NRTS, the script will see this profile and give you the option to select it.\r\n\r\nUsing Sourcepoint\r\n\r\nSourcepoint isn\'t added to the path by default, so you need to provide the full path or navigate to the directory to run it.\r\nSourepoint has a larger number of arguments and gives you a lot more control.  For this guide, we\'ll cover just the required arguments, to see a full list of arguments, run ./Sourcepoint -h.\r\nRequired Sourcepoint arguments.\r\n\r\n-host  \r\n\r\nThis is the host name it will add as a server variable in the profile\r\n\r\n\r\n-Outfile\r\n\r\nThis is the name/path to save the profile as\r\n\r\n\r\n-Injector\r\n\r\nThis is the process injection method, the script provides two options \r\n\r\nVirtualAllocEx (Great for cross architecture i.e x86 -> x64 and x64->x86)\r\nNtMapViewOfSection (A more stealthy option, however fails over to VirtualAllocEx)\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample Usage\r\n\r\ncd /root/SourcePoint\r\n./SourcePoint -Host humanzoo.com -Outfile /root/Profiles/humanzoo2.profile -Injector VirtualAllocEx\r\n\r\nOutput will look like.\r\n\r\n\r\n           _____                            ____        _       __ \r\n          / ___/____  __  _______________  / __ \\____  (_)___  / /_\r\n          \\__ \\/ __ \\/ / / / ___/ ___/ _ \\/ /_/ / __ \\/ / __ \\/ __/\r\n         ___/ / /_/ / /_/ / /  / /__/  __/ ____/ /_/ / / / / / /_  \r\n        /____/\\____/\\__,_/_/   \\___/\\___/_/    \\____/_/_/ /_/\\__/  \r\n                                                        (@Tyl0us)\r\n                                                                                                                         \r\n\r\n[*] Preparing Varibles...\r\n[*] Building Profile...\r\n[!] Host Staging Is Disabled - Staged Payloads Are Not Available But Your Beacon Payload Is Not Available To Anyone That Connects\r\n[*] Beacon DLL Spoofed To: audioeng.dll\r\n[*] Post-Ex Process Name: gpupdate.exe\r\n[!] Beacon Shellcode Will Obfuscate Beacon in Memory Prior to Sleeping\r\n[*] Seleted Profile: \r\n[+] Profile Generated: /root/Profiles/humanzoo2.profile\r\n[+] Happy Hacking\r\nroot@nrts:~/Source\r\n\r\nNOTE: the profiles generated by SourcePoint are not ran through C2lint via the script.  So it\'s a good idea to test these profiles before trying to use them.  Below is how to test it on a NRTS.\r\n\r\ncd /root/cobaltstrike-local\r\n./c2lint /root/Profiles/humanzoo2.profile\r\n',5,'2023-04-03 20:19:08','2023-04-05 00:04:22',1,1,0,'',5,0,NULL,1,''),(14,6,0,'Starting a Cobalt Strike Teamserver (buildredteam.sh)','starting-a-cobalt-strike-teamserver-buildredteamsh','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.&nbsp; This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.&nbsp; Doing so would create artifacts on any teamserver you build using the build script.&nbsp; That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.</p>\r\n<p id=\"bkmrk-also-this-guide-is-a\">Also this guide is assuming that you have already created a cobalt strike profile that you want to use.&nbsp; For this example, we will use humanzoo.profile as the profile we created.&nbsp; For instructions on how to create Cobalt Strike C2 profiles go to -&gt; Using the NRTS -&gt; Creating Cobalt Strike C2 Profiles.<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">Example usage.</li>\r\n<li class=\"null\">\r\n<pre><code class=\"language-bash\">cd /root/scripts\r\n./buildredteam.sh</code></pre>\r\n</li>\r\n<li class=\"null\">This will pop up a text-based menu.&nbsp; At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, I\'ll leave it as the default.<br>\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hGyimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Next it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.&nbsp; Here you select what Geo-based IP you want to set up your teamserver with.&nbsp; For this example we\'ll use USA. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/N1Iimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-drill-\">\r\n<li class=\"null\">Next, it will drill down further with a City location, some only have one option, but the USA one has several.&nbsp; For this example, we\'ll use Seattle. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/KZNimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want a randomly generated IP or to set one manually.&nbsp; The guide will walk through screenshots for both options.&nbsp; For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.&nbsp; For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.&nbsp; It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uPMimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips---option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select option 1, it will add a random IP during processing so the menu will move to the next step.&nbsp; This will be shown after going through the manual process.</li>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; Then next few screenshots shows the manual IP process.&nbsp;&nbsp; Below is the menu when you selected option 2.&nbsp; At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0Ddimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-here-is-what-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Here is what option \"s\" looks like.&nbsp; This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://redbook.com/uploads/images/gallery/2023-04/c2Fimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/c2Fimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-after-i%27ve-decided-w\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After you\'ve decided what subnet you want to use from the list above, write it down or memorize it and then press \"q\" and then \"enter\" to exit out of the IP subnet view screen.&nbsp; This will take you back to the previous menu.&nbsp; From the list above for this example, we\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iWuimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-wh\">\r\n<li class=\"null\">At this point you have either selected to randomly set an IP or set one manually.&nbsp; Next, it will ask what profile you want to use.&nbsp; It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.&nbsp; For this example, we\'ll use the humanzoo2.profile. &nbsp; &nbsp; &nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JHKimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a password to use.&nbsp; For this we\'ll set the password to toor.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3ybimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point%2C-you%27v\">\r\n<li class=\"null\">At this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/JB2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-what-the-bu\">\r\n<li class=\"null\">Below is what the build process looks like.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/b00image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b00image.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script exits and your Cobalt Strike teamserver should be up and running in a container.&nbsp; Information about the service is also placed in /root/services/TS1/ directory.&nbsp; To check your container, run docker ps, below is a screenshot of this.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/BAHimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/BAHimage.png\" alt=\"image.png\"></a></p>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  On the root folder of the NRTS is a copy of cobalt strike listed as cobaltstrike-local.  This is a clean template of Cobalt Strike and you shouldn\'t use this to start a Cobalt Strike teamserver directly.  Doing so would create artifacts on any teamserver you build using the build script.  That said, these instructions are for using the buildredteam.sh script to start a cobalt strike teamserver.\r\nAlso this guide is assuming that you have already created a cobalt strike profile that you want to use.  For this example, we will use humanzoo.profile as the profile we created.  For instructions on how to create Cobalt Strike C2 profiles go to -> Using the NRTS -> Creating Cobalt Strike C2 Profiles.\r\n\r\nUse the following script to start a Cobalt Strike teamserver on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nExample usage.\r\n\r\ncd /root/scripts\r\n./buildredteam.sh\r\n\r\nThis will pop up a text-based menu.  At the screen below select option 3 \"Set up a Cobalt Strike teamserver\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you TS1, or if there is already a TS1, it will give a default of TS2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, I\'ll leave it as the default.\r\n\r\n\r\nNext it will set up IPs, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.  Here you select what Geo-based IP you want to set up your teamserver with.  For this example we\'ll use USA.                       \r\n\r\n\r\nNext, it will drill down further with a City location, some only have one option, but the USA one has several.  For this example, we\'ll use Seattle.              \r\n\r\n\r\nThen it will ask if you want a randomly generated IP or to set one manually.  The guide will walk through screenshots for both options.  For a randomly set IP, the script will randomly select a IP subnet from the geo-location based IP table and then randomly select an IP within that subnet.  For manual, you need to put in the IP yourself, but you can view available IP subnets which the guide will show.  It then validates that the IP you enter is correct before proceeding if it\'s not validate it will ask you to try again.\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select option 1, it will add a random IP during processing so the menu will move to the next step.  This will be shown after going through the manual process.\r\nSetting IPs - Option 2 Set IPs manually.  Then next few screenshots shows the manual IP process.   Below is the menu when you selected option 2.  At this screen you can enter \"s\" and press enter to see a list of IP subnets to select an IP from.  \r\n\r\n\r\n\r\n\r\n\r\n\r\nHere is what option \"s\" looks like.  This list is long, use space bar to page down, and \"q\" to quit and get back to the screen where you will enter an IP.                                                                                                                \r\n\r\n\r\n\r\n\r\n\r\n\r\nAfter you\'ve decided what subnet you want to use from the list above, write it down or memorize it and then press \"q\" and then \"enter\" to exit out of the IP subnet view screen.  This will take you back to the previous menu.  From the list above for this example, we\'ll select 54.88.220.10 from the 54.88.220.1/22 subnet. \r\n\r\n\r\n\r\n\r\nAt this point you have either selected to randomly set an IP or set one manually.  Next, it will ask what profile you want to use.  It pulls this from files in /root/Profiles, so make sure that is where you save any profiles you create.  For this example, we\'ll use the humanzoo2.profile.      \r\n\r\n\r\nThen it will ask for a password to use.  For this we\'ll set the password to toor.\r\n\r\n\r\nAt this point, you\'ve set all the settings needed to start a teamserver, the script shows what you\'ve selected, give that a once over and if you are happy with it press enter and it will start the build process.\r\n\r\n\r\nBelow is what the build process looks like.\r\n\r\n\r\nAt this point the script exits and your Cobalt Strike teamserver should be up and running in a container.  Information about the service is also placed in /root/services/TS1/ directory.  To check your container, run docker ps, below is a screenshot of this.\r\n\r\n\r\n',6,'2023-04-03 21:35:50','2023-04-04 22:40:39',1,1,0,'',6,0,NULL,1,''),(15,6,0,'Making a HAProxy Redirector (buildredteam.sh)','making-a-haproxy-redirector-buildredteamsh','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains and doesn\'t match it will forward the traffic to a decoy website.</p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a HAProxy redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\" <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you RD1, or if there is already an RD1, it will give a default of RD2, and so on.&nbsp; You can keep the default name or add own own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, we\'ll leave it as the default of RD1. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/59Fimage.png\" alt=\"image.png\">&nbsp; <br></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for the number of IPs, the script limits this to 20 for sanity reasons.&nbsp; For this example, we\'ll use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vq2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a Geo-location to pull IP addresses from, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. For this example we\'ll use the UK.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6itimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-to-\">\r\n<li class=\"null\">Then it will ask to select a city, some have a few, but a lot only have one.&nbsp; For this example, we\'ll select London.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Ycfimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-if-\">\r\n<li class=\"null\">Then it will ask if you want to set IPs randomly or manually.&nbsp; This guide will walk through both processes. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/yTwimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips-%28random%29\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the menu will move on to the next step.&nbsp; This will be shown after going through the manual process.<br></li>\r\n<li class=\"null\">Setting IPs - Option 2 Set IPs manually.&nbsp; The next few screenshots shows the manual IP process.&nbsp; Below is the menu when you select Set Ips manually.&nbsp; At this screen you can enter \"s\" to see a list of IP subnets to select IPs from.&nbsp; The blank menu items will store IPs as you add them in.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"><br></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-using-the-%22s%22-option\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Use the \"s\" option to see available subnets.&nbsp; This shows the available IP subnets based on the geo-location selections you made previously.&nbsp; The list is typically long, you can hit the spacebar to page down and press \"q\" then \"enter\" to exit out of the IP subnet view and go back to the previous menu.&nbsp; You can pick IPs from any of these subnets, so for this example, well use 12.9.80.129/25.&nbsp; Note you can pick IPs from multiple IP subnets from the list, you don\'t have to use just one IP subnet. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/Mc7image.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Mc7image.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-after-pressing-%22q%22-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">After pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot.&nbsp;<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B5bimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-then-enter-the-ip.\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Then enter the IP.</li>\r\n<li class=\"null\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jRdimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you-enter-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu.&nbsp; You should now see the IP you entered, continue these steps until you\'ve added IPs for all empty slots.&nbsp; Note:&nbsp; If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three. <a href=\"https://redbook.com/uploads/images/gallery/2023-04/gjaimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/gjaimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either set IPs randomly or manually, below is the next menu screen.&nbsp; Here it asks for what ports to redirect.&nbsp; For this example, we\'ll select HTTP, HTTPS <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pYCimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-once-selected%2C-it-wi\">\r\n<li class=\"null\">Once selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.&nbsp; This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure the Cobalt Strike Listener\'s \"Bind to\" address to do this.&nbsp; However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.&nbsp; To accept the default just press enter.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/XMHimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-abo\">\r\n<li class=\"null\">Next it will ask about changing the bind port for http, again you can do this or just leave it as default.&nbsp; Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6goimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-wha\">\r\n<li class=\"null\">Next it will ask what IP the redirect should be redirecting to.&nbsp; This should be your Cobalt Strike Teamserver IP. &nbsp; For this example we will be using 54.88.220.10.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/hXTimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hXTimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-whi\">\r\n<li class=\"null\">Then it will ask which Cobalt Strike profile to use.&nbsp; This need to be the same as the profile used to start the Cobalt Strike teamserver.&nbsp; The script will use information from the profile to build out ACLs.&nbsp; These ACLs are used to identify C2 traffic from other things hitting a redirector domain.&nbsp; If you select the wrong profile, your C2 will not work.&nbsp; For this example we will use the humanzoo2.profile.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/uJUimage.png\" alt=\"image.png\"><br></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.&nbsp; NOTE: this has to be a site that exist in the range and is reachable.&nbsp; If you put in a domain that isn\'t reachable, the HAProxy will stop working.&nbsp; The default is set to redbook.com.&nbsp; We\'ll leave the default for this example.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; <a href=\"https://redbook.com/uploads/images/gallery/2023-04/B4Aimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/B4Aimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to create manual domains or have them randomly generated.&nbsp; If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.&nbsp; This guide will walk through both options. &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/iTDimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assigning-domains-%28o\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains - Option 1 - (use randomly generated one/s).&nbsp; If we select option 1, the script moves will add these during processing and move on to the next step.&nbsp; We\'ll cover that after going through the manual process.<br></li>\r\n<li class=\"null\">Assigning Domains - Option 2 - (Manually create domain name/s).&nbsp; When you select option 2, you get the menu shown below.&nbsp; Here you pick an IP from the list and&nbsp; it will take you to a menu for entering a domain name for that IP.&nbsp; For this example will use option 1&nbsp; for IP 208.82.7.57<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2I5image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you-selected-an\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you selected an IP to add a domain for, you get the menu shown below.&nbsp; For this example we\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3UBimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-press-enter-on-the-a\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve added a domain named and pressed \"enter\" it takes you back to the original menu, but now you will see the domain you entered is populated next to the IP.&nbsp; Repeat this process for all IPs, and select \"d\" for done when you are finished. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Nxsimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point%2C-you-h\">\r\n<li class=\"null\">At this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a Tag for these domains.&nbsp; This tag is used by other scripts to identify who created these domains and/or what there purpose is.&nbsp; This will allow these domains to be deleted later like say after an engagement and you no longer need them.&nbsp; For this example, I\'ll use \"test-DNS\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dj9image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h7Iimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li class=\"null\">Below is a screenshot of the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/vleimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-you-should-now-have-\">\r\n<li class=\"null\">You should now have a working redirector.&nbsp; The information regarding the redirector is located at /root/services/RD1.&nbsp; This directory will have you DNS information, IP information, where it\'s redirecting to, and the name of the C2 profile used .&nbsp; You can validate if your redirector is running by looking at docker.&nbsp; Run docker ps and you should see RD1 up and running.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dhEimage.png\" alt=\"image.png\"></li>\r\n</ul>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The HAProxy redirector is only compatible with a Cobalt Strike teamserver, this is due to the script using information from the cobalt strike teamservers C2 profile to add ACLs to detect C2 traffic, if traffic hitting one of the redirect domains and doesn\'t match it will forward the traffic to a decoy website.\r\nNOTE: This guide is assuming you already have a Cobalt Strike team server running.  \r\nFor this example, we\'ll assume we have a cobalt strike teamserver running at 54.88.220.10 that is using the humanzoo2.profile.\r\n\r\nUse the following script to start a HAProxy redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 2 \"Set up a HAProxy redirector (http and/or https only)\" \r\n\r\n\r\nNext it will ask for a service tag, by default it will give you RD1, or if there is already an RD1, it will give a default of RD2, and so on.  You can keep the default name or add own own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, we\'ll leave it as the default of RD1.                                                                                                                                  \r\n\r\n\r\nNext it will ask for the number of IPs, the script limits this to 20 for sanity reasons.  For this example, we\'ll use 5.\r\n\r\n\r\nThen it will ask for a Geo-location to pull IP addresses from, the NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. For this example we\'ll use the UK.  \r\n\r\n\r\nThen it will ask to select a city, some have a few, but a lot only have one.  For this example, we\'ll select London.\r\n\r\n\r\nThen it will ask if you want to set IPs randomly or manually.  This guide will walk through both processes. \r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select option 1, it will add random IPs during processing so the menu will move on to the next step.  This will be shown after going through the manual process.\r\nSetting IPs - Option 2 Set IPs manually.  The next few screenshots shows the manual IP process.  Below is the menu when you select Set Ips manually.  At this screen you can enter \"s\" to see a list of IP subnets to select IPs from.  The blank menu items will store IPs as you add them in.                                                                                                       \r\n\r\n\r\n\r\n\r\n\r\n\r\nUse the \"s\" option to see available subnets.  This shows the available IP subnets based on the geo-location selections you made previously.  The list is typically long, you can hit the spacebar to page down and press \"q\" then \"enter\" to exit out of the IP subnet view and go back to the previous menu.  You can pick IPs from any of these subnets, so for this example, well use 12.9.80.129/25.  Note you can pick IPs from multiple IP subnets from the list, you don\'t have to use just one IP subnet.                                                                                                                           \r\n\r\n\r\n\r\n\r\n\r\n\r\nAfter pressing \"q\" and back at the menu, we\'ll select 1 from the previous menu to put in an IP for the first IP slot. \r\n\r\n\r\n\r\n\r\n\r\n\r\nThen enter the IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you enter the IP and press enter, the script will take some time to validate the IP, and then it will take you back to the original menu.  You should now see the IP you entered, continue these steps until you\'ve added IPs for all empty slots.  Note:  If you don\'t fill in all empty slots, the script will just use the IPs it has and continue, so say you asked for 5 IPs but only entered 3, it will build it our for those three. \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either set IPs randomly or manually, below is the next menu screen.  Here it asks for what ports to redirect.  For this example, we\'ll select HTTP, HTTPS \r\n\r\n\r\nOnce selected, it will ask if you want to change the port, so if you want the redirect to use port 8443 for https instead of 443.  This only changes the bind to on the Cobalt Strike teamserver, your Cobalt Strike payload will still call out on 443, but will listen for a return on 8443 if you configure the Cobalt Strike Listener\'s \"Bind to\" address to do this.  However, with the teamserver and redirectors residing on the same NRTS, this isn\'t really necessary.  To accept the default just press enter.                      \r\n\r\n\r\nNext it will ask about changing the bind port for http, again you can do this or just leave it as default.  Just keep in mind if you change this, you\'ll need to build your Cobalt Strike listener accordingly.\r\n\r\n\r\nNext it will ask what IP the redirect should be redirecting to.  This should be your Cobalt Strike Teamserver IP.   For this example we will be using 54.88.220.10.\r\n\r\n\r\nThen it will ask which Cobalt Strike profile to use.  This need to be the same as the profile used to start the Cobalt Strike teamserver.  The script will use information from the profile to build out ACLs.  These ACLs are used to identify C2 traffic from other things hitting a redirector domain.  If you select the wrong profile, your C2 will not work.  For this example we will use the humanzoo2.profile.\r\n\r\n\r\nNext it will ask for a decoy website, this is where the HAproxy will redirect any traffic that hits one of its domains if the traffic doesn\'t match the Cobalt Strike ACL that is created based on the C2 profile.  NOTE: this has to be a site that exist in the range and is reachable.  If you put in a domain that isn\'t reachable, the HAProxy will stop working.  The default is set to redbook.com.  We\'ll leave the default for this example.          \r\n\r\n\r\nNext it will ask if you want to create manual domains or have them randomly generated.  If you are using HTTPS, then domains need to be created now in order to create the SSL certificates that the redirector will use.  This guide will walk through both options.          \r\n\r\n\r\n\r\n\r\nAssigning Domains - Option 1 - (use randomly generated one/s).  If we select option 1, the script moves will add these during processing and move on to the next step.  We\'ll cover that after going through the manual process.\r\nAssigning Domains - Option 2 - (Manually create domain name/s).  When you select option 2, you get the menu shown below.  Here you pick an IP from the list and  it will take you to a menu for entering a domain name for that IP.  For this example will use option 1  for IP 208.82.7.57\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you selected an IP to add a domain for, you get the menu shown below.  For this example we\'ll make a domain called goatfarmer.com for the IP of 208.82.7.57.  \r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve added a domain named and pressed \"enter\" it takes you back to the original menu, but now you will see the domain you entered is populated next to the IP.  Repeat this process for all IPs, and select \"d\" for done when you are finished.           \r\n\r\n\r\n\r\n\r\nAt this point, you have either selected random domain name generation or you have manually added domain names for all of you\'re IPs, the next thing the script will ask for is a Tag for these domains.  This tag is used by other scripts to identify who created these domains and/or what there purpose is.  This will allow these domains to be deleted later like say after an engagement and you no longer need them.  For this example, I\'ll use \"test-DNS\"\r\n\r\n\r\nFinally the script has everything it needs to build your HAproxy redirector, take a look at the settings and it you are good with it, press enter to start the redirector build process.\r\n\r\n\r\nBelow is a screenshot of the build process.\r\n\r\n\r\nYou should now have a working redirector.  The information regarding the redirector is located at /root/services/RD1.  This directory will have you DNS information, IP information, where it\'s redirecting to, and the name of the C2 profile used .  You can validate if your redirector is running by looking at docker.  Run docker ps and you should see RD1 up and running.\r\n',7,'2023-04-03 22:23:09','2023-04-04 22:40:56',1,1,0,'',9,0,NULL,1,''),(16,6,0,'Making a NGINX Redirector (buildredteam.sh)','making-a-nginx-redirector-buildredteamsh','<p id=\"bkmrk-note%3A-the-nrts-is-de\">&nbsp;NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp; <br></p>\r\n<p id=\"bkmrk-note%3A-the-haproxy-re\">NOTE: The NGINX redirector can be use with most C2 servers and can redirect DNS traffic.<br></p>\r\n<p id=\"bkmrk-note%3A-this-guide-is-\">NOTE: This guide is assuming you already have a Cobalt Strike or other team server running.&nbsp; <br></p>\r\n<p id=\"bkmrk-for-this-example%2C-we\">For this example, we\'ll assume we have a teamserver running at 54.88.220.10<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a NGINX redirector on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select Option 1 \"Set up a NGINX redirector (http,https, DNS)\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you RD1, or if there is already a RD1, it will give a default of RD2, and so on.&nbsp; You can keep the default or set your own.&nbsp; This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.&nbsp; For this example, we\'ll leave the default of RD1.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/CBYimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-asks-for-the\">\r\n<li class=\"null\">Next it asks for the number of IPs.&nbsp; For the example we\'ll use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ApVimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a geo-location base for your setting your IP\'s.&nbsp; The NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters. &nbsp; For this example we\'ll use option 4 Canada.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/RStimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-narrows-it-d\">\r\n<li class=\"null\">Then it narrows it down by city, for this example we\'ll use Toronto.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/VBWimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP manually or randomly.&nbsp; This guide will walk through both options.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Qhimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ips-%281-set-r\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the menu will move on to the next step.&nbsp; This will be shown after going over the Manual IP option.</li>\r\n<li class=\"null\">Setting IPs&nbsp; - Option 2 set IPs Manually.&nbsp; Then next few screenshots shows the manual IP process. Below is the menu when you select option 2.&nbsp; At this screen you can enter \"s\" to see a list of IP subnets to select an IP from.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/bTcimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available Subnets\", you can use this information to select your IPs.&nbsp; This list can be long, use spacebar to page down, then enter \"q\" and press \"enter\" to exit out and get back to the previous menu.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/X3Rimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-using-the-list-of-av\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Using the list of available IP\'s you can use IP\'s out of any of these subnets, for this example I\'ll use 72.3.244.1/25 - but you can use multiple subnets from the list.&nbsp; Press \"q\" then \"enter\" to exit the IP subnet view and back at the manual IP menu.&nbsp; For this example, we\'ll select 1 for the first blank space.&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/bTcimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-this-brings-up-the-i\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">This brings up the IP entry menu, for this example we\'ll use 72.3.244.20.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hdjimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-i-press-enter%2C-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve enter the IP and pressed enter, it goes back to the manual IP menu and now you see slot one is populated with the IP, continue this process until you\'ve filled all the blanks, then select \"d\" for done.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jJGimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-i-have\">\r\n<li class=\"null\">At this point I have either selected to IPs randomly or manually set IPs, which brings us to the next menu that asks what ports to redirect as shown below.&nbsp;&nbsp; For this example, we\'ll select option 4 for DNS, HTTP and HTTPS.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/rocimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-if-\">\r\n<li class=\"null\">Next it will ask if you want to set a different port for the \"bind to\" this is related to a cobalt strike feature where you can have a listener set the \"bind to\" a different port.&nbsp; The payload you build will still use port 443 for example of a HTTPS payload, but the teamserver will listen on a different port like say 8443.&nbsp; You need a redirector to do something like this, however since the teamserver and redirectors are running in containers, there isn\'t really a need to do this.&nbsp; For this example we will leave it at the default.&nbsp; The screenshoot shows it asks this for each port being redirected.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/rtkimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-2\">\r\n<li class=\"null\">Next it will ask for the IP to redirect to.&nbsp; This should be your C2 server\'s IP.&nbsp; For this example we are using a teamserver running on 54.88.220.10.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Dp2image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-want-to\">\r\n<li class=\"null\">Next it will want to set up DNS and it will give you the option for randomly generated DNS or will let you manually create your domain names.&nbsp; This is necessary whenever you select to redirect HTTPS, the script will need the domain names to generator the CA signed SSL certificates.&nbsp; The script will automatically connect to the CA server to get these signed so they can be used by the NGINX redirector.&nbsp; This guide will walk through both Random and manually domain options.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/LCiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assigning-domains-na\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning domains - Option 1 (Use randomly generated one/s).&nbsp; When you select this, the script will randomly generate domain names during processing, so it just moves on to the next menu.&nbsp; This will be shown after going over the Manual domain name option. &nbsp;&nbsp; <br></li>\r\n<li class=\"null\">Assigning domains - Option 2 (Manually create domain names/s).&nbsp; This will take you to the menu below.&nbsp; Note there is a list of IP\'s, you select a menu number next to an IP to set the domain for that IP.&nbsp; For this example, we\'ll set option 1 (205.225.141.68)<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/nkAimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-show-the-m\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">This will show the menu below where it asks for the domain name.&nbsp; Enter the domain you want to use for that IP and press enter.&nbsp; For this example, we\'ll use goatfarmer.com.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/J49image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-you%27ve-entered-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve entered the domain and pressed enter it takes you back to the manual domain name menu, now you should see the domain populated next to the IP, repeat this process for all IPs and press \"d\" when you are finished.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/sbaimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have either selected randomly generated domain names or completed adding domain names manual.&nbsp; Next the script will ask you to set a tag for your DNS.&nbsp; This is used to identify the domains later when you want to remove them.&nbsp; For this example, we\'ll use \"test-DNS\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xo4image.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-now-the-script-has-a\">\r\n<li class=\"null\">Now the script has all the information it needs to build your NGINX redirector.&nbsp; Review the settings and if you are happy with it press enter to start the docker container build process. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ROCimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-shows-the-buil\">\r\n<li class=\"null\">Below shows the build process, you should now have a NGINX redirector.&nbsp; You can get information about it from the /root/services/RD1 folder. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HDTimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-to-check-that-your-c\">\r\n<li class=\"null\">To check that your container is running run docker ps, you should see a container running with the \"Docker service Tag\" from above.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/4KAimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/4KAimage.png\" alt=\"image.png\"></a></p>',' NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so.  \r\nNOTE: The NGINX redirector can be use with most C2 servers and can redirect DNS traffic.\r\nNOTE: This guide is assuming you already have a Cobalt Strike or other team server running.  \r\nFor this example, we\'ll assume we have a teamserver running at 54.88.220.10\r\n\r\nUse the following script to start a NGINX redirector on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select Option 1 \"Set up a NGINX redirector (http,https, DNS)\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you RD1, or if there is already a RD1, it will give a default of RD2, and so on.  You can keep the default or set your own.  This will be the name of the folder it creates in /root/services for its docker container build and also the name of the docker container itself.  For this example, we\'ll leave the default of RD1.\r\n\r\n\r\nNext it asks for the number of IPs.  For the example we\'ll use 5.\r\n\r\n\r\nNext it will ask for a geo-location base for your setting your IP\'s.  The NRTS has a list of IP subnets stored in a Geo-location based folder structure at /root/backbonerouters.   For this example we\'ll use option 4 Canada.\r\n\r\n\r\nThen it narrows it down by city, for this example we\'ll use Toronto.\r\n\r\n\r\nNext, it will ask if you want to set IP manually or randomly.  This guide will walk through both options.\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 set random IPs.  When you select option 1, it will add random IPs during processing so the menu will move on to the next step.  This will be shown after going over the Manual IP option.\r\nSetting IPs  - Option 2 set IPs Manually.  Then next few screenshots shows the manual IP process. Below is the menu when you select option 2.  At this screen you can enter \"s\" to see a list of IP subnets to select an IP from.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available Subnets\", you can use this information to select your IPs.  This list can be long, use spacebar to page down, then enter \"q\" and press \"enter\" to exit out and get back to the previous menu.                                                                                                                                                 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nUsing the list of available IP\'s you can use IP\'s out of any of these subnets, for this example I\'ll use 72.3.244.1/25 - but you can use multiple subnets from the list.  Press \"q\" then \"enter\" to exit the IP subnet view and back at the manual IP menu.  For this example, we\'ll select 1 for the first blank space.  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThis brings up the IP entry menu, for this example we\'ll use 72.3.244.20.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve enter the IP and pressed enter, it goes back to the manual IP menu and now you see slot one is populated with the IP, continue this process until you\'ve filled all the blanks, then select \"d\" for done.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point I have either selected to IPs randomly or manually set IPs, which brings us to the next menu that asks what ports to redirect as shown below.   For this example, we\'ll select option 4 for DNS, HTTP and HTTPS.\r\n\r\n\r\nNext it will ask if you want to set a different port for the \"bind to\" this is related to a cobalt strike feature where you can have a listener set the \"bind to\" a different port.  The payload you build will still use port 443 for example of a HTTPS payload, but the teamserver will listen on a different port like say 8443.  You need a redirector to do something like this, however since the teamserver and redirectors are running in containers, there isn\'t really a need to do this.  For this example we will leave it at the default.  The screenshoot shows it asks this for each port being redirected.\r\n\r\n\r\nNext it will ask for the IP to redirect to.  This should be your C2 server\'s IP.  For this example we are using a teamserver running on 54.88.220.10.\r\n\r\n\r\nNext it will want to set up DNS and it will give you the option for randomly generated DNS or will let you manually create your domain names.  This is necessary whenever you select to redirect HTTPS, the script will need the domain names to generator the CA signed SSL certificates.  The script will automatically connect to the CA server to get these signed so they can be used by the NGINX redirector.  This guide will walk through both Random and manually domain options.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning domains - Option 1 (Use randomly generated one/s).  When you select this, the script will randomly generate domain names during processing, so it just moves on to the next menu.  This will be shown after going over the Manual domain name option.    \r\nAssigning domains - Option 2 (Manually create domain names/s).  This will take you to the menu below.  Note there is a list of IP\'s, you select a menu number next to an IP to set the domain for that IP.  For this example, we\'ll set option 1 (205.225.141.68)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThis will show the menu below where it asks for the domain name.  Enter the domain you want to use for that IP and press enter.  For this example, we\'ll use goatfarmer.com.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve entered the domain and pressed enter it takes you back to the manual domain name menu, now you should see the domain populated next to the IP, repeat this process for all IPs and press \"d\" when you are finished.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either selected randomly generated domain names or completed adding domain names manual.  Next the script will ask you to set a tag for your DNS.  This is used to identify the domains later when you want to remove them.  For this example, we\'ll use \"test-DNS\"\r\n\r\n\r\nNow the script has all the information it needs to build your NGINX redirector.  Review the settings and if you are happy with it press enter to start the docker container build process. \r\n\r\n\r\nBelow shows the build process, you should now have a NGINX redirector.  You can get information about it from the /root/services/RD1 folder.                     \r\n\r\n\r\nTo check that your container is running run docker ps, you should see a container running with the \"Docker service Tag\" from above.\r\n\r\n',8,'2023-04-04 00:13:37','2023-04-04 22:41:17',1,1,0,'',4,0,NULL,1,''),(17,6,0,'Building a Payload Host (buildredteam.sh)','building-a-payload-host-buildredteamsh','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The NRTS is designed to run red team infrastructure using docker containers.&nbsp; Building these out and managing the network for this is best left up to the script designed to do so.&nbsp;</p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to start a Payload Host on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-then-ask-y\">\r\n<li class=\"null\">Next it will ask for a service tag, by default it will give you P1, or if there is already a P1, it will give a default of P2, and so on.&nbsp; You can keep the default name or add your own.&nbsp; This will be the name of the folder it creates at /root/services for its docker container build and also the name of the container itself.&nbsp; For this example, we\'ll leave it as the default of P1.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/jICimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for\">\r\n<li class=\"null\">Next it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.&nbsp; For this example we will use 5.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/E0aimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-then-it-will-ask-for\">\r\n<li class=\"null\">Then it will ask for a geo-location for your IPs.&nbsp; The NRTS has a list of IP Subnets stored in a Geo-location folder structure at /root/backbonerouters.&nbsp; For this example, we\'ll set our geolocation to option 7 - France. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/hzximage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-for-1\">\r\n<li class=\"null\">Next it will ask for a city, some options have a few and some only have one.&nbsp; For example France only has one, so we\'ll select 1 -Paris since there isn\'t another option.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/UQkimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-it-will-ask-if\">\r\n<li class=\"null\">Next, it will ask if you want to set IP\'s randomly or manually.&nbsp; This guide will walk through both paths.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Pysimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-setting-ip%27s-option-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IP\'s - Option 1 Set random IPs.&nbsp; When you select option 1, it will add random IPs during processing so the script will move on to the next step.&nbsp; We\'ll cover that after going over the manual IP process.</li>\r\n<li class=\"null\">Setting IP\'s - Option 2 Set IPs manually.&nbsp; When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.&nbsp; Select a blank option to get to the IP input screen.&nbsp; First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3Qyimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of the \"show available subnets\".&nbsp; This can be a long list, use spacebar to page down then&nbsp; press \"q\" followed by \"enter\" to exit out of the subnet view and get back to the previous menu.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qstimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-now-that-we-know-wha\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Now that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.&nbsp; You can use any IP from the list of subnets and pull IPs from multiple subnets.&nbsp; Back at the manual IP menu, we\'ll select option 1 for the first blank spot.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/3Qyimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-%C2%A0then-at-the-ip-entr\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">&nbsp;Then at the IP entry menu below we\'ll&nbsp; put in 184.84.181.201.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/GViimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-when-i-press-enter-f\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once you\'ve entered an IP and pressed enter, it will take you back to the manual IP menu, only now the blank at option one is populated with the IP you just entered.&nbsp; Repeat this for all blanks and then press \"d\" when you are done.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/EYoimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-you-ha\">\r\n<li class=\"null\">At this point you have either selected to set IP\'s Randomly or have completed entering manual IPs.&nbsp; This brings you to the next menu.&nbsp; Here it asks you how you want to assign DNS.&nbsp; You can select random or manual, this guide will walk you through both paths.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/9nzimage.png\" alt=\"image.png\"> &nbsp;</li>\r\n</ul>\r\n<ul id=\"bkmrk-assign-dns-option-1-\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domains -&nbsp; Option 1 use randomly generated one/s.&nbsp; When you select this, the script will generate random domains during processing and it will move on to the next step.&nbsp; This will be covered after walking through the manual DNS option.<br></li>\r\n<li class=\"null\">Assigning Domains -&nbsp; Option 2 Manually create domain name/s.&nbsp; This will take you to a new menu that shows a list of IPs.&nbsp; Here you select an IP and then it will ask you to enter the domain name to use for that IP.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HNlimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-for-this-example-we%27\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">For this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name entry menu below.&nbsp; Then we\'ll use goatfarmer.com for that IP.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/h9Rimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-once-we-enter-the-do\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Once we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.&nbsp; Repeat this process for all IP\'s press \"d\" when complete.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/6Mtimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-you-ha-1\">\r\n<li class=\"null\">At this point you have either selected to have domain names created Randomly&nbsp; or have completed the manual domain name process.&nbsp; Next the script will ask you for a DNS tag.&nbsp; This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.&nbsp; For this example we\'ll use \"test-DNS\".<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/aUSimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-the-sc\">\r\n<li class=\"null\">At this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/YcJimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho-1\">\r\n<li class=\"null\">Below is a screenshot of the build process.&nbsp; After its complete information about the payload host service is located at /root/services/P1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dDwimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-you-can-check-that-y\">\r\n<li class=\"null\">You can check that your payload host container is running by running docker ps.&nbsp; You should see a container named P1 or whatever you set as the Docker Service Tag.</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/dj1image.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-then-to-add-payloads\">\r\n<li class=\"null\">Then to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.&nbsp; Note: if you set a custom service tag go there, ex.&nbsp; /root/services/&lt;docker service tag&gt;/WWW.</li>\r\n</ul>','NOTE: The NRTS is designed to run red team infrastructure using docker containers.  Building these out and managing the network for this is best left up to the script designed to do so. \r\n\r\nUse the following script to start a Payload Host on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 4 \"Set up a payload host server\"\r\n\r\n\r\nNext it will ask for a service tag, by default it will give you P1, or if there is already a P1, it will give a default of P2, and so on.  You can keep the default name or add your own.  This will be the name of the folder it creates at /root/services for its docker container build and also the name of the container itself.  For this example, we\'ll leave it as the default of P1.\r\n\r\n\r\nNext it will ask for the number of IPs, you can set up several IPs and they will all host whatever you place on it.  For this example we will use 5.\r\n\r\n\r\nThen it will ask for a geo-location for your IPs.  The NRTS has a list of IP Subnets stored in a Geo-location folder structure at /root/backbonerouters.  For this example, we\'ll set our geolocation to option 7 - France. \r\n\r\n\r\nNext it will ask for a city, some options have a few and some only have one.  For example France only has one, so we\'ll select 1 -Paris since there isn\'t another option.\r\n\r\n\r\nNext, it will ask if you want to set IP\'s randomly or manually.  This guide will walk through both paths.\r\n\r\n\r\n\r\n\r\n\r\n\r\nSetting IP\'s - Option 1 Set random IPs.  When you select option 1, it will add random IPs during processing so the script will move on to the next step.  We\'ll cover that after going over the manual IP process.\r\nSetting IP\'s - Option 2 Set IPs manually.  When you select this option you get a menu screen showing blank options, these blanks need to be filled in with manually entered IPs.  Select a blank option to get to the IP input screen.  First we need to see what IPs are available, so we\'ll select option \"s\" to show available subnets.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of the \"show available subnets\".  This can be a long list, use spacebar to page down then  press \"q\" followed by \"enter\" to exit out of the subnet view and get back to the previous menu.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nNow that we know what IP subnets we can use, we\'ll use 184.84.180.1/22 to pick IPs from.  You can use any IP from the list of subnets and pull IPs from multiple subnets.  Back at the manual IP menu, we\'ll select option 1 for the first blank spot.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n Then at the IP entry menu below we\'ll  put in 184.84.181.201.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce you\'ve entered an IP and pressed enter, it will take you back to the manual IP menu, only now the blank at option one is populated with the IP you just entered.  Repeat this for all blanks and then press \"d\" when you are done.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point you have either selected to set IP\'s Randomly or have completed entering manual IPs.  This brings you to the next menu.  Here it asks you how you want to assign DNS.  You can select random or manual, this guide will walk you through both paths.                                           \r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning Domains -  Option 1 use randomly generated one/s.  When you select this, the script will generate random domains during processing and it will move on to the next step.  This will be covered after walking through the manual DNS option.\r\nAssigning Domains -  Option 2 Manually create domain name/s.  This will take you to a new menu that shows a list of IPs.  Here you select an IP and then it will ask you to enter the domain name to use for that IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nFor this example we\'ll select option 1 - 199.101.132.203, this will bring use to the domain name entry menu below.  Then we\'ll use goatfarmer.com for that IP.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOnce we enter the domain name, it will take you back to the manual DNS menu, only now you should see the domain name populated next to the IP.  Repeat this process for all IP\'s press \"d\" when complete.\r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point you have either selected to have domain names created Randomly  or have completed the manual domain name process.  Next the script will ask you for a DNS tag.  This tag is used to identify the DNS that it will register for later like say after an engagement and you want to remove those DNS records.  For this example we\'ll use \"test-DNS\".\r\n\r\n\r\nAt this point the script has everything it needs to build the payload host, check the settings you selected and if you are happy with it press enter to start the build process.\r\n\r\n\r\nBelow is a screenshot of the build process.  After its complete information about the payload host service is located at /root/services/P1.                                                                               \r\n\r\n\r\nYou can check that your payload host container is running by running docker ps.  You should see a container named P1 or whatever you set as the Docker Service Tag.\r\n\r\n\r\n\r\nThen to add payloads on the payload host, transfer the payloads to the NRTS and place them in the /root/services/P1/WWW directory.  Note: if you set a custom service tag go there, ex.  /root/services/<docker service tag>/WWW.\r\n',9,'2023-04-04 01:12:36','2023-04-04 22:41:36',1,1,0,'',5,0,NULL,1,''),(18,6,0,'Phishing Attack (buildredteam.sh)','phishing-attack-buildredteamsh','<p id=\"bkmrk-note%3A-the-nrts-is-de\">NOTE: The Phishing attack option doesn\'t build a docker container.&nbsp; Instead it sets up the NRTS host to perform the phishing attack.&nbsp; This step is just preparing the NRTS to mimic a domain for sending the phish.<br></p>\r\n<ul id=\"bkmrk-use-the-following-sc\">\r\n<li class=\"null\">Use the following script to set up phishing attack on an NRTS server;\r\n<ul>\r\n<li class=\"null\">/root/scripts/buildredteam.sh</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">This will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"&nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/qoiimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-this-will-then-ask-t\">\r\n<li class=\"null\">This will then ask to select a geo-location based IP, first select a country.&nbsp; For this example we\'ll use China. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/2LTimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-next-it-will-ask-you\">\r\n<li class=\"null\">Next it will ask you to select a city, for this example we\'ll use Beijing.<a href=\"https://redbook.com/uploads/images/gallery/2023-04/pOSimage.png\" target=\"_blank\" rel=\"noopener\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/pOSimage.png\" alt=\"image.png\"></a></li>\r\n</ul>\r\n<ul id=\"bkmrk-next%2C-the-script-wil\">\r\n<li class=\"null\">Next, the script will ask if you want a randomly generated IP or if you want to manually set it.&nbsp; This guide will walk through both paths. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/zhIimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-set-ips---option-1-%28\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Setting IPs - Option 1 Set random IPs.&nbsp; When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.&nbsp; This will be shown after going over the set IPs manually process.</li>\r\n<li class=\"null\">Setting&nbsp; IPs - Option 2 Set IPs manually.&nbsp; When you select this option it will ask you to provide an IP.&nbsp; Before you can provide one, you will need to know what what IP subnets are available for the Geo-location you previously selected.&nbsp; Enter \"s\" at the menu below to see a list of IP subnets. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/PKKimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-below-is-a-screensho\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Below is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit out of thte IP subnet view and get back to the IP input menu.&nbsp; For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ntHimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-type-%22q%22-and-hit-ent\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Type \"q\" and hit enter to exit the IP subnet list, then enter an IP that falls within the subnet you selected.&nbsp; NOTE: do not use the actual listed IP from the list. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HqFimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav\">\r\n<li class=\"null\">At this point we have set our selected to get a randomly generated IP or set it manually.&nbsp; The next menu screen asks how we want to assign our Domain name.&nbsp; Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Zjsimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-assign-dns-%28option-1\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li class=\"null\">Assigning Domain names -&nbsp; Option 1 Use randomly generated one/s.&nbsp; This option will assign random domain names during processing and will move on to the next step.&nbsp; We\'ll cover that after going over the manual domain name option.<br></li>\r\n<li class=\"null\">Assigning Domain names - Option 2 Manually create domain name/s.&nbsp;&nbsp; Selecting this option will bring up&nbsp; the following menu.&nbsp; It will ask for the domain you want to use, for this example we\'ll use goatfarmer.com. <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/ABNimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<ul id=\"bkmrk-at-this-point-we-hav-1\">\r\n<li class=\"null\">At this point we have either selected to have a domain name generated randomly or we manually set a domain name.&nbsp; The script will then want a Tag for your DNS.&nbsp; This tag is used to identify your DNS later, like say after an engagement and you want to remove the the DNS records used.&nbsp; For this example, we\'ll use \"test-DNS\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/0yJimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<ul id=\"bkmrk-finally-the-script-h\">\r\n<li class=\"null\">Finally the script has all the information it needs to set up for a phishing attack.&nbsp; Press enter at the screen below.<br>\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/7saimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Below is a screenshot of the phish preparation build.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Bxbimage.png\" alt=\"image.png\"></li>\r\n</ul>\r\n<p id=\"bkmrk-the-script-edits-the\">The script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.&nbsp; After this you use the scripts at /root/scripts/phish to send your phishing attack.&nbsp; In the /root/scripts/phish directory there are two scripts for sending phishing attacks.&nbsp; They are phish.sh and spam.sh.&nbsp; Below is some information on what to modify in these scripts for your attack.<br></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F\">\r\n<li class=\"null\">/root/scripts/phish/phish.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a single email address.</li>\r\n<li class=\"null\">The script needs to be modified for your attack.&nbsp;</li>\r\n<li class=\"null\">vi phish.sh</li>\r\n<li class=\"null\">The top lines set the \"From\" address. &nbsp; Edit the from and realname to match the domain you set up prior and whatever username you want. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/eUlimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/eUlimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n<li class=\"null\">Then the last line in the script is the phish.&nbsp; Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.&nbsp; If you don\'t have an attachment, delete out the \"-a /path\" from the line.&nbsp; Then at the end replace target@domain.com with the email address you want to send the phish to.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-\"><a href=\"https://redbook.com/uploads/images/gallery/2023-04/xITimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/xITimage.png\" alt=\"image.png\"></a></p>\r\n<ul id=\"bkmrk-%2Froot%2Fscripts%2Fphish%2F-1\">\r\n<li class=\"null\">/root/scripts/phish/spam.sh\r\n<ul>\r\n<li class=\"null\">This is used to send a phish to a list of email addresses.&nbsp; This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.&nbsp; The only difference here is that you don\'t add the target email address in the script.&nbsp; Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\"></p>','NOTE: The Phishing attack option doesn\'t build a docker container.  Instead it sets up the NRTS host to perform the phishing attack.  This step is just preparing the NRTS to mimic a domain for sending the phish.\r\n\r\nUse the following script to set up phishing attack on an NRTS server;\r\n\r\n/root/scripts/buildredteam.sh\r\n\r\n\r\nThis will bring up the text-based menu seen below, select option 5 \"Set up a phishing attack\"      \r\n\r\n\r\nThis will then ask to select a geo-location based IP, first select a country.  For this example we\'ll use China.         \r\n\r\n\r\nNext it will ask you to select a city, for this example we\'ll use Beijing.        \r\n\r\n\r\nNext, the script will ask if you want a randomly generated IP or if you want to manually set it.  This guide will walk through both paths.          \r\n\r\n\r\n\r\n\r\n\r\n\r\nSetting IPs - Option 1 Set random IPs.  When you select this option the script will take note of it and assign a randomly generated IP during processing and will simply take you to the next menu.  This will be shown after going over the set IPs manually process.\r\nSetting  IPs - Option 2 Set IPs manually.  When you select this option it will ask you to provide an IP.  Before you can provide one, you will need to know what what IP subnets are available for the Geo-location you previously selected.  Enter \"s\" at the menu below to see a list of IP subnets.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nBelow is a screenshot of available IP subnets. The IP subnet view list can vary in size depending on the geo-location you selected, you can hit the spacebar to page down and then type \"q\" and hit enter to exit out of thte IP subnet view and get back to the IP input menu.  For this example we\'ll use the 95.213.0.1/22 subnet and set our IP to 95.213.1.30                                                                                                                                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nType \"q\" and hit enter to exit the IP subnet list, then enter an IP that falls within the subnet you selected.  NOTE: do not use the actual listed IP from the list.                      \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have set our selected to get a randomly generated IP or set it manually.  The next menu screen asks how we want to assign our Domain name.  Again we have the option to have this done randomly or to set it manually, this guide will walk through both paths.                             \r\n\r\n\r\n\r\n\r\n\r\n\r\nAssigning Domain names -  Option 1 Use randomly generated one/s.  This option will assign random domain names during processing and will move on to the next step.  We\'ll cover that after going over the manual domain name option.\r\nAssigning Domain names - Option 2 Manually create domain name/s.   Selecting this option will bring up  the following menu.  It will ask for the domain you want to use, for this example we\'ll use goatfarmer.com. \r\n\r\n\r\n\r\n\r\n\r\n\r\nAt this point we have either selected to have a domain name generated randomly or we manually set a domain name.  The script will then want a Tag for your DNS.  This tag is used to identify your DNS later, like say after an engagement and you want to remove the the DNS records used.  For this example, we\'ll use \"test-DNS\"          \r\n\r\n\r\nFinally the script has all the information it needs to set up for a phishing attack.  Press enter at the screen below.\r\n\r\n\r\nBelow is a screenshot of the phish preparation build.\r\n\r\nThe script edits the postfix configuration to match the domain you\'ve selected, register that domain on the rootDNS server and assign that IP address to your NRTS server.  After this you use the scripts at /root/scripts/phish to send your phishing attack.  In the /root/scripts/phish directory there are two scripts for sending phishing attacks.  They are phish.sh and spam.sh.  Below is some information on what to modify in these scripts for your attack.\r\n\r\n/root/scripts/phish/phish.sh\r\n\r\nThis is used to send a phish to a single email address.\r\nThe script needs to be modified for your attack. \r\nvi phish.sh\r\nThe top lines set the \"From\" address.   Edit the from and realname to match the domain you set up prior and whatever username you want.                          \r\n\r\n\r\nThen the last line in the script is the phish.  Place your subject in, edit /root/scripts/phish/body.txt for the body of the email, then if you have an attachment replace the /root/scripts/phish/bad.exe with your attachment.  If you don\'t have an attachment, delete out the \"-a /path\" from the line.  Then at the end replace target@domain.com with the email address you want to send the phish to.\r\n\r\n\r\n\r\n\r\n\r\n/root/scripts/phish/spam.sh\r\n\r\nThis is used to send a phish to a list of email addresses.  This needs to be edited for your attack, change the script similar to the above instructions for phish.sh.  The only difference here is that you don\'t add the target email address in the script.  Instead you add a list of target email addresses to /root/scripts/phish/emaillist.txt.\r\n\r\n\r\n\r\n',10,'2023-04-04 01:52:57','2023-04-05 00:35:38',1,1,0,'',6,0,NULL,1,''),(19,6,0,'Managing Services (buildredteam.sh)','managing-services-buildredteamsh','<p id=\"bkmrk-then-nrts-builds-red\">Then NRTS builds red team infrastructure in docker containers.&nbsp; These containers and services can be managed using the /root/scripts/buildredteam.sh.&nbsp; NOTE: phishing is currently the only service not build in a container, but the script will set up the NRTS host to be able to mimic a domain of your choosing for phishing attacks.&nbsp;</p>\r\n<ul id=\"bkmrk-to-view%2C-restart-or-\">\r\n<li class=\"null\">To View, restart or delete a NRTS red team infrastructure service run /root/scripts/buildredteam.sh to get the the menu below.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/b0Yimage.png\" alt=\"image.png\"></li>\r\n<li class=\"null\">Then select option 6 - Container management.&nbsp; From this menu you can view, delete, start or stop a saved container.&nbsp;\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Kb5image.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">The <strong>View Container Menu </strong>will show you the status of the various service containers.&nbsp; Below is and example.&nbsp; NOTE: This view will show if the container is currently running or stopped.&nbsp; You\'ll also notice the \"phish\" service doesn\'t show a running or stopped status.&nbsp; This is because the phish set up doesn\'t create a docker container.&nbsp; Instead it prep\'s the NRTS host to sending phishing attacks and then phishing attacks are done from other scripts at /root/scripts/phish.&nbsp; For more on phishing attacks goto -&gt; Using the NRTS -&gt; Setting up Phishing attacks\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/llJimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">From the View Menu, you can select a service to see more information about it.&nbsp; It will show all the relevant information, below is examples of looking at the information page for each service type.\r\n<ul id=\"bkmrk-%C2%A0payload-host-servic\">\r\n<li class=\"null\">&nbsp;payload host service (P1)\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/tHEimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">phish set up (phish)\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/wRNimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">redirector (RD1)\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/s1Nimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Cobalt strike teamserver (TS1)\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/oIPimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">The <strong>Delete Container Menu</strong> option shows the following.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/roTimage.png\" alt=\"image.png\"></p>\r\n<ul id=\"bkmrk-from-the-delete-menu\">\r\n<li class=\"null\">From the delete menu you can select a service to delete whether it is running or not.&nbsp; This will stop the container, remove it, remove any IP\'s set on the host for the container and delete out the /root/services/&lt;servicetag&gt; directory.&nbsp; <br></li>\r\n</ul>\r\n</li>\r\n<li class=\"null\">The&nbsp;<strong>Start Container menu</strong> option allows you to start a stopped container.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HB3image.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">The&nbsp;<strong>Stop Container menu&nbsp;</strong>option allows you to stop a running container.&nbsp; This will just kill and remove the container, it can be restarted later with no lose in functionality.\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/gLFimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/gLFimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n</ul>\r\n<p id=\"bkmrk-%C2%A0\">&nbsp;</p>','Then NRTS builds red team infrastructure in docker containers.  These containers and services can be managed using the /root/scripts/buildredteam.sh.  NOTE: phishing is currently the only service not build in a container, but the script will set up the NRTS host to be able to mimic a domain of your choosing for phishing attacks. \r\n\r\nTo View, restart or delete a NRTS red team infrastructure service run /root/scripts/buildredteam.sh to get the the menu below.                                                                                                                                                            \r\nThen select option 6 - Container management.  From this menu you can view, delete, start or stop a saved container. \r\n\r\n\r\nThe View Container Menu will show you the status of the various service containers.  Below is and example.  NOTE: This view will show if the container is currently running or stopped.  You\'ll also notice the \"phish\" service doesn\'t show a running or stopped status.  This is because the phish set up doesn\'t create a docker container.  Instead it prep\'s the NRTS host to sending phishing attacks and then phishing attacks are done from other scripts at /root/scripts/phish.  For more on phishing attacks goto -> Using the NRTS -> Setting up Phishing attacks\r\n\r\n\r\nFrom the View Menu, you can select a service to see more information about it.  It will show all the relevant information, below is examples of looking at the information page for each service type.\r\n\r\n payload host service (P1)\r\n\r\n\r\nphish set up (phish)\r\n\r\n\r\nredirector (RD1)\r\n\r\n\r\nCobalt strike teamserver (TS1)\r\n\r\n\r\n\r\n\r\nThe Delete Container Menu option shows the following.\r\n\r\n\r\nFrom the delete menu you can select a service to delete whether it is running or not.  This will stop the container, remove it, remove any IP\'s set on the host for the container and delete out the /root/services/<servicetag> directory.  \r\n\r\n\r\nThe Start Container menu option allows you to start a stopped container.\r\n\r\n\r\nThe Stop Container menu option allows you to stop a running container.  This will just kill and remove the container, it can be restarted later with no lose in functionality.\r\n\r\n\r\n\r\n ',11,'2023-04-04 17:37:31','2023-04-05 00:01:57',1,1,0,'',3,0,NULL,1,''),(20,6,0,'Managing DNS (ManageDNS.sh)','managing-dns-managednssh','<p id=\"bkmrk-the-cyber-range-is-d\">The Cyber range is designed for Red Team domain name registration via the NRTS server.&nbsp; The various service scripts interact with the RootDNS server to create and register domains.&nbsp; To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.&nbsp; To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.&nbsp; Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.&nbsp; The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh</p>\r\n<p id=\"bkmrk-note%3A-if-you-want-to\">NOTE: if you want to register DNS outside of the automation built into the buildredteam.sh, there is another script on the NRTS called RegisterDNS.sh.&nbsp; For usage of this go to -&gt; How to guides -&gt; Manual Domain Registration.</p>\r\n<ul id=\"bkmrk-launch-the-script-fr\">\r\n<li class=\"null\">Launch the script from the NRTS server</li>\r\n</ul>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fscripts-.%2Fm\"><code class=\"language-bash\">cd /root/scripts\r\n./ManageDNS.sh</code></pre>\r\n<ul id=\"bkmrk-this-will-bring-up-t\">\r\n<li class=\"null\">This will bring up the text based menu below.<img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/X9Ximage.png\" alt=\"image.png\"></li>\r\n<li class=\"null\">Option 1 - View DNS records, will bring up a list of Tags, as shown below\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/HfLimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">From the View menu you can pick an option to see the domains that have been registered for the selected tag.&nbsp; For example, below is option 2 for \"OPFOR-chip-test\".\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/NWzimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Option 2 - Delete DNS records, will bring up a list of tags as shown below.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/buTimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">When you select to delete DNS for a tag, it will give you a warning and a 10 second delay to allow the user to \"CTRL-C\" out of it.&nbsp; If a user selects delete all it adds a 30 second delay for the same reason.&nbsp; Here is a screenshot showing the deletion of the tag \"OPFOR-Chip-test\"\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/TFUimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n<li class=\"null\">Here is what it shows when you enter y to continue.\r\n<p><a href=\"https://redbook.com/uploads/images/gallery/2023-04/8awimage.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/8awimage.png\" alt=\"image.png\"></a></p>\r\n</li>\r\n</ul>','The Cyber range is designed for Red Team domain name registration via the NRTS server.  The various service scripts interact with the RootDNS server to create and register domains.  To help with DNS management, there is a script on the NRTS that can view and delete DNS records from the rootDNS server.  To enable these, every time the NRTS remotely adds DNS records on the RootDNS it will tag the records in both the zone reference config file as well as in each domain zone file.  Then the user can view DNS records created under that tag and also elect to delete DNS records for a specific tag.  The script for doing this resides on any NRTS server at /root/scripts/manageDNS.sh\r\nNOTE: if you want to register DNS outside of the automation built into the buildredteam.sh, there is another script on the NRTS called RegisterDNS.sh.  For usage of this go to -> How to guides -> Manual Domain Registration.\r\n\r\nLaunch the script from the NRTS server\r\n\r\ncd /root/scripts\r\n./ManageDNS.sh\r\n\r\nThis will bring up the text based menu below.\r\nOption 1 - View DNS records, will bring up a list of Tags, as shown below\r\n\r\n\r\nFrom the View menu you can pick an option to see the domains that have been registered for the selected tag.  For example, below is option 2 for \"OPFOR-chip-test\".\r\n\r\n\r\nOption 2 - Delete DNS records, will bring up a list of tags as shown below.\r\n\r\n\r\nWhen you select to delete DNS for a tag, it will give you a warning and a 10 second delay to allow the user to \"CTRL-C\" out of it.  If a user selects delete all it adds a 30 second delay for the same reason.  Here is a screenshot showing the deletion of the tag \"OPFOR-Chip-test\"\r\n\r\n\r\nHere is what it shows when you enter y to continue.\r\n\r\n\r\n',12,'2023-04-05 00:04:31','2023-04-05 00:38:36',1,1,0,'',4,0,NULL,1,''),(21,6,0,'Reverting the NRTS','reverting-the-nrts','<p id=\"bkmrk-if-you-want-to-wipe-\">If you want to wipe out all containers/services/configurations on an NRTS, there is a revert.sh script to do this.&nbsp; It\'s located on the NRTS at /root/scripts/revert.sh</p>\r\n<p id=\"bkmrk-below-is-usage\">below is usage</p>\r\n<pre id=\"bkmrk-cd-%2Froot%2Fscripts-.%2Fr\"><code class=\"language-bash\">cd /root/scripts\r\n./revert.sh</code></pre>\r\n<ul id=\"bkmrk-when-you-run-this%2C-i\">\r\n<li class=\"null\">When you run this, it will make sure you want to by making you confirm.\r\n<p><img src=\"https://redbook.com/uploads/images/gallery/2023-04/scaled-1680-/Awbimage.png\" alt=\"image.png\"></p>\r\n</li>\r\n</ul>','If you want to wipe out all containers/services/configurations on an NRTS, there is a revert.sh script to do this.  It\'s located on the NRTS at /root/scripts/revert.sh\r\nbelow is usage\r\ncd /root/scripts\r\n./revert.sh\r\n\r\nWhen you run this, it will make sure you want to by making you confirm.\r\n\r\n\r\n',13,'2023-04-05 00:39:07','2023-04-05 00:42:15',1,1,0,'',1,0,NULL,1,''),(22,7,0,'Cred list','cred-list','<table id=\"bkmrk-system-username-pass\" style=\"border-collapse: collapse; width: 61.2346%;\" border=\"1\"><colgroup><col style=\"width: 47.0516%;\"><col style=\"width: 29.5141%;\"><col style=\"width: 23.4343%;\"></colgroup>\r\n<tbody>\r\n<tr>\r\n<td><strong>System</strong><br></td>\r\n<td><strong>Username</strong><br></td>\r\n<td><strong>Password</strong><br></td>\r\n</tr>\r\n<tr>\r\n<td>IA-Proxy<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>CA-Server<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td class=\"align-left\">rootDNS<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>web-services<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Traffic-Gen<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Traffic-WebHost<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>NRTS<br></td>\r\n<td>user &amp; root<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>Adminnet-DHCP<br></td>\r\n<td>vyos<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>SI-router<br></td>\r\n<td>vyos<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n<tr>\r\n<td>redbook.com web GUI (bookstack)<br></td>\r\n<td>admin@admin.com<br></td>\r\n<td>toortoor</td>\r\n</tr>\r\n<tr>\r\n<td>dropbox.com web GUI (owncloud)<br></td>\r\n<td>admin<br></td>\r\n<td>toor<br></td>\r\n</tr>\r\n</tbody>\r\n</table>','\r\n\r\n\r\nSystem\r\nUsername\r\nPassword\r\n\r\n\r\nIA-Proxy\r\nuser & root\r\ntoor\r\n\r\n\r\nCA-Server\r\nuser & root\r\ntoor\r\n\r\n\r\nrootDNS\r\nuser & root\r\ntoor\r\n\r\n\r\nweb-services\r\nuser & root\r\ntoor\r\n\r\n\r\nTraffic-Gen\r\nuser & root\r\ntoor\r\n\r\n\r\nTraffic-WebHost\r\nuser & root\r\ntoor\r\n\r\n\r\nNRTS\r\nuser & root\r\ntoor\r\n\r\n\r\nAdminnet-DHCP\r\nvyos\r\ntoor\r\n\r\n\r\nSI-router\r\nvyos\r\ntoor\r\n\r\n\r\nredbook.com web GUI (bookstack)\r\nadmin@admin.com\r\ntoortoor\r\n\r\n\r\ndropbox.com web GUI (owncloud)\r\nadmin\r\ntoor\r\n\r\n\r\n',2,'2023-04-05 00:47:29','2023-04-05 00:59:29',1,1,0,'',4,0,NULL,1,'');
/*!40000 ALTER TABLE `pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `password_resets`
--

DROP TABLE IF EXISTS `password_resets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `password_resets` (
  `email` varchar(191) NOT NULL,
  `token` varchar(191) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  KEY `password_resets_email_index` (`email`),
  KEY `password_resets_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `password_resets`
--

LOCK TABLES `password_resets` WRITE;
/*!40000 ALTER TABLE `password_resets` DISABLE KEYS */;
/*!40000 ALTER TABLE `password_resets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `permission_role`
--

DROP TABLE IF EXISTS `permission_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `permission_role` (
  `permission_id` int(10) unsigned NOT NULL,
  `role_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`permission_id`,`role_id`),
  KEY `permission_role_role_id_foreign` (`role_id`),
  CONSTRAINT `permission_role_permission_id_foreign` FOREIGN KEY (`permission_id`) REFERENCES `role_permissions` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `permission_role_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `permission_role`
--

LOCK TABLES `permission_role` WRITE;
/*!40000 ALTER TABLE `permission_role` DISABLE KEYS */;
INSERT INTO `permission_role` VALUES (19,1),(20,1),(21,1),(22,1),(23,1),(24,1),(24,2),(25,1),(25,2),(26,1),(26,2),(27,1),(27,2),(28,1),(28,2),(29,1),(29,2),(30,1),(30,2),(31,1),(31,2),(32,1),(32,2),(33,1),(33,2),(34,1),(34,2),(35,1),(35,2),(36,1),(36,2),(37,1),(37,2),(38,1),(38,2),(39,1),(39,2),(40,1),(40,2),(41,1),(41,2),(42,1),(42,2),(43,1),(43,2),(44,1),(44,2),(45,1),(45,2),(46,1),(46,2),(47,1),(47,2),(48,1),(48,2),(48,3),(48,4),(49,1),(49,2),(49,3),(49,4),(50,1),(50,2),(50,3),(50,4),(51,1),(51,2),(51,3),(51,4),(52,1),(52,2),(52,3),(52,4),(53,1),(53,2),(53,3),(53,4),(54,1),(55,1),(56,1),(57,1),(58,1),(59,1),(60,1),(61,1),(62,1),(63,1),(64,1),(65,1),(66,1),(66,2),(66,3),(66,4),(67,1),(67,2),(67,3),(67,4),(68,1),(68,2),(69,1),(69,2),(70,1),(70,2),(71,1),(71,2),(72,1),(72,2),(73,1),(73,2),(74,1),(75,1),(76,1),(76,2),(76,3),(76,4),(77,1);
/*!40000 ALTER TABLE `permission_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `references`
--

DROP TABLE IF EXISTS `references`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `references` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `from_id` int(10) unsigned NOT NULL,
  `from_type` varchar(25) NOT NULL,
  `to_id` int(10) unsigned NOT NULL,
  `to_type` varchar(25) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `references_from_id_index` (`from_id`),
  KEY `references_from_type_index` (`from_type`),
  KEY `references_to_id_index` (`to_id`),
  KEY `references_to_type_index` (`to_type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `references`
--

LOCK TABLES `references` WRITE;
/*!40000 ALTER TABLE `references` DISABLE KEYS */;
/*!40000 ALTER TABLE `references` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role_permissions`
--

DROP TABLE IF EXISTS `role_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role_permissions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(191) NOT NULL,
  `display_name` varchar(191) DEFAULT NULL,
  `description` varchar(191) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `permissions_name_unique` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=78 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role_permissions`
--

LOCK TABLES `role_permissions` WRITE;
/*!40000 ALTER TABLE `role_permissions` DISABLE KEYS */;
INSERT INTO `role_permissions` VALUES (19,'settings-manage','Manage Settings',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(20,'users-manage','Manage Users',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(21,'user-roles-manage','Manage Roles & Permissions',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(22,'restrictions-manage-all','Manage All Entity Permissions',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(23,'restrictions-manage-own','Manage Entity Permissions On Own Content',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(24,'book-create-all','Create All Books',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(25,'book-create-own','Create Own Books',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(26,'book-update-all','Update All Books',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(27,'book-update-own','Update Own Books',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(28,'book-delete-all','Delete All Books',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(29,'book-delete-own','Delete Own Books',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(30,'page-create-all','Create All Pages',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(31,'page-create-own','Create Own Pages',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(32,'page-update-all','Update All Pages',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(33,'page-update-own','Update Own Pages',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(34,'page-delete-all','Delete All Pages',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(35,'page-delete-own','Delete Own Pages',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(36,'chapter-create-all','Create All Chapters',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(37,'chapter-create-own','Create Own Chapters',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(38,'chapter-update-all','Update All Chapters',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(39,'chapter-update-own','Update Own Chapters',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(40,'chapter-delete-all','Delete All Chapters',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(41,'chapter-delete-own','Delete Own Chapters',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(42,'image-create-all','Create All Images',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(43,'image-create-own','Create Own Images',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(44,'image-update-all','Update All Images',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(45,'image-update-own','Update Own Images',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(46,'image-delete-all','Delete All Images',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(47,'image-delete-own','Delete Own Images',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(48,'book-view-all','View All Books',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(49,'book-view-own','View Own Books',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(50,'page-view-all','View All Pages',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(51,'page-view-own','View Own Pages',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(52,'chapter-view-all','View All Chapters',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(53,'chapter-view-own','View Own Chapters',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(54,'attachment-create-all','Create All Attachments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(55,'attachment-create-own','Create Own Attachments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(56,'attachment-update-all','Update All Attachments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(57,'attachment-update-own','Update Own Attachments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(58,'attachment-delete-all','Delete All Attachments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(59,'attachment-delete-own','Delete Own Attachments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(60,'comment-create-all','Create All Comments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(61,'comment-create-own','Create Own Comments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(62,'comment-update-all','Update All Comments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(63,'comment-update-own','Update Own Comments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(64,'comment-delete-all','Delete All Comments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(65,'comment-delete-own','Delete Own Comments',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(66,'bookshelf-view-all','View All BookShelves',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(67,'bookshelf-view-own','View Own BookShelves',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(68,'bookshelf-create-all','Create All BookShelves',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(69,'bookshelf-create-own','Create Own BookShelves',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(70,'bookshelf-update-all','Update All BookShelves',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(71,'bookshelf-update-own','Update Own BookShelves',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(72,'bookshelf-delete-all','Delete All BookShelves',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(73,'bookshelf-delete-own','Delete Own BookShelves',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(74,'templates-manage','Manage Page Templates',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(75,'access-api','Access system API',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38'),(76,'content-export','Export Content',NULL,'2023-03-28 22:04:39','2023-03-28 22:04:39'),(77,'editor-change','Change page editor',NULL,'2023-03-28 22:04:39','2023-03-28 22:04:39');
/*!40000 ALTER TABLE `role_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role_user`
--

DROP TABLE IF EXISTS `role_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role_user` (
  `user_id` int(10) unsigned NOT NULL,
  `role_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`user_id`,`role_id`),
  KEY `role_user_role_id_foreign` (`role_id`),
  CONSTRAINT `role_user_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `role_user_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role_user`
--

LOCK TABLES `role_user` WRITE;
/*!40000 ALTER TABLE `role_user` DISABLE KEYS */;
INSERT INTO `role_user` VALUES (1,1),(2,4);
/*!40000 ALTER TABLE `role_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `roles` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `display_name` varchar(191) DEFAULT NULL,
  `description` varchar(191) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `system_name` varchar(191) NOT NULL,
  `external_auth_id` varchar(180) NOT NULL DEFAULT '',
  `mfa_enforced` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `roles_system_name_index` (`system_name`),
  KEY `roles_external_auth_id_index` (`external_auth_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES (1,'Admin','Administrator of the whole application','2023-03-28 22:04:38','2023-03-28 22:04:38','admin','',0),(2,'Editor','User can edit Books, Chapters & Pages','2023-03-28 22:04:38','2023-03-28 22:04:38','','',0),(3,'Viewer','User can view books & their content behind authentication','2023-03-28 22:04:38','2023-03-28 22:04:38','','',0),(4,'Public','The role given to public visitors if allowed','2023-03-28 22:04:38','2023-03-28 22:04:38','public','',0);
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `search_terms`
--

DROP TABLE IF EXISTS `search_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `search_terms` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `term` varchar(180) NOT NULL,
  `entity_type` varchar(100) NOT NULL,
  `entity_id` int(11) NOT NULL,
  `score` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `search_terms_term_index` (`term`),
  KEY `search_terms_entity_type_index` (`entity_type`),
  KEY `search_terms_entity_type_entity_id_index` (`entity_type`,`entity_id`),
  KEY `search_terms_score_index` (`score`)
) ENGINE=InnoDB AUTO_INCREMENT=16245 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `search_terms`
--

LOCK TABLES `search_terms` WRITE;
/*!40000 ALTER TABLE `search_terms` DISABLE KEYS */;
INSERT INTO `search_terms` VALUES (1,'test','book',1,48),(2,'New','page',1,40),(3,'Page','page',1,40),(4,'Grayspace','bookshelf',1,48),(1189,'Web-Services','page',5,40),(1190,'The','page',5,3),(1191,'web','page',5,1),(1192,'services','page',5,2),(1193,'VM','page',5,2),(1194,'adds','page',5,1),(1195,'the','page',5,9),(1196,'following','page',5,2),(1197,'webservers','page',5,1),(1198,'to','page',5,6),(1199,'Cyber','page',5,2),(1200,'Range','page',5,2),(1201,'environment','page',5,1),(1202,'pastebin','page',5,2),(1203,'com','page',5,7),(1204,'-','page',5,4),(1205,'this','page',5,4),(1206,'is','page',5,5),(1207,'a','page',5,11),(1208,'hastebin','page',5,1),(1209,'server','page',5,3),(1210,'running','page',5,5),(1211,'in','page',5,6),(1212,'docker','page',5,11),(1213,'container','page',5,6),(1214,'that','page',5,2),(1215,'simulates','page',5,1),(1216,'com\r','page',5,1),(1217,'redbook','page',5,5),(1218,'bookstack','page',5,2),(1219,'used','page',5,4),(1220,'for','page',5,8),(1221,'documenation','page',5,1),(1222,'you','page',5,4),(1223,'are','page',5,2),(1224,'using','page',5,1),(1225,'it','page',5,3),(1226,'right','page',5,1),(1227,'now','page',5,1),(1228,'\r','page',5,15),(1229,'dropbox','page',5,4),(1230,'owncloud','page',5,4),(1231,'file','page',5,3),(1232,'share','page',5,1),(1233,'simulate','page',5,1),(1234,'cloud','page',5,1),(1235,'sharing','page',5,1),(1236,'service','page',5,1),(1237,' ','page',5,6),(1238,'This','page',5,1),(1239,'could','page',5,1),(1240,'be','page',5,1),(1241,'range','page',5,1),(1242,'management','page',5,1),(1243,'like','page',5,1),(1244,'hosting','page',5,2),(1245,'various','page',5,2),(1246,'apps','page',5,1),(1247,'want','page',5,2),(1248,'install','page',5,1),(1249,'on','page',5,4),(1250,'target','page',5,1),(1251,'domains','page',5,1),(1252,'but','page',5,1),(1253,'mostly','page',5,1),(1254,'s','page',5,1),(1255,'there','page',5,1),(1256,'payload','page',5,1),(1257,'or','page',5,1),(1258,'as','page',5,1),(1259,'an','page',5,1),(1260,'exfiltration','page',5,1),(1261,'point','page',5,1),(1262,'OPFOR','page',5,1),(1263,'diagrams','page',5,2),(1264,'net','page',5,1),(1265,'draw','page',5,1),(1266,'io','page',5,1),(1267,'creating','page',5,2),(1268,'above','page',5,1),(1269,'reside','page',5,1),(1270,'folders','page',5,1),(1271,'web-services','page',5,1),(1272,'/root/pastebin ','page',5,1),(1273,'/root/redbook\r','page',5,1),(1274,'/root/owncloud\r','page',5,1),(1275,'/root/drawio','page',5,1),(1276,'In','page',5,1),(1277,'each','page',5,1),(1278,'directory','page',5,1),(1279,'any','page',5,1),(1280,'config','page',5,1),(1281,'files','page',5,1),(1282,'need','page',5,1),(1283,'along','page',5,1),(1284,'with','page',5,1),(1285,'docker-compose','page',5,1),(1286,'containers','page',5,2),(1287,'should','page',5,1),(1288,'all','page',5,1),(1289,'start','page',5,1),(1290,'up','page',5,1),(1291,'automatically','page',5,1),(1292,'reboot','page',5,1),(1293,'To','page',5,1),(1294,'check','page',5,2),(1295,'status','page',5,1),(1296,'of','page',5,1),(1297,'I','page',5,1),(1298,'d','page',5,1),(1299,'advise','page',5,1),(1300,'googling','page',5,1),(1301,'see','page',5,1),(1302,'how','page',5,1),(1303,'interact','page',5,1),(1304,'and','page',5,4),(1305,'do','page',5,1),(1306,'things','page',5,1),(1307,'For','page',5,1),(1308,'quick','page',5,1),(1309,'can','page',5,1),(1310,'run','page',5,1),(1311,'ps','page',5,1),(1312,'will','page',5,1),(1313,'list','page',5,1),(1314,'NOTE','page',5,1),(1315,'both','page',5,1),(1316,'use','page',5,1),(1317,'mysql','page',5,3),(1318,'database','page',5,1),(1319,'If','page',5,1),(1320,'make','page',5,2),(1321,'backups','page',5,3),(1322,'here','page',5,1),(1323,'syntax','page',5,1),(1324,'restoring','page',5,1),(1325,'from','page',5,1),(1326,'these','page',5,1),(1327,'BACKING','page',5,1),(1328,'UP','page',5,1),(1329,'FOR','page',5,4),(1330,'BOOKSTACK','page',5,2),(1331,'exec','page',5,4),(1332,'-i','page',5,4),(1333,'bookstack_db','page',5,2),(1334,'mysqldump','page',5,2),(1335,'-uroot','page',5,2),(1336,'-pbookstack','page',5,2),(1337,'bookstackapp','page',5,2),(1338,'bookstackbackup','page',5,2),(1339,'sql\r','page',5,2),(1340,'OWNCLOUD','page',5,2),(1341,'owncloud_db','page',5,2),(1342,'-uowncloud','page',5,2),(1343,'-powncloud','page',5,2),(1344,'owncloudbackup','page',5,2),(1345,'sql','page',5,2),(1346,'RESTORING','page',5,1),(1616,'Traffic-WebHost','page',8,40),(1617,'This','page',8,1),(1618,'hosts','page',8,1),(1619,'several','page',8,1),(1620,'websites','page',8,1),(1621,'that','page',8,1),(1622,'can','page',8,1),(1623,'be','page',8,1),(1624,'used','page',8,1),(1625,'by','page',8,1),(1626,'Ghost','page',8,1),(1627,'to','page',8,1),(1628,'create','page',8,1),(1629,'outbound','page',8,1),(1630,'http','page',8,1),(1631,'and','page',8,1),(1632,'https','page',8,1),(1633,'traffic','page',8,1),(1634,'from','page',8,1),(1635,'within','page',8,1),(1636,'a','page',8,1),(1637,'target','page',8,1),(1638,'domain','page',8,1),(1639,' ','page',8,1),(1985,'NRTS','page',9,46),(1986,'The','page',9,1),(1987,'not','page',9,2),(1988,'red','page',9,1),(1989,'team','page',9,1),(1990,'server','page',9,6),(1991,'is','page',9,18),(1992,'build','page',9,5),(1993,'on','page',9,5),(1994,'Ubuntu','page',9,1),(1995,'22','page',9,1),(1996,'01','page',9,1),(1997,'and','page',9,6),(1998,'used','page',9,6),(1999,'to','page',9,24),(2000,'quickly','page',9,1),(2001,'out','page',9,1),(2002,'OPFOR','page',9,4),(2003,'infrastructure','page',9,4),(2004,' ','page',9,12),(2005,'It','page',9,1),(2006,'uses','page',9,1),(2007,'docker','page',9,2),(2008,'containerize','page',9,1),(2009,'each','page',9,3),(2010,'individual','page',9,1),(2011,'system','page',9,1),(2012,'so','page',9,2),(2013,'that','page',9,6),(2014,'one','page',9,1),(2015,'can','page',9,3),(2016,'support','page',9,1),(2017,'multiple','page',9,2),(2018,'services','page',9,1),(2019,'such','page',9,1),(2020,'as','page',9,3),(2021,'a','page',9,13),(2022,'redirector','page',9,2),(2023,'cobalt','page',9,2),(2024,'strike','page',9,2),(2025,'teamserver','page',9,4),(2026,'payload','page',9,2),(2027,'host','page',9,2),(2028,'or','page',9,2),(2029,'of','page',9,9),(2030,'I','page',9,2),(2031,'haven','page',9,1),(2032,'t','page',9,2),(2033,'tested','page',9,1),(2034,'the','page',9,25),(2035,'bounds','page',9,1),(2036,'this','page',9,8),(2037,'sure','page',9,1),(2038,'what','page',9,1),(2039,'maximum','page',9,1),(2040,'have','page',9,1),(2041,'had','page',9,1),(2042,'3','page',9,3),(2043,'teamservers','page',9,2),(2044,'redirectors','page',9,2),(2045,'payloads','page',9,1),(2046,'running','page',9,1),(2047,'successfully','page',9,1),(2048,'simultaneously','page',9,1),(2049,'However','page',9,1),(2050,'isn','page',9,1),(2051,'meant','page',9,1),(2052,'be','page',9,1),(2053,'single','page',9,2),(2054,'for','page',9,13),(2055,'all','page',9,2),(2056,'needs','page',9,1),(2057,'You','page',9,1),(2058,'clone','page',9,1),(2059,'VM','page',9,3),(2060,'make','page',9,2),(2061,'many','page',9,1),(2062,'you','page',9,4),(2063,'would','page',9,1),(2064,'like','page',9,1),(2065,'This','page',9,12),(2066,'do','page',9,1),(2067,'several','page',9,1),(2068,'things','page',9,1),(2069,'will','page',9,7),(2070,'greatly','page',9,1),(2071,'reduce','page',9,1),(2072,'your','page',9,2),(2073,'teams','page',9,1),(2074,'time','page',9,1),(2075,'required','page',9,1),(2076,'deploy','page',9,1),(2077,'systems','page',9,2),(2078,'significantly','page',9,1),(2079,'There','page',9,1),(2080,'lot','page',9,1),(2081,'going','page',9,1),(2082,'in','page',9,5),(2083,'below','page',9,1),(2084,'description','page',9,1),(2085,'folder','page',9,2),(2086,'structure','page',9,3),(2087,'more','page',9,4),(2088,'details','page',9,1),(2089,'how','page',9,5),(2090,'use','page',9,1),(2091,'see','page',9,3),(2092,'How','page',9,2),(2093,'section','page',9,6),(2094,'Folder','page',9,1),(2095,'Structure','page',9,1),(2096,'/root/backbonerouters\r','page',9,1),(2097,'\r','page',9,53),(2098,'directory','page',9,3),(2099,'contains','page',9,2),(2100,'list','page',9,2),(2101,'IP','page',9,2),(2102,'subnets','page',9,1),(2103,'SI-router','page',9,1),(2104,'route','page',9,1),(2105,'connected','page',9,1),(2106,'grayspace','page',9,1),(2107,'esxi','page',9,1),(2108,'switch','page',9,1),(2109,'Its','page',9,1),(2110,'by','page',9,2),(2111,'geo-location','page',9,1),(2112,'following','page',9,1),(2113,'format','page',9,1),(2114,'/root/backbonerouters/','page',9,1),(2115,'country','page',9,1),(2116,'/','page',9,1),(2117,'city','page',9,1),(2118,'txt','page',9,1),(2119,' This','page',9,1),(2120,'other','page',9,1),(2121,'scripts','page',9,3),(2122,'generator','page',9,1),(2123,'addresses','page',9,1),(2124,'/root/C2concealer\r','page',9,1),(2125,'tool','page',9,2),(2126,'generating','page',9,2),(2127,'Cobalt','page',9,2),(2128,'Strike','page',9,2),(2129,'C2','page',9,2),(2130,'profiles','page',9,5),(2131,'/root/cobaltstrike-local\r','page',9,1),(2132,'copy','page',9,3),(2133,'cobaltstrike','page',9,1),(2134,'clean','page',9,1),(2135,'when','page',9,2),(2136,'using','page',9,1),(2137,'buildredteam','page',9,3),(2138,'sh','page',9,3),(2139,'it','page',9,3),(2140,'/root/go\r','page',9,1),(2141,'Golang','page',9,1),(2142,'install','page',9,1),(2143,'whatever','page',9,1),(2144,'go','page',9,1),(2145,'projects','page',9,1),(2146,'want','page',9,1),(2147,'mess','page',9,1),(2148,'with','page',9,1),(2149,'/root/Profiles\r','page',9,1),(2150,'where','page',9,3),(2151,'put','page',9,1),(2152,'look','page',9,1),(2153,'s','page',9,1),(2154,'setting','page',9,1),(2155,'up','page',9,2),(2156,'an','page',9,1),(2157,'HAProxy','page',9,1),(2158,'set','page',9,1),(2159,'ACLs','page',9,1),(2160,'based','page',9,1),(2161,'/root/scripts\r','page',9,1),(2162,'most','page',9,1),(2163,'custom','page',9,1),(2164,'reside','page',9,1),(2165,'/root/scripts/buildreadteam','page',9,1),(2166,'sh\r','page',9,5),(2167,'script','page',9,4),(2168,'automate','page',9,1),(2169,'infastructure','page',9,1),(2170,'create','page',9,2),(2171,'hosts','page',9,2),(2172,'phishing','page',9,3),(2173,'containers','page',9,2),(2174,'See','page',9,3),(2175,'information','page',9,4),(2176,'/root/scripts/ManageDNS','page',9,1),(2177,'manage','page',9,1),(2178,'DNS','page',9,2),(2179,'records','page',9,2),(2180,'get','page',9,2),(2181,'added','page',9,2),(2182,'rootDNS','page',9,2),(2183,'/root/scripts/RegisterDNS','page',9,1),(2184,'new','page',9,1),(2185,'/root/scripts/phish\r','page',9,1),(2186,'sending','page',9,1),(2187,'emails','page',9,1),(2188,'/root/scripts/phish/phish','page',9,1),(2189,'Used','page',9,2),(2190,'send','page',9,2),(2191,'phish','page',9,1),(2192,'target','page',9,1),(2193,'/root/scripts/phish/spam','page',9,1),(2194,'attacks','page',9,1),(2195,'targets','page',9,1),(2196,'/root/services\r','page',9,1),(2197,'storing','page',9,1),(2198,'regarding','page',9,1),(2199,'creates','page',9,1),(2200,'/root/SourcePoint\r','page',9,1),(2201,'another','page',9,1),(2205,'Register','book',5,48),(2206,'DNS','book',5,48),(3460,'RootDNS','page',4,43),(3461,'The','page',4,9),(3462,'server','page',4,13),(3463,'is','page',4,17),(3464,'built','page',4,2),(3465,'on','page',4,5),(3466,'Ubuntu','page',4,1),(3467,'22','page',4,1),(3468,'01','page',4,1),(3469,'and','page',4,24),(3470,'runs','page',4,2),(3471,'a','page',4,28),(3472,'recursive','page',4,3),(3473,'bind9','page',4,7),(3474,' ','page',4,36),(3475,'To','page',4,5),(3476,'simulate','page',4,1),(3477,'real','page',4,16),(3478,'world','page',4,16),(3479,'DNS','page',4,24),(3480,'the','page',4,100),(3481,'configured','page',4,1),(3482,'with','page',4,6),(3483,'following','page',4,1),(3484,'IP','page',4,2),(3485,'addresses','page',4,1),(3486,'8','page',4,5),(3487,'-','page',4,15),(3488,'simulated','page',4,1),(3489,'Googles','page',4,1),(3490,'server\r','page',4,13),(3491,'198','page',4,1),(3492,'41','page',4,1),(3493,'0','page',4,4),(3494,'4','page',4,2),(3495,'simulates','page',4,13),(3496,'A-root','page',4,1),(3497,'192','page',4,6),(3498,'228','page',4,1),(3499,'79','page',4,1),(3500,'59','page',4,1),(3501,'B-root','page',4,1),(3502,'33','page',4,1),(3503,'12-','page',4,1),(3504,'C-root','page',4,1),(3505,'128','page',4,3),(3506,'10','page',4,1),(3507,'90-','page',4,1),(3508,'D-root','page',4,1),(3509,'203','page',4,1),(3510,'230','page',4,1),(3511,'10-','page',4,1),(3512,'E-root','page',4,1),(3513,'195','page',4,1),(3514,'5','page',4,2),(3515,'241-','page',4,1),(3516,'F-root','page',4,1),(3517,'112','page',4,1),(3518,'36','page',4,2),(3519,'4-','page',4,1),(3520,'G-root','page',4,1),(3521,'63','page',4,1),(3522,'2','page',4,1),(3523,'53-','page',4,1),(3524,'H-root','page',4,1),(3525,'148','page',4,1),(3526,'17-','page',4,1),(3527,'I-root','page',4,1),(3528,'58','page',4,1),(3529,'30-','page',4,1),(3530,'J-root','page',4,1),(3531,'193','page',4,1),(3532,'15','page',4,1),(3533,'129-','page',4,1),(3534,'K-root','page',4,1),(3535,'199','page',4,1),(3536,'7','page',4,1),(3537,'83','page',4,1),(3538,'42-','page',4,1),(3539,'L-root','page',4,1),(3540,'202','page',4,1),(3541,'12','page',4,1),(3542,'27','page',4,1),(3543,'33-','page',4,1),(3544,'M-root','page',4,1),(3545,'in','page',4,21),(3546,'Cyber','page',4,1),(3547,'Range','page',4,1),(3548,'handles','page',4,1),(3549,'all','page',4,14),(3550,'grayspace','page',4,1),(3551,'keep','page',4,1),(3552,'this','page',4,11),(3553,'bit','page',4,1),(3554,'organized','page',4,2),(3555,'configuration','page',4,2),(3556,'for','page',4,17),(3557,'has','page',4,3),(3558,'been','page',4,2),(3559,'broken','page',4,1),(3560,'up','page',4,2),(3561,'into','page',4,1),(3562,'functional','page',4,1),(3563,'sections','page',4,1),(3564,'Below','page',4,1),(3565,'listing','page',4,1),(3566,'of','page',4,15),(3567,'file/folder','page',4,1),(3568,'structure','page',4,1),(3569,'along','page',4,2),(3570,'brief','page',4,1),(3571,'explanation','page',4,2),(3572,'its','page',4,2),(3573,'purpose','page',4,1),(3574,'BIND9','page',4,1),(3575,'CONFIGURATION','page',4,1),(3576,'Overview','page',4,2),(3577,'Configuration','page',4,1),(3578,'Files\r','page',4,1),(3579,'\r','page',4,44),(3580,'/etc/bind/named','page',4,8),(3581,'conf ','page',4,1),(3582,' -','page',4,1),(3583,'Contains','page',4,2),(3584,'includes','page',4,1),(3585,'segmented','page',4,1),(3586,'out','page',4,2),(3587,'named','page',4,10),(3588,'conf','page',4,18),(3589,'files','page',4,6),(3590,'options ','page',4,1),(3591,'options','page',4,1),(3592,'that','page',4,11),(3593,'make','page',4,5),(3594,'it','page',4,19),(3595,'This','page',4,16),(3596,'file','page',4,27),(3597,'also','page',4,1),(3598,'specifies','page',4,1),(3599,'IPs','page',4,3),(3600,'listens','page',4,1),(3601,'default-zones','page',4,1),(3602,'default','page',4,1),(3603,'zone','page',4,17),(3604,'created','page',4,3),(3605,'by','page',4,7),(3606,'unmodified','page',4,1),(3607,'OPFOR','page',4,17),(3608,'contains','page',4,5),(3609,'domain','page',4,18),(3610,'references','page',4,6),(3611,'entries','page',4,4),(3612,'For','page',4,1),(3613,'most','page',4,1),(3614,'part','page',4,1),(3615,'here','page',4,3),(3616,'are','page',4,5),(3617,'managed','page',4,1),(3618,'via','page',4,1),(3619,'scripts','page',4,2),(3620,'server ','page',4,1),(3621,'NRTS','page',4,7),(3622,'servers','page',4,1),(3623,'RANGE','page',4,6),(3624,'needed','page',4,1),(3625,'ServicesNet','page',4,1),(3626,'systems','page',4,3),(3627,'target','page',4,2),(3628,'domains','page',4,10),(3629,'exception','page',4,1),(3630,'traffic-gen','page',4,1),(3631,'traffic-webhost','page',4,1),(3632,'servers\r','page',4,1),(3633,'TRAFFIC','page',4,5),(3634,'traffic','page',4,1),(3635,'gen','page',4,1),(3636,'FOLDERS\r','page',4,1),(3637,'/etc/bind/OPFOR','page',4,1),(3638,'Stores','page',4,3),(3639,'zones','page',4,1),(3640,'referenced','page',4,3),(3641,'config','page',4,5),(3642,'/etc/bind/RANGE','page',4,3),(3643,'/etc/bind/TRAFFIC','page',4,1),(3644,'/etc/bind/blackhole','page',4,1),(3645,'two','page',4,1),(3646,'db','page',4,3),(3647,'blackhole','page',4,2),(3648,'points','page',4,1),(3649,'to','page',4,31),(3650,'127','page',4,1),(3651,'1\r','page',4,1),(3652,'Rangism','page',4,1),(3653,'several','page',4,1),(3654,'pointing','page',4,1),(3655,'them','page',4,1),(3656,'used','page',4,3),(3657,'capture','page',4,1),(3658,'various','page',4,1),(3659,'auto','page',4,1),(3660,'generated','page',4,3),(3661,'OS','page',4,1),(3662,'application','page',4,1),(3663,'requests','page',4,2),(3664,'can','page',4,2),(3665,'t','page',4,4),(3666,'be','page',4,5),(3667,'reached','page',4,1),(3668,'or','page',4,3),(3669,'replicated','page',4,1),(3670,'environment','page',4,1),(3671,'Things','page',4,1),(3672,'like','page',4,1),(3673,'updateapi','page',4,1),(3674,'google','page',4,1),(3675,'com','page',4,5),(3676,'etc','page',4,1),(3677,'AUTOMATION','page',4,1),(3678,'root','page',4,1),(3679,'some','page',4,1),(3680,'automation','page',4,2),(3681,'automate','page',4,1),(3682,'registration','page',4,4),(3683,'path','page',4,1),(3684,'adding/removing','page',4,1),(3685,'listed','page',4,2),(3686,'below','page',4,1),(3687,'an','page',4,7),(3688,'their','page',4,2),(3689,'functionality','page',4,1),(3690,'/root/scripts/add-REDTEAM-DNS','page',4,1),(3691,'sh\r','page',4,4),(3692,'script','page',4,12),(3693,'will','page',4,16),(3694,'create','page',4,2),(3695,'PID','page',4,1),(3696,'lock','page',4,1),(3697,'when','page',4,5),(3698,'s','page',4,4),(3699,'executed','page',4,1),(3700,'prevent','page',4,2),(3701,'from','page',4,9),(3702,'running','page',4,1),(3703,'more','page',4,1),(3704,'than','page',4,1),(3705,'one','page',4,2),(3706,'instance','page',4,1),(3707,'If','page',4,3),(3708,'was','page',4,2),(3709,'ran','page',4,1),(3710,'concurrently','page',4,1),(3711,'would','page',4,2),(3712,'likely','page',4,1),(3713,'result','page',4,1),(3714,'corruption','page',4,1),(3715,'bind','page',4,1),(3716,'way','page',4,2),(3717,'works','page',4,2),(3718,'section','page',4,2),(3719,'/root/scripts/buildredteam','page',4,2),(3720,'sh','page',4,8),(3721,'SCP','page',4,1),(3722,'dns','page',4,2),(3723,'containing','page',4,1),(3724,'names','page',4,4),(3725,'using','page',4,1),(3726,'SSH','page',4,1),(3727,'key','page',4,1),(3728,'then','page',4,3),(3729,'remotely','page',4,1),(3730,'run','page',4,5),(3731,'add-REDTEAM-DNS','page',4,3),(3732,'feed','page',4,2),(3733,'as','page',4,6),(3734,'argument','page',4,1),(3735,'take','page',4,1),(3736,'list','page',4,7),(3737,'check','page',4,4),(3738,'if','page',4,5),(3739,'already','page',4,2),(3740,'exists','page',4,3),(3741,'any','page',4,2),(3742,'locations','page',4,1),(3743,'aka','page',4,1),(3744,'folders','page',4,1),(3745,'folder','page',4,2),(3746,'skip','page',4,1),(3747,'request','page',4,1),(3748,'assume','page',4,1),(3749,'user','page',4,5),(3750,'wants','page',4,1),(3751,'update','page',4,1),(3752,'record','page',4,1),(3753,'process','page',4,1),(3754,'It','page',4,4),(3755,'creates','page',4,1),(3756,'each','page',4,2),(3757,'addd','page',4,1),(3758,'directory','page',4,4),(3759,'copy','page',4,4),(3760,'append','page',4,1),(3761,'reference','page',4,7),(3762,'didn','page',4,1),(3763,'exist','page',4,1),(3764,'named-check-conf','page',4,1),(3765,'against','page',4,1),(3766,'passed','page',4,1),(3767,'replace','page',4,2),(3768,'smf','page',4,1),(3769,'restart','page',4,3),(3770,'service','page',4,3),(3771,'read','page',4,2),(3772,'new','page',4,3),(3773,'configurations','page',4,1),(3774,'/root/scripts/delete-REDTEAM-DNS','page',4,1),(3775,'remove','page',4,3),(3776,'records','page',4,2),(3777,'well','page',4,2),(3778,'originally','page',4,1),(3779,'added','page',4,3),(3780,'tag','page',4,3),(3781,'add','page',4,5),(3782,'tags','page',4,2),(3783,'value','page',4,1),(3784,'entered','page',4,1),(3785,'On','page',4,1),(3786,'there','page',4,1),(3787,'managing','page',4,1),(3788,'at','page',4,1),(3789,'/root/scripts/ManageDNS','page',4,2),(3790,'connect','page',4,1),(3791,'rootDNS','page',4,2),(3792,'get','page',4,1),(3793,'A','page',4,1),(3794,'select','page',4,2),(3795,'removed','page',4,1),(3796,'selecting','page',4,1),(3797,'/root/scripts/autoredirector/makednsfile','page',4,1),(3798,'generate','page',4,1),(3799,'elects','page',4,1),(3800,'randomly','page',4,2),(3801,'In','page',4,1),(3802,'case','page',4,1),(3803,'send','page',4,1),(3804,'available','page',4,3),(3805,'masterdomainlist','page',4,2),(3806,'txt','page',4,1),(3807,'pair','page',4,1),(3808,'When','page',4,1),(3809,'selects','page',4,1),(3810,'edit','page',4,1),(3811,'adding','page',4,3),(3812,'#','page',4,2),(3813,'front','page',4,2),(3814,'being','page',4,1),(3815,'reused','page',4,1),(3816,'/root/scripts/autoredirector/masterdomainlist','page',4,1),(3817,'txt\r','page',4,1),(3818,'roughly','page',4,1),(3819,'11000','page',4,1),(3820,'scrapping','page',4,1),(3821,'website','page',4,1),(3822,'expired','page',4,1),(3823,'goal','page',4,1),(3824,'have','page',4,2),(3825,'large','page',4,1),(3826,'pool','page',4,1),(3827,'aren','page',4,1),(3828,'owned','page',4,1),(3829,'concept','page',4,1),(3830,'these','page',4,1),(3831,'purchased','page',4,1),(3832,'adversary','page',4,2),(3833,'wouldn','page',4,1),(3834,'sense','page',4,1),(3835,'able','page',4,1),(3836,'use','page',4,2),(3837,'www','page',4,1),(3838,'microsoft','page',4,1),(3839,'C2','page',4,1),(3840,'/root/scripts/autoredirector/resetmasterdomainlist','page',4,1),(3841,'you','page',4,7),(3842,'ve','page',4,1),(3843,'deleted','page',4,1),(3844,'red','page',4,1),(3845,'team','page',4,1),(3846,'want','page',4,1),(3847,'previously','page',4,1),(3848,'again','page',4,2),(3849,'NOTE','page',4,1),(3850,'other','page',4,2),(3851,'half','page',4,1),(3852,'/root/scripts/RegisterDNS','page',4,1),(3853,'explained','page',4,1),(3854,'overview','page',4,1),(3855,'HOW','page',4,1),(3856,'TO','page',4,1),(3857,'MANUALLY','page',4,1),(3858,'ADD','page',4,1),(3859,'need','page',4,2),(3860,'modify','page',4,1),(3861,'There','page',4,1),(3862,'example','page',4,2),(3863,'called','page',4,1),(3864,'Then','page',4,2),(3865,'simply','page',4,1),(3866,'follow','page',4,2),(3867,'syntax','page',4,3),(3868,'Once','page',4,2),(3869,'However','page',4,1),(3870,'before','page',4,1),(3871,'doing','page',4,1),(3872,'good','page',4,1),(3873,'idea','page',4,1),(3874,'your','page',4,4),(3875,'first','page',4,1),(3876,'test','page',4,1),(3877,'run\r','page',4,1),(3878,'named-checkzone','page',4,1),(3879,'mydomain','page',4,3),(3880,'/etc/bind/RANGE/db','page',4,1),(3881,'com ','page',4,1),(3882,'messed','page',4,1),(3883,'named-checkconfig','page',4,1),(3884,'RANGE\r','page',4,1),(3885,'either','page',4,2),(3886,'errors','page',4,1),(3887,'corrections','page',4,1),(3888,'try','page',4,1),(3889,'they','page',4,1),(3890,'both','page',4,1),(3891,'pass','page',4,1),(3892,'manually','page',4,1),(3893,'same','page',4,1),(3894,'steps','page',4,1),(3895,'just','page',4,1),(3896,'sure','page',4,1),(3897,'correct','page',4,2),(3898,'modifying','page',4,1),(3899,'xxxx','page',4,1),(3900,'CA-Server','page',6,40),(3901,'The','page',6,4),(3902,'CA','page',6,2),(3903,'server','page',6,3),(3904,'is','page',6,7),(3905,'build','page',6,1),(3906,'on','page',6,4),(3907,'Ubuntu','page',6,1),(3908,'22','page',6,1),(3909,'01','page',6,1),(3910,'and','page',6,6),(3911,'uses','page',6,1),(3912,'openSSL','page',6,1),(3913,'to','page',6,4),(3914,'create','page',6,3),(3915,'a','page',6,3),(3916,'Certificate','page',6,2),(3917,'Authority','page',6,2),(3918,'intermediate','page',6,2),(3919,'for','page',6,5),(3920,'signing','page',6,1),(3921,'SSL','page',6,4),(3922,'certs','page',6,6),(3923,' ','page',6,59),(3924,'have','page',6,1),(3925,'already','page',6,1),(3926,'been','page',6,1),(3927,'created','page',6,2),(3928,'using','page',6,1),(3929,'the','page',6,7),(3930,'domain','page',6,1),(3931,'of','page',6,2),(3932,'globalcerts','page',6,1),(3933,'com','page',6,6),(3934,'To','page',6,1),(3935,'new','page',6,1),(3936,'or','page',6,14),(3937,'sign','page',6,2),(3938,'binaries','page',6,1),(3939,'you','page',6,2),(3940,'can','page',6,1),(3941,'use','page',6,2),(3942,'scripts','page',6,3),(3943,'that','page',6,4),(3944,'exist','page',6,1),(3945,'this','page',6,2),(3946,'NRTS','page',6,2),(3947,'will','page',6,4),(3948,'also','page',6,1),(3949,'these','page',6,2),(3950,'automatically','page',6,1),(3951,'redirectors','page',6,1),(3952,'payload','page',6,1),(3953,'hosts','page',6,1),(3954,'services','page',6,1),(3955,'it','page',6,1),(3956,'builds','page',6,1),(3957,'More','page',6,1),(3958,'explained','page',6,1),(3959,'in','page',6,1),(3960,'overview','page',6,2),(3961,'That','page',6,1),(3962,'said','page',6,1),(3963,'if','page',6,3),(3964,'want','page',6,1),(3965,'do','page',6,1),(3966,'generate','page',6,1),(3967,'manually','page',6,1),(3968,'below','page',6,2),(3969,'an','page',6,2),(3970,'CA-server','page',6,1),(3971,'/root/certmaker','page',6,1),(3972,'sh\r','page',6,2),(3973,'\r','page',6,6),(3974,'This','page',6,1),(3975,'used','page',6,2),(3976,'HTTPS','page',6,1),(3977,'script','page',6,1),(3978,'has','page',6,1),(3979,'help','page',6,2),(3980,'menu','page',6,2),(3981,'pretty','page',6,1),(3982,'self','page',6,1),(3983,'explanatory','page',6,1),(3984,'lists','page',6,1),(3985,'various','page',6,1),(3986,'flags','page',6,1),(3987,'REQUIRED','page',6,1),(3988,'Flags','page',6,2),(3989,'-d','page',6,3),(3990,'--domain','page',6,1),(3991,'FQDN','page',6,1),(3992,' ex','page',6,1),(3993,'www','page',6,3),(3994,'example','page',6,4),(3995,'OPTIONAL','page',6,1),(3996,'-','page',6,1),(3997,'random','page',6,1),(3998,'values','page',6,1),(3999,'be','page',6,1),(4000,'not','page',6,1),(4001,'set','page',6,1),(4002,'-r','page',6,1),(4003,'--random','page',6,1),(4004,'randomize','page',6,1),(4005,'Country','page',6,1),(4006,'City','page',6,3),(4007,'State','page',6,1),(4008,'organization','page',6,1),(4009,'info','page',6,1),(4010,'-q','page',6,1),(4011,'--quiet','page',6,1),(4012,'built','page',6,1),(4013,'without','page',6,1),(4014,'showing','page',6,1),(4015,'settings','page',6,1),(4016,'asking','page',6,1),(4017,'confirmation','page',6,1),(4018,'-C','page',6,3),(4019,'--country','page',6,1),(4020,'2LetterAbbrv','page',6,1),(4021,'ex','page',6,6),(4022,'US','page',6,2),(4023,'-ST','page',6,3),(4024,'--state','page',6,1),(4025,' State','page',6,1),(4026,'New','page',6,3),(4027,'York','page',6,3),(4028,'NOTE','page',6,1),(4029,'single','page',6,1),(4030,'quotes','page',6,1),(4031,'need','page',6,1),(4032,'spaces','page',6,1),(4033,'-L','page',6,3),(4034,'--locality','page',6,1),(4035,'-O','page',6,3),(4036,'--organization','page',6,1),(4037,'LTD','page',6,1),(4038,'-CN','page',6,3),(4039,'--commonname','page',6,1),(4040,'-A','page',6,3),(4041,'--alias','page',6,1),(4042,'example-server','page',6,1),(4043,'-DNS1','page',6,2),(4044,'--SAN1','page',6,1),(4045,' Subject','page',6,4),(4046,'Alt','page',6,4),(4047,'Name','page',6,4),(4048,'1','page',6,1),(4049,'-DNS2','page',6,2),(4050,'--SAN2','page',6,1),(4051,'2','page',6,1),(4052,'-DNS3','page',6,1),(4053,'--SAN3','page',6,1),(4054,'3','page',6,1),(4055,'-DNS4','page',6,1),(4056,'--SAN4','page',6,1),(4057,'4','page',6,1),(4058,'Below','page',6,1),(4059,'cert','page',6,1),(4060,'humanzoo','page',6,6),(4061,'com\r','page',6,2),(4062,'/certmaker','page',6,1),(4063,'sh','page',6,2),(4064,'NY','page',6,1),(4065,'Human','page',6,1),(4066,'Zoo','page',6,1),(4067,'foundation','page',6,1),(4068,'login','page',6,1),(4069,'/root/codesigncertmaker','page',6,1),(4070,'/root/cs_codesigncertmaker','page',6,1),(4071,'Traffic-Gen','page',7,40),(4072,'The','page',7,9),(4073,'Traffic-gen','page',7,1),(4074,'server','page',7,2),(4075,'was','page',7,4),(4076,'build','page',7,2),(4077,'on','page',7,2),(4078,'Ubuntu','page',7,1),(4079,'22','page',7,1),(4080,'01','page',7,1),(4081,'and','page',7,14),(4082,'uses','page',7,1),(4083,'a','page',7,18),(4084,'customized','page',7,1),(4085,'docker','page',7,3),(4086,'container','page',7,6),(4087,'that','page',7,12),(4088,'will','page',7,13),(4089,'use','page',7,4),(4090,'Postfix','page',7,1),(4091,'mutt','page',7,1),(4092,'to','page',7,15),(4093,'send','page',7,5),(4094,'emails','page',7,9),(4095,'given','page',7,1),(4096,'list','page',7,4),(4097,'of','page',7,14),(4098,'users','page',7,2),(4099,' ','page',7,25),(4100,'email','page',7,17),(4101,'context','page',7,1),(4102,'pulled','page',7,1),(4103,'using','page',7,1),(4104,'the','page',7,37),(4105,'Enron','page',7,3),(4106,'data','page',7,2),(4107,'dump','page',7,1),(4108,'About','page',7,1),(4109,'20','page',7,1),(4110,'years','page',7,1),(4111,'ago','page',7,1),(4112,'FCC','page',7,1),(4113,'forced','page',7,1),(4114,'make','page',7,3),(4115,'it','page',7,4),(4116,'s','page',7,2),(4117,'corporate','page',7,1),(4118,'public','page',7,1),(4119,'Since','page',7,1),(4120,'then','page',7,2),(4121,'several','page',7,1),(4122,'projects','page',7,1),(4123,'have','page',7,1),(4124,'organized','page',7,1),(4125,'these','page',7,3),(4126,'into','page',7,1),(4127,'databases','page',7,2),(4128,'It','page',7,2),(4129,'decent','page',7,1),(4130,'source','page',7,1),(4131,'for','page',7,8),(4132,'pulling','page',7,1),(4133,'out','page',7,1),(4134,'human','page',7,1),(4135,'readable','page',7,1),(4136,'subject','page',7,3),(4137,'body','page',7,3),(4138,'content','page',7,4),(4139,'script','page',7,9),(4140,'randomly','page',7,2),(4141,'pull','page',7,1),(4142,'from','page',7,6),(4143,'CSV','page',7,2),(4144,'file','page',7,12),(4145,'select','page',7,1),(4146,'address','page',7,2),(4147,'user','page',7,4),(4148,'provide','page',7,1),(4149,'an','page',7,2),(4150,'functionality','page',7,1),(4151,'this','page',7,5),(4152,'is','page',7,14),(4153,'very','page',7,1),(4154,'customization','page',7,1),(4155,'Here','page',7,1),(4156,'overview','page',7,1),(4157,'how','page',7,1),(4158,'used','page',7,3),(4159,'generate','page',7,2),(4160,'traffic','page',7,7),(4161,'FILE','page',7,1),(4162,'STRUCTURE','page',7,1),(4163,'Email','page',7,1),(4164,'Traffic','page',7,1),(4165,'generation','page',7,1),(4166,'scripts\r','page',7,1),(4167,'\r','page',7,35),(4168,' /root/buildcompose','page',7,1),(4169,'sh\r','page',7,4),(4170,'This','page',7,12),(4171,'modify','page',7,2),(4172,'docker-compose','page',7,5),(4173,'based','page',7,1),(4174,'input','page',7,1),(4175,'/root/killtrafficgen','page',7,1),(4176,'Simple','page',7,2),(4177,'basically','page',7,2),(4178,'up','page',7,1),(4179,'-d','page',7,1),(4180,'/root/starttrafficgen','page',7,1),(4181,'down','page',7,1),(4182,'Folder','page',7,1),(4183,'structure','page',7,1),(4184,'generator','page',7,5),(4185,'  ','page',7,1),(4186,'/root/emailerlist','page',7,1),(4187,'txt\r','page',7,3),(4188,'contains','page',7,3),(4189,'domains','page',7,2),(4190,'IPs','page',7,1),(4191,'be','page',7,3),(4192,'by','page',7,3),(4193,'read','page',7,1),(4194,'in','page',7,8),(4195,'build-compose','page',7,1),(4196,'configure','page',7,1),(4197,'each','page',7,6),(4198,'one','page',7,1),(4199,'Then','page',7,2),(4200,'contents','page',7,1),(4201,'/root/TG','page',7,1),(4202,'folder','page',7,3),(4203,'composing','page',7,1),(4204,'sending','page',7,2),(4205,' /root/TG\r','page',7,1),(4206,'/root/TG/Content/EmailContent','page',7,1),(4207,'csv\r','page',7,1),(4208,'extracted','page',7,1),(4209,'publicly','page',7,1),(4210,'available','page',7,1),(4211,'mentioned','page',7,1),(4212,'earlier','page',7,1),(4213,'/root/TG/RandomFiles/\r','page',7,1),(4214,'directory','page',7,4),(4215,'108','page',7,1),(4216,'random','page',7,1),(4217,'files','page',7,2),(4218,'types','page',7,1),(4219,'doc','page',7,1),(4220,'docx','page',7,1),(4221,'ppt','page',7,1),(4222,'pptx','page',7,1),(4223,'pdf','page',7,1),(4224,'xlsx','page',7,1),(4225,'These','page',7,2),(4226,'are','page',7,1),(4227,'as','page',7,2),(4228,'attachments','page',7,2),(4229,'/root/TG/SendTo/','page',7,1),(4230,'defined','page',7,2),(4231,'dir','page',7,2),(4232,'/sendto','page',7,1),(4233,'sendto','page',7,4),(4234,'txt','page',7,5),(4235,'should','page',7,2),(4236,'contain','page',7,1),(4237,'addresses','page',7,3),(4238,'designed','page',7,1),(4239,'support','page',7,1),(4240,'multiple','page',7,1),(4241,'target','page',7,4),(4242,'way','page',7,1),(4243,'works','page',7,1),(4244,'you','page',7,6),(4245,'create','page',7,2),(4246,'domain','page',7,5),(4247,'connect','page',7,1),(4248,'Cyber','page',7,1),(4249,'Range','page',7,1),(4250,'When','page',7,1),(4251,'run','page',7,1),(4252,'buildcompose','page',7,1),(4253,'sh','page',7,1),(4254,'first','page',7,1),(4255,'ask','page',7,1),(4256,'which','page',7,1),(4257,'directories','page',7,1),(4258,'For','page',7,1),(4259,'example','page',7,1),(4260,'if','page',7,1),(4261,'I','page',7,4),(4262,'made','page',7,1),(4263,'called','page',7,2),(4264,'widgets','page',7,1),(4265,'com','page',7,1),(4266,'would','page',7,2),(4267,'at','page',7,1),(4268,'/root/TG/SendTo/widgets','page',7,1),(4269,'fill','page',7,1),(4270,'with','page',7,2),(4271,'widget','page',7,1),(4272,'want','page',7,1),(4273,'Always','page',7,1),(4274,'name','page',7,3),(4275,'-','page',7,1),(4276,'hardcoded','page',7,1),(4277,'/root/TG/Senders/senders','page',7,1),(4278,'names','page',7,1),(4279,'firstname','page',7,1),(4280,'lastname','page',7,1),(4281,'format','page',7,1),(4282,'combination','page',7,1),(4283,'containers','page',7,2),(4284,'emailerlist','page',7,1),(4285,' /root/TG/Scripts/StartEmail','page',7,1),(4286,'entrypoint','page',7,2),(4287,'runs','page',7,1),(4288,'endless','page',7,1),(4289,'loop','page',7,1),(4290,'customizable','page',7,1),(4291,'where','page',7,2),(4292,'can','page',7,3),(4293,'adjust','page',7,1),(4294,'time','page',7,3),(4295,'interval','page',7,1),(4296,'between','page',7,1),(4297,'sent','page',7,3),(4298,'add','page',7,2),(4299,'jitter','page',7,1),(4300,'internal','page',7,1),(4301,'set','page',7,3),(4302,'max','page',7,2),(4303,'number','page',7,2),(4304,'recipients','page',7,1),(4305,'settings','page',7,1),(4306,'modified','page',7,1),(4307,'two','page',7,1),(4308,'ways','page',7,1),(4309,'First','page',7,1),(4310,'edit','page',7,1),(4311,'change','page',7,1),(4312,'default','page',7,1),(4313,'values','page',7,1),(4314,'or','page',7,1),(4315,'could','page',7,1),(4316,'appropriate','page',7,1),(4317,'setting','page',7,1),(4318,'flags','page',7,1),(4319,' \r','page',7,1),(4320,'/root/TrafficLog\r','page',7,1),(4321,'log','page',7,3),(4322,'log_','page',7,1),(4323,'senderdomain','page',7,1),(4324,'track','page',7,1),(4325,'count','page',7,1),(4326,'who','page',7,1),(4335,'Proxy','page',11,49),(4336,'All','page',11,40),(4337,'the','page',11,58),(4338,'things','page',11,40),(4339,'NOTE','page',11,1),(4340,'The','page',11,2),(4341,'proxy','page',11,20),(4342,'is','page',11,2),(4343,'at','page',11,1),(4344,'http','page',11,6),(4345,'//172','page',11,13),(4346,'30','page',11,15),(4347,'0','page',11,15),(4348,'2','page',11,15),(4349,'9999','page',11,8),(4350,'Setting','page',11,4),(4351,'up','page',11,4),(4352,'Docker','page',11,4),(4353,'in','page',11,8),(4354,'linux','page',11,6),(4355,'Add','page',11,9),(4356,'folder','page',11,1),(4357,'for','page',11,6),(4358,'docker','page',11,5),(4359,'service','page',11,4),(4360,'if','page',11,1),(4361,'it','page',11,2),(4362,'doesn','page',11,1),(4363,'t','page',11,1),(4364,'exist','page',11,1),(4365,'and','page',11,6),(4366,'add','page',11,4),(4367,'a','page',11,6),(4368,'conf','page',11,8),(4369,'file ','page',11,1),(4370,' ','page',11,5),(4371,'  ','page',11,1),(4372,'cd','page',11,3),(4373,'/etc/systemd/system\r','page',11,1),(4374,'mkdir','page',11,1),(4375,'d\r','page',11,3),(4376,'vi','page',11,2),(4377,'http-proxy','page',11,2),(4378,'Put','page',11,2),(4379,'following','page',11,6),(4380,'Service','page',11,1),(4381,'\r','page',11,4),(4382,'Environment=','page',11,2),(4383,'HTTP_PROXY=http','page',11,1),(4384,'HTTPS_PROXY=http','page',11,1),(4385,'Lastly','page',11,1),(4386,'reload','page',11,1),(4387,'daemon','page',11,1),(4388,'restart','page',11,2),(4389,'systemctl','page',11,2),(4390,'daemon-reload\r','page',11,1),(4391,'Adding','page',11,3),(4392,'to','page',11,17),(4393,'Dockerfile','page',11,3),(4394,'edit','page',11,2),(4395,'your','page',11,3),(4396,'dockerfile','page',11,1),(4397,'favorite','page',11,1),(4398,'text','page',11,1),(4399,'editor','page',11,1),(4400,'these','page',11,1),(4401,'variables','page',11,3),(4402,'ENV','page',11,2),(4403,'http_proxy','page',11,2),(4404,'9999\r','page',11,5),(4405,'https_proxy','page',11,2),(4406,'Apt','page',11,4),(4407,'Go','page',11,1),(4408,'apt','page',11,2),(4409,'d','page',11,1),(4410,'directory','page',11,1),(4411,'create','page',11,1),(4412,'file','page',11,3),(4413,'/etc/apt/apt','page',11,1),(4414,'Acquire','page',11,2),(4415,'https','page',11,2),(4416,'wget','page',11,5),(4417,'Edit','page',11,1),(4418,'/etc/wgetrc','page',11,1),(4419,'Find','page',11,1),(4420,'lines','page',11,1),(4421,'use_proxy','page',11,1),(4422,'them','page',11,1),(4423,'match','page',11,1),(4424,'use_proxy=yes\r','page',11,1),(4425,'http_proxy=http','page',11,3),(4426,'https_proxy=http','page',11,3),(4427,'Cobalt','page',11,5),(4428,'Strike','page',11,5),(4429,'Update','page',11,4),(4430,'script','page',11,6),(4431,'In','page',11,1),(4432,'order','page',11,1),(4433,'run','page',11,1),(4434,'update','page',11,2),(4435,'you','page',11,2),(4436,'need','page',11,2),(4437,'modify','page',11,1),(4438,'information','page',11,1),(4439,'java','page',11,2),(4440,'command','page',11,2),(4441,'Below','page',11,1),(4442,'additional','page',11,1),(4443,'flags','page',11,1),(4444,'-Dhttp','page',11,2),(4445,'proxyHost=172','page',11,1),(4446,'proxyPort=9999','page',11,2),(4447,'-Dhttps','page',11,2),(4448,'proxyhost=172','page',11,1),(4449,'Using','page',11,4),(4450,'git','page',11,6),(4451,'via','page',11,8),(4452,'can','page',11,2),(4453,'use','page',11,3),(4454,'environment','page',11,2),(4455,'depending','page',11,1),(4456,'on','page',11,2),(4457,'version','page',11,1),(4458,'of','page',11,1),(4459,'To','page',11,1),(4460,'through','page',11,1),(4461,'set','page',11,1),(4462,'with','page',11,1),(4463,'export','page',11,4),(4464,'PIP3','page',11,4),(4465,'install','page',11,4),(4466,'On','page',11,1),(4467,'occasion','page',11,1),(4468,'pip3','page',11,1),(4469,'installs','page',11,1),(4470,'ubuntu','page',11,1),(4471,'runs','page',11,1),(4472,'into','page',11,1),(4473,'issues','page',11,1),(4474,'has','page',11,1),(4475,'worked','page',11,1),(4476,'resolve','page',11,1),(4477,'remove','page',11,1),(4478,'--purge','page',11,1),(4479,'python3-pip','page',11,1),(4480,'-y\r','page',11,1),(4481,'curl','page',11,1),(4482,'//bootstrap','page',11,1),(4483,'pypa','page',11,1),(4484,'io/get-pip','page',11,1),(4485,'py','page',11,3),(4486,'-o','page',11,1),(4487,'install-pip2-ubuntu','page',11,1),(4488,'python3','page',11,1),(4489,'install-pip3-ubuntu','page',11,1),(4490,'Code','page',12,40),(4491,'Signing','page',12,40),(4492,'Certificates','page',12,40),(4493,'for','page',12,40),(4494,'Binaries','page',12,40),(4495,'Using','page',12,1),(4496,'the','page',12,1),(4497,'CA-server','page',12,1),(4498,'to','page',12,1),(4499,'sign','page',12,1),(4500,'binaries','page',12,1),(4501,'SSH','page',12,1),(4502,'into','page',12,1),(4503,'globalcerts','page',12,1),(4504,'com','page',12,1),(4505,'  ','page',12,1),(4506,'Creds','page',12,1),(4507,'root ','page',12,1),(4508,'password','page',12,1),(4509,'toor','page',12,1),(4923,'test','chapter',1,48),(11729,'Network','book',2,48),(11730,'Overview','book',2,48),(11731,'Cyber','book',3,48),(11732,'Range','book',3,48),(11733,'Systems','book',3,48),(11734,'Overview','book',3,48),(11735,'How','book',4,48),(11736,'to','book',4,48),(11737,'Guides','book',4,48),(11768,'Grayspace','bookshelf',2,48),(11769,'Documentation','bookshelf',2,48),(11770,'Network','page',3,40),(11771,'Diagram','page',3,40),(11772,'Notes','page',3,40),(11773,'SI-Router','page',3,3),(11774,'-','page',3,24),(11775,'This','page',3,21),(11776,'is','page',3,18),(11777,'a','page',3,19),(11778,'vyos','page',3,1),(11779,'router','page',3,4),(11780,'that','page',3,9),(11781,'handles','page',3,1),(11782,'all','page',3,6),(11783,'the','page',3,43),(11784,'routing','page',3,1),(11785,'within','page',3,1),(11786,'Cyber','page',3,8),(11787,'Range','page',3,7),(11788,'and','page',3,18),(11789,'to','page',3,38),(11790,'your','page',3,7),(11791,'target','page',3,14),(11792,'domains','page',3,6),(11793,' ','page',3,32),(11794,'It','page',3,2),(11795,'has','page',3,4),(11796,'4','page',3,1),(11797,'interfaces','page',3,1),(11798,'connect','page',3,5),(11799,'following','page',3,2),(11800,'virtual','page',3,4),(11801,'switches','page',3,1),(11802,'ServicesNet','page',3,2),(11803,'The','page',3,3),(11804,'will','page',3,9),(11805,'route','page',3,1),(11806,'several','page',3,2),(11807,'IP','page',3,6),(11808,'subnets','page',3,5),(11809,'related','page',3,1),(11810,'systems','page',3,4),(11811,'on','page',3,10),(11812,'network','page',3,5),(11813,'\r','page',3,16),(11814,'Grayspace','page',3,3),(11815,'apprx','page',3,1),(11816,'1500','page',3,1),(11817,'These','page',3,2),(11818,'are','page',3,5),(11819,'organized','page',3,1),(11820,'by','page',3,2),(11821,'geo-locations','page',3,2),(11822,'NRTS','page',3,7),(11823,'server','page',3,14),(11824,'To','page',3,2),(11825,'see','page',3,4),(11826,'list','page',3,2),(11827,'of','page',3,7),(11828,'available','page',3,1),(11829,'coorisponding','page',3,1),(11830,'look','page',3,1),(11831,'at','page',3,2),(11832,'/root/backbonerouters','page',3,1),(11833,'use','page',3,2),(11834,'these','page',3,2),(11835,'automate','page',3,1),(11836,'address','page',3,3),(11837,'assignments','page',3,1),(11838,'for','page',3,18),(11839,'various','page',3,3),(11840,'OPFOR','page',3,6),(11841,'infastructure','page',3,3),(11842,'services','page',3,4),(11843,'AdminNet','page',3,2),(11844,'used','page',3,9),(11845,'as','page',3,5),(11846,'allow','page',3,2),(11847,'VMs','page',3,2),(11848,'access','page',3,4),(11849,'real','page',3,10),(11850,'internet\r','page',3,1),(11851,'RangeWAN','page',3,3),(11852,'where','page',3,1),(11853,'you','page',3,8),(11854,'environment','page',3,3),(11855,'ServiceNet','page',3,1),(11856,'ESXI','page',3,3),(11857,'switch','page',3,3),(11858,'connects','page',3,2),(11859,'SI','page',3,2),(11860,'Used','page',3,1),(11861,'hosting','page',3,4),(11862,'RootDNS','page',3,3),(11863,'Web-services','page',3,1),(11864,'CA-Server','page',3,4),(11865,'Traffic-Gen','page',3,3),(11866,'Traffic-Web','page',3,1),(11867,'host','page',3,3),(11868,'servers','page',3,4),(11869,'Grayspaces','page',3,1),(11870,'DNS','page',3,5),(11871,'it','page',3,4),(11872,'been','page',3,1),(11873,'ed','page',3,1),(11874,'with','page',3,4),(11875,'world','page',3,8),(11876,'root','page',3,1),(11877,'IPs','page',3,1),(11878,'meaning','page',3,1),(11879,'A-root','page',3,1),(11880,'through','page',3,1),(11881,'M-root','page',3,1),(11882,'Additionally','page',3,2),(11883,'Googles','page',3,1),(11884,'8','page',3,4),(11885,'managing','page',3,1),(11886,'grayspace','page',3,2),(11887,'You','page',3,2),(11888,'can','page',3,6),(11889,'register','page',3,1),(11890,'manually','page',3,1),(11891,'or','page',3,3),(11892,'automation','page',3,1),(11893,'scripts','page',3,1),(11894,'build','page',3,5),(11895,'For','page',3,3),(11896,'more','page',3,4),(11897,'details','page',3,5),(11898,'configuration','page',3,1),(11899,'Detailed','page',3,1),(11900,'Configurations','page',3,1),(11901,'rootDNS','page',3,1),(11902,'Web-Services','page',3,1),(11903,'provides','page',3,3),(11904,'few','page',3,1),(11905,'simulated','page',3,4),(11906,'be','page',3,4),(11907,'general','page',3,1),(11908,'range','page',3,8),(11909,'management','page',3,1),(11910,'in','page',3,12),(11911,'docker','page',3,3),(11912,'containers','page',3,3),(11913,'provide','page',3,2),(11914,'Redbook','page',3,1),(11915,'com','page',3,5),(11916,'bookstack','page',3,2),(11917,'app','page',3,1),(11918,'currently','page',3,1),(11919,'looking','page',3,1),(11920,'documentation','page',3,2),(11921,'covers','page',3,1),(11922,'an','page',3,7),(11923,'overview','page',3,1),(11924,'also','page',3,2),(11925,'expand','page',3,1),(11926,'upon','page',3,1),(11927,'this','page',3,9),(11928,'own','page',3,1),(11929,'whatever','page',3,4),(11930,'dropbox','page',3,1),(11931,'owncloud','page',3,1),(11932,'cloud','page',3,1),(11933,'based','page',3,1),(11934,'file','page',3,1),(11935,'service','page',3,1),(11936,'web','page',3,1),(11937,'dav','page',3,1),(11938,'api','page',3,1),(11939,'s','page',3,4),(11940,'additional','page',3,1),(11941,'ways','page',3,1),(11942,'payloads','page',3,1),(11943,'See','page',3,3),(11944,'section','page',3,3),(11945,'some','page',3,1),(11946,'methods','page',3,1),(11947,'pastebin','page',3,2),(11948,'haste','page',3,1),(11949,'bin','page',3,1),(11950,'code','page',3,2),(11951,'snippets','page',3,1),(11952,'pulled','page',3,1),(11953,'from','page',3,2),(11954,'needs','page',3,1),(11955,'diagrams','page',3,2),(11956,'net','page',3,1),(11957,'draw','page',3,1),(11958,'io','page',3,1),(11959,'generating','page',3,1),(11960,'diagram','page',3,1),(11961,'want','page',3,3),(11962,'Its','page',3,1),(11963,'integrated','page',3,1),(11964,'into','page',3,1),(11965,'redbook','page',3,1),(11966,'was','page',3,1),(11967,'make','page',3,2),(11968,'found','page',3,1),(11969,'documenation','page',3,1),(11970,'openssl','page',3,1),(11971,'certificate','page',3,2),(11972,'authority','page',3,2),(11973,'intermediate','page',3,1),(11974,'simulate','page',3,1),(11975,'CA','page',3,1),(11976,'SSL','page',3,2),(11977,'certificates','page',3,1),(11978,'training','page',3,1),(11979,'In','page',3,1),(11980,'order','page',3,1),(11981,'certs','page',3,3),(11982,'trusted','page',3,2),(11983,'domain','page',3,8),(11984,'environments','page',3,1),(11985,'need','page',3,1),(11986,'copy','page',3,1),(11987,'ca','page',3,1),(11988,'globalcert','page',3,2),(11989,'crt','page',3,2),(11990,'pem','page',3,2),(11991,'int','page',3,1),(11992,'over','page',3,1),(11993,'controller','page',3,1),(11994,'add','page',3,4),(11995,'them','page',3,1),(11996,'Trust','page',3,1),(11997,'stores','page',3,1),(11998,'via','page',3,1),(11999,'GPO','page',3,1),(12000,'xxx','page',3,1),(12001,'how','page',3,2),(12002,'do','page',3,1),(12003,'Once','page',3,2),(12004,'done','page',3,1),(12005,'any','page',3,2),(12006,'create','page',3,2),(12007,'appear','page',3,1),(12008,'generate','page',3,1),(12009,'well','page',3,1),(12010,'signing','page',3,1),(12011,'binarys','page',3,1),(12012,'ubuntu','page',3,4),(12013,'running','page',3,3),(12014,'customizable','page',3,1),(12015,'send','page',3,1),(12016,'emails','page',3,1),(12017,'users','page',3,1),(12018,'traffic','page',3,2),(12019,'information','page',3,1),(12020,'Traffic-WebHost','page',3,1),(12021,'apache','page',3,1),(12022,'websites','page',3,2),(12023,'exists','page',3,1),(12024,'allow ','page',3,1),(12025,'Ghost','page',3,1),(12026,'agents','page',3,1),(12027,'able','page',3,1),(12028,'open','page',3,1),(12029,'browsers','page',3,1),(12030,'hit','page',3,1),(12031,'generation','page',3,1),(12032,'purposes','page',3,1),(12033,'By','page',3,1),(12034,'default','page',3,1),(12035,'instructions','page',3,1),(12036,'out','page',3,2),(12037,'Kali','page',3,2),(12038,'FlareVM','page',3,2),(12039,'Feel','page',3,1),(12040,'free','page',3,1),(12041,'else','page',3,1),(12042,'Not','page',3,1),(12043,'Red','page',3,1),(12044,'Team','page',3,1),(12045,'Server','page',3,1),(12046,'customized','page',3,1),(12047,'red','page',3,1),(12048,'team','page',3,1),(12049,'basic','page',3,2),(12050,'kali','page',3,1),(12051,'tools','page',3,1),(12052,'windows','page',3,1),(12053,'VM','page',3,4),(12054,'but','page',3,1),(12055,'I','page',3,1),(12056,'would','page',3,1),(12057,'advise','page',3,1),(12058,'installing','page',3,1),(12059,'Visual','page',3,1),(12060,'Studios','page',3,1),(12061,'Switch','page',3,1),(12062,'enable','page',3,1),(12063,'internet','page',3,4),(12064,'There','page',3,1),(12065,'main','page',3,1),(12066,'AdminNet-DHCP','page',3,1),(12067,'IA-Proxy','page',3,2),(12068,'cyber','page',3,4),(12069,'have','page',3,1),(12070,'secondary','page',3,1),(12071,'nic','page',3,1),(12072,'built','page',3,1),(12073,'automatically','page',3,1),(12074,'get','page',3,1),(12075,'DHCP','page',3,2),(12076,'lease','page',3,1),(12077,'172','page',3,1),(12078,'30','page',3,2),(12079,'0','page',3,2),(12080,'0/21','page',3,1),(12081,'subnet','page',3,1),(12082,'Adminnet-DHCP','page',3,1),(12083,'exception','page',3,1),(12084,'preferable','page',3,1),(12085,'proxy','page',3,4),(12086,'its','page',3,1),(12087,'verses','page',3,1),(12088,'using','page',3,1),(12089,'reason','page',3,1),(12090,'better','page',3,1),(12091,'explained','page',3,2),(12092,'planning','page',3,2),(12093,'squid','page',3,1),(12094,'just','page',3,1),(12095,'set','page',3,1),(12096,'http','page',3,1),(12097,'//172','page',3,1),(12098,'2','page',3,1),(12099,'9999','page',3,1),(12100,'connection','page',3,2),(12101,'one','page',3,1),(12102,'ve','page',3,1),(12103,'pick','page',3,1),(12104,'public','page',3,1),(12105,'WAN','page',3,1),(12106,'point','page',3,1),(12107,'virual','page',3,1),(12108,'Then','page',3,1),(12109,'edit','page',3,1),(12110,'interface','page',3,1),(12111,'complete','page',3,1),(12112,'More','page',3,1),(12113,'specific','page',3,1),(12114,'Network','page',2,44),(12115,'Diagram','page',2,44),(12116,'Notes','page',2,4),(12117,'SI-Router','page',2,3),(12118,'-','page',2,24),(12119,'This','page',2,21),(12120,'is','page',2,18),(12121,'a','page',2,19),(12122,'vyos','page',2,1),(12123,'router','page',2,4),(12124,'that','page',2,9),(12125,'handles','page',2,1),(12126,'all','page',2,6),(12127,'the','page',2,43),(12128,'routing','page',2,1),(12129,'within','page',2,1),(12130,'Cyber','page',2,8),(12131,'Range','page',2,7),(12132,'and','page',2,18),(12133,'to','page',2,38),(12134,'your','page',2,7),(12135,'target','page',2,14),(12136,'domains','page',2,6),(12137,' ','page',2,32),(12138,'It','page',2,2),(12139,'has','page',2,4),(12140,'4','page',2,1),(12141,'interfaces','page',2,1),(12142,'connect','page',2,5),(12143,'following','page',2,2),(12144,'virtual','page',2,4),(12145,'switches','page',2,1),(12146,'ServicesNet','page',2,2),(12147,'The','page',2,3),(12148,'will','page',2,9),(12149,'route','page',2,1),(12150,'several','page',2,2),(12151,'IP','page',2,6),(12152,'subnets','page',2,5),(12153,'related','page',2,1),(12154,'systems','page',2,4),(12155,'on','page',2,10),(12156,'network','page',2,5),(12157,'\r','page',2,16),(12158,'Grayspace','page',2,3),(12159,'apprx','page',2,1),(12160,'1500','page',2,1),(12161,'These','page',2,2),(12162,'are','page',2,5),(12163,'organized','page',2,1),(12164,'by','page',2,2),(12165,'geo-locations','page',2,2),(12166,'NRTS','page',2,7),(12167,'server','page',2,14),(12168,'To','page',2,2),(12169,'see','page',2,4),(12170,'list','page',2,2),(12171,'of','page',2,7),(12172,'available','page',2,1),(12173,'coorisponding','page',2,1),(12174,'look','page',2,1),(12175,'at','page',2,2),(12176,'/root/backbonerouters','page',2,1),(12177,'use','page',2,2),(12178,'these','page',2,2),(12179,'automate','page',2,1),(12180,'address','page',2,3),(12181,'assignments','page',2,1),(12182,'for','page',2,18),(12183,'various','page',2,3),(12184,'OPFOR','page',2,6),(12185,'infastructure','page',2,3),(12186,'services','page',2,4),(12187,'AdminNet','page',2,2),(12188,'used','page',2,9),(12189,'as','page',2,5),(12190,'allow','page',2,2),(12191,'VMs','page',2,2),(12192,'access','page',2,4),(12193,'real','page',2,10),(12194,'internet\r','page',2,1),(12195,'RangeWAN','page',2,3),(12196,'where','page',2,1),(12197,'you','page',2,8),(12198,'environment','page',2,3),(12199,'ServiceNet','page',2,1),(12200,'ESXI','page',2,3),(12201,'switch','page',2,3),(12202,'connects','page',2,2),(12203,'SI','page',2,2),(12204,'Used','page',2,1),(12205,'hosting','page',2,4),(12206,'RootDNS','page',2,3),(12207,'Web-services','page',2,1),(12208,'CA-Server','page',2,4),(12209,'Traffic-Gen','page',2,3),(12210,'Traffic-Web','page',2,1),(12211,'host','page',2,3),(12212,'servers','page',2,4),(12213,'Grayspaces','page',2,1),(12214,'DNS','page',2,5),(12215,'it','page',2,4),(12216,'been','page',2,1),(12217,'ed','page',2,1),(12218,'with','page',2,4),(12219,'world','page',2,8),(12220,'root','page',2,1),(12221,'IPs','page',2,1),(12222,'meaning','page',2,1),(12223,'A-root','page',2,1),(12224,'through','page',2,1),(12225,'M-root','page',2,1),(12226,'Additionally','page',2,2),(12227,'Googles','page',2,1),(12228,'8','page',2,4),(12229,'managing','page',2,1),(12230,'grayspace','page',2,2),(12231,'You','page',2,2),(12232,'can','page',2,6),(12233,'register','page',2,1),(12234,'manually','page',2,1),(12235,'or','page',2,3),(12236,'automation','page',2,1),(12237,'scripts','page',2,1),(12238,'build','page',2,5),(12239,'For','page',2,3),(12240,'more','page',2,4),(12241,'details','page',2,5),(12242,'configuration','page',2,1),(12243,'Detailed','page',2,1),(12244,'Configurations','page',2,1),(12245,'rootDNS','page',2,1),(12246,'Web-Services','page',2,1),(12247,'provides','page',2,3),(12248,'few','page',2,1),(12249,'simulated','page',2,4),(12250,'be','page',2,4),(12251,'general','page',2,1),(12252,'range','page',2,8),(12253,'management','page',2,1),(12254,'in','page',2,12),(12255,'docker','page',2,3),(12256,'containers','page',2,3),(12257,'provide','page',2,2),(12258,'Redbook','page',2,1),(12259,'com','page',2,5),(12260,'bookstack','page',2,2),(12261,'app','page',2,1),(12262,'currently','page',2,1),(12263,'looking','page',2,1),(12264,'documentation','page',2,2),(12265,'covers','page',2,1),(12266,'an','page',2,7),(12267,'overview','page',2,1),(12268,'also','page',2,2),(12269,'expand','page',2,1),(12270,'upon','page',2,1),(12271,'this','page',2,9),(12272,'own','page',2,1),(12273,'whatever','page',2,4),(12274,'dropbox','page',2,1),(12275,'owncloud','page',2,1),(12276,'cloud','page',2,1),(12277,'based','page',2,1),(12278,'file','page',2,1),(12279,'service','page',2,1),(12280,'web','page',2,1),(12281,'dav','page',2,1),(12282,'api','page',2,1),(12283,'s','page',2,4),(12284,'additional','page',2,1),(12285,'ways','page',2,1),(12286,'payloads','page',2,1),(12287,'See','page',2,3),(12288,'section','page',2,3),(12289,'some','page',2,1),(12290,'methods','page',2,1),(12291,'pastebin','page',2,2),(12292,'haste','page',2,1),(12293,'bin','page',2,1),(12294,'code','page',2,2),(12295,'snippets','page',2,1),(12296,'pulled','page',2,1),(12297,'from','page',2,2),(12298,'needs','page',2,1),(12299,'diagrams','page',2,2),(12300,'net','page',2,1),(12301,'draw','page',2,1),(12302,'io','page',2,1),(12303,'generating','page',2,1),(12304,'diagram','page',2,1),(12305,'want','page',2,3),(12306,'Its','page',2,1),(12307,'integrated','page',2,1),(12308,'into','page',2,1),(12309,'redbook','page',2,1),(12310,'was','page',2,1),(12311,'make','page',2,2),(12312,'found','page',2,1),(12313,'documenation','page',2,1),(12314,'openssl','page',2,1),(12315,'certificate','page',2,2),(12316,'authority','page',2,2),(12317,'intermediate','page',2,1),(12318,'simulate','page',2,1),(12319,'CA','page',2,1),(12320,'SSL','page',2,2),(12321,'certificates','page',2,1),(12322,'training','page',2,1),(12323,'In','page',2,1),(12324,'order','page',2,1),(12325,'certs','page',2,3),(12326,'trusted','page',2,2),(12327,'domain','page',2,8),(12328,'environments','page',2,1),(12329,'need','page',2,1),(12330,'copy','page',2,1),(12331,'ca','page',2,1),(12332,'globalcert','page',2,2),(12333,'crt','page',2,2),(12334,'pem','page',2,2),(12335,'int','page',2,1),(12336,'over','page',2,1),(12337,'controller','page',2,1),(12338,'add','page',2,4),(12339,'them','page',2,1),(12340,'Trust','page',2,1),(12341,'stores','page',2,1),(12342,'via','page',2,1),(12343,'GPO','page',2,1),(12344,'xxx','page',2,1),(12345,'how','page',2,2),(12346,'do','page',2,1),(12347,'Once','page',2,2),(12348,'done','page',2,1),(12349,'any','page',2,2),(12350,'create','page',2,2),(12351,'appear','page',2,1),(12352,'generate','page',2,1),(12353,'well','page',2,1),(12354,'signing','page',2,1),(12355,'binarys','page',2,1),(12356,'ubuntu','page',2,4),(12357,'running','page',2,3),(12358,'customizable','page',2,1),(12359,'send','page',2,1),(12360,'emails','page',2,1),(12361,'users','page',2,1),(12362,'traffic','page',2,2),(12363,'information','page',2,1),(12364,'Traffic-WebHost','page',2,1),(12365,'apache','page',2,1),(12366,'websites','page',2,2),(12367,'exists','page',2,1),(12368,'allow ','page',2,1),(12369,'Ghost','page',2,1),(12370,'agents','page',2,1),(12371,'able','page',2,1),(12372,'open','page',2,1),(12373,'browsers','page',2,1),(12374,'hit','page',2,1),(12375,'generation','page',2,1),(12376,'purposes','page',2,1),(12377,'By','page',2,1),(12378,'default','page',2,1),(12379,'instructions','page',2,1),(12380,'out','page',2,2),(12381,'Kali','page',2,2),(12382,'FlareVM','page',2,2),(12383,'Feel','page',2,1),(12384,'free','page',2,1),(12385,'else','page',2,1),(12386,'Not','page',2,1),(12387,'Red','page',2,1),(12388,'Team','page',2,1),(12389,'Server','page',2,1),(12390,'customized','page',2,1),(12391,'red','page',2,1),(12392,'team','page',2,1),(12393,'basic','page',2,2),(12394,'kali','page',2,1),(12395,'tools','page',2,1),(12396,'windows','page',2,1),(12397,'VM','page',2,4),(12398,'but','page',2,1),(12399,'I','page',2,1),(12400,'would','page',2,1),(12401,'advise','page',2,1),(12402,'installing','page',2,1),(12403,'Visual','page',2,1),(12404,'Studios','page',2,1),(12405,'Switch','page',2,1),(12406,'enable','page',2,1),(12407,'internet','page',2,4),(12408,'There','page',2,1),(12409,'main','page',2,1),(12410,'AdminNet-DHCP','page',2,1),(12411,'IA-Proxy','page',2,2),(12412,'cyber','page',2,4),(12413,'have','page',2,1),(12414,'secondary','page',2,1),(12415,'nic','page',2,1),(12416,'built','page',2,1),(12417,'automatically','page',2,1),(12418,'get','page',2,1),(12419,'DHCP','page',2,2),(12420,'lease','page',2,1),(12421,'172','page',2,1),(12422,'30','page',2,2),(12423,'0','page',2,2),(12424,'0/21','page',2,1),(12425,'subnet','page',2,1),(12426,'Adminnet-DHCP','page',2,1),(12427,'exception','page',2,1),(12428,'preferable','page',2,1),(12429,'proxy','page',2,4),(12430,'its','page',2,1),(12431,'verses','page',2,1),(12432,'using','page',2,1),(12433,'reason','page',2,1),(12434,'better','page',2,1),(12435,'explained','page',2,2),(12436,'planning','page',2,2),(12437,'squid','page',2,1),(12438,'just','page',2,1),(12439,'set','page',2,1),(12440,'http','page',2,1),(12441,'//172','page',2,1),(12442,'2','page',2,1),(12443,'9999','page',2,1),(12444,'connection','page',2,2),(12445,'one','page',2,1),(12446,'ve','page',2,1),(12447,'pick','page',2,1),(12448,'public','page',2,1),(12449,'WAN','page',2,1),(12450,'point','page',2,1),(12451,'virual','page',2,1),(12452,'Then','page',2,1),(12453,'edit','page',2,1),(12454,'interface','page',2,1),(12455,'complete','page',2,1),(12456,'More','page',2,1),(12457,'specific','page',2,1),(12553,'Manual','page',10,40),(12554,'Domain','page',10,40),(12555,'Registration','page',10,40),(12556,'Add','page',10,5),(12557,'Domains','page',10,5),(12558,'based','page',10,6),(12559,'on','page',10,8),(12560,'user','page',10,6),(12561,'created','page',10,6),(12562,'file','page',10,8),(12563,'Step','page',10,5),(12564,'1','page',10,1),(12565,'Obtain','page',10,1),(12566,'the','page',10,17),(12567,'RegisterDNS','page',10,4),(12568,'sh','page',10,8),(12569,'script','page',10,5),(12570,'This','page',10,1),(12571,'can','page',10,3),(12572,'be','page',10,1),(12573,'found','page',10,1),(12574,'any','page',10,1),(12575,'NRTS','page',10,6),(12576,'server','page',10,3),(12577,'at','page',10,3),(12578,'/root/scripts','page',10,2),(12579,'You','page',10,1),(12580,'use','page',10,1),(12581,'it','page',10,3),(12582,'from','page',10,2),(12583,'or','page',10,4),(12584,'SCP','page',10,1),(12585,'over','page',10,1),(12586,'to','page',10,5),(12587,'Kali','page',10,1),(12588,'most','page',10,1),(12589,'Linux','page',10,1),(12590,'systems','page',10,1),(12591,'2','page',10,1),(12592,'Set','page',10,1),(12593,'up','page',10,2),(12594,'ssh','page',10,2),(12595,'keys','page',10,2),(12596,'between','page',10,1),(12597,'system','page',10,1),(12598,'you','page',10,3),(12599,'are','page',10,3),(12600,'and','page',10,1),(12601,'main','page',10,1),(12602,'DNS','page',10,9),(12603,'198','page',10,1),(12604,'41','page',10,2),(12605,'0','page',10,2),(12606,'4','page',10,3),(12607,' ','page',10,4),(12608,'If','page',10,1),(12609,'doing','page',10,1),(12610,'this','page',10,4),(12611,'an','page',10,3),(12612,'skip','page',10,1),(12613,'step','page',10,1),(12614,'since','page',10,1),(12615,'set','page',10,1),(12616,'during','page',10,1),(12617,'initial','page',10,1),(12618,'build','page',10,1),(12619,'of','page',10,3),(12620,'ssh-copy-id','page',10,1),(12621,'root@198','page',10,1),(12622,'##','page',10,1),(12623,'password','page',10,1),(12624,'is','page',10,4),(12625,'toor','page',10,1),(12626,'3','page',10,1),(12627,'Look','page',10,1),(12628,'s','page',10,2),(12629,'usage','page',10,2),(12630,'Run','page',10,2),(12631,'without','page',10,1),(12632,'passing','page',10,1),(12633,'a','page',10,3),(12634,'argument','page',10,1),(12635,'Create','page',10,1),(12636,'according','page',10,1),(12637,'scripts','page',10,1),(12638,'Below','page',10,1),(12639,'example','page',10,1),(12640,'5','page',10,1),(12641,'with','page',10,1),(12642,'path','page',10,1),(12643,'your','page',10,1),(12644,'ex','page',10,1),(12645,'\\RegisterDNS','page',10,1),(12646,'mydns','page',10,1),(12647,'txt','page',10,1),(12648,'Managing','page',10,4),(12649,'On','page',10,1),(12650,'in','page',10,1),(12651,'directory','page',10,1),(12652,'called','page',10,1),(12653,'ManageDNS','page',10,2),(12654,'  ','page',10,1),(12655,'Use','page',10,1),(12656,'View','page',10,1),(12657,'Delete','page',10,1),(12658,'registrations','page',10,1),(12659,'tagged','page',10,1),(12660,'by','page',10,2),(12661,'when','page',10,1),(12662,'either','page',10,1),(12663,'as','page',10,1),(12664,'part','page',10,1),(12665,'process','page',10,1),(12666,'buildredteam','page',10,1),(12667,'For','page',10,1),(12668,'more','page',10,1),(12669,'information','page',10,1),(12670,'go','page',10,1),(12671,'-','page',10,2),(12672,'Using','page',10,1),(13068,'Starting','page',14,40),(13069,'a','page',14,64),(13070,'Cobalt','page',14,47),(13071,'Strike','page',14,47),(13072,'Teamserver','page',14,40),(13073,'buildredteam','page',14,41),(13074,'sh','page',14,41),(13075,'NOTE','page',14,1),(13076,'The','page',14,2),(13077,'NRTS','page',14,5),(13078,'is','page',14,14),(13079,'designed','page',14,2),(13080,'to','page',14,27),(13081,'run','page',14,2),(13082,'red','page',14,1),(13083,'team','page',14,1),(13084,'infrastructure','page',14,1),(13085,'using','page',14,3),(13086,'docker','page',14,4),(13087,'containers','page',14,1),(13088,' ','page',14,102),(13089,'Building','page',14,1),(13090,'these','page',14,2),(13091,'out','page',14,2),(13092,'and','page',14,14),(13093,'managing','page',14,1),(13094,'the','page',14,42),(13095,'network','page',14,1),(13096,'for','page',14,7),(13097,'this','page',14,16),(13098,'best','page',14,1),(13099,'left','page',14,1),(13100,'up','page',14,6),(13101,'script','page',14,7),(13102,'do','page',14,1),(13103,'so','page',14,5),(13104,'On','page',14,1),(13105,'root','page',14,1),(13106,'folder','page',14,3),(13107,'of','page',14,10),(13108,'copy','page',14,1),(13109,'cobalt','page',14,3),(13110,'strike','page',14,3),(13111,'listed','page',14,1),(13112,'as','page',14,3),(13113,'cobaltstrike-local','page',14,1),(13114,'This','page',14,6),(13115,'clean','page',14,1),(13116,'template','page',14,1),(13117,'you','page',14,26),(13118,'shouldn','page',14,1),(13119,'t','page',14,1),(13120,'use','page',14,10),(13121,'start','page',14,5),(13122,'teamserver','page',14,8),(13123,'directly','page',14,1),(13124,'Doing','page',14,1),(13125,'would','page',14,1),(13126,'create','page',14,3),(13127,'artifacts','page',14,1),(13128,'on','page',14,4),(13129,'any','page',14,2),(13130,'build','page',14,5),(13131,'That','page',14,1),(13132,'said','page',14,1),(13133,'instructions','page',14,2),(13134,'are','page',14,2),(13135,'Also','page',14,1),(13136,'guide','page',14,3),(13137,'assuming','page',14,1),(13138,'that','page',14,6),(13139,'have','page',14,3),(13140,'already','page',14,2),(13141,'created','page',14,2),(13142,'profile','page',14,5),(13143,'want','page',14,5),(13144,'For','page',14,9),(13145,'example','page',14,6),(13146,'we','page',14,7),(13147,'will','page',14,21),(13148,'humanzoo','page',14,1),(13149,'how','page',14,1),(13150,'C2','page',14,2),(13151,'profiles','page',14,2),(13152,'go','page',14,1),(13153,'-','page',14,4),(13154,'Using','page',14,1),(13155,'Creating','page',14,1),(13156,'Profiles','page',14,1),(13157,'Use','page',14,1),(13158,'following','page',14,1),(13159,'an','page',14,5),(13160,'server','page',14,1),(13161,'\r','page',14,11),(13162,'/root/scripts/buildredteam','page',14,1),(13163,'sh\r','page',14,2),(13164,'Example','page',14,1),(13165,'usage','page',14,1),(13166,'cd','page',14,1),(13167,'/root/scripts\r','page',14,1),(13168,'/buildredteam','page',14,1),(13169,'pop','page',14,1),(13170,'text-based','page',14,1),(13171,'menu','page',14,4),(13172,'At','page',14,5),(13173,'screen','page',14,4),(13174,'below','page',14,2),(13175,'select','page',14,7),(13176,'option','page',14,5),(13177,'3','page',14,1),(13178,'Set','page',14,3),(13179,'Next','page',14,4),(13180,'it','page',14,17),(13181,'ask','page',14,5),(13182,'service','page',14,2),(13183,'tag','page',14,1),(13184,'by','page',14,1),(13185,'default','page',14,4),(13186,'give','page',14,3),(13187,'TS1','page',14,2),(13188,'or','page',14,5),(13189,'if','page',14,4),(13190,'there','page',14,1),(13191,'TS2','page',14,1),(13192,'You','page',14,1),(13193,'can','page',14,3),(13194,'keep','page',14,1),(13195,'name','page',14,3),(13196,'add','page',14,2),(13197,'your','page',14,4),(13198,'own','page',14,1),(13199,'be','page',14,3),(13200,'creates','page',14,1),(13201,'in','page',14,6),(13202,'/root/services','page',14,1),(13203,'its','page',14,1),(13204,'container','page',14,4),(13205,'also','page',14,2),(13206,'itself','page',14,1),(13207,'I','page',14,1),(13208,'ll','page',14,6),(13209,'leave','page',14,1),(13210,'set','page',14,8),(13211,'IPs','page',14,5),(13212,'has','page',14,2),(13213,'list','page',14,5),(13214,'IP','page',14,17),(13215,'subnets','page',14,3),(13216,'stored','page',14,1),(13217,'Geo-location','page',14,1),(13218,'based','page',14,2),(13219,'structure','page',14,1),(13220,'at','page',14,1),(13221,'/root/backbonerouters','page',14,1),(13222,'Here','page',14,2),(13223,'what','page',14,6),(13224,'Geo-based','page',14,1),(13225,'with','page',14,3),(13226,'USA','page',14,2),(13227,'drill','page',14,1),(13228,'down','page',14,3),(13229,'further','page',14,1),(13230,'City','page',14,1),(13231,'location','page',14,1),(13232,'some','page',14,1),(13233,'only','page',14,1),(13234,'one','page',14,4),(13235,'but','page',14,2),(13236,'several','page',14,1),(13237,'Seattle','page',14,1),(13238,'            ','page',14,1),(13239,'Then','page',14,3),(13240,'randomly','page',14,5),(13241,'generated','page',14,1),(13242,'manually','page',14,3),(13243,'walk','page',14,1),(13244,'through','page',14,2),(13245,'screenshots','page',14,2),(13246,'both','page',14,1),(13247,'options','page',14,1),(13248,'subnet','page',14,5),(13249,'from','page',14,5),(13250,'geo-location','page',14,1),(13251,'table','page',14,1),(13252,'then','page',14,4),(13253,'within','page',14,1),(13254,'manual','page',14,3),(13255,'need','page',14,1),(13256,'put','page',14,1),(13257,'yourself','page',14,1),(13258,'view','page',14,2),(13259,'available','page',14,1),(13260,'which','page',14,1),(13261,'show','page',14,1),(13262,'It','page',14,2),(13263,'validates','page',14,1),(13264,'enter','page',14,6),(13265,'correct','page',14,1),(13266,'before','page',14,1),(13267,'proceeding','page',14,1),(13268,'s','page',14,3),(13269,'not','page',14,1),(13270,'validate','page',14,1),(13271,'try','page',14,1),(13272,'again','page',14,1),(13273,'Setting','page',14,2),(13274,'Option','page',14,2),(13275,'1','page',14,2),(13276,'random','page',14,2),(13277,'When','page',14,1),(13278,'during','page',14,1),(13279,'processing','page',14,1),(13280,'move','page',14,1),(13281,'next','page',14,2),(13282,'step','page',14,1),(13283,'shown','page',14,1),(13284,'after','page',14,1),(13285,'going','page',14,1),(13286,'process','page',14,4),(13287,'2','page',14,2),(13288,'few','page',14,1),(13289,'shows','page',14,2),(13290,'  ','page',14,1),(13291,'Below','page',14,2),(13292,'when','page',14,1),(13293,'selected','page',14,3),(13294,'press','page',14,3),(13295,'see','page',14,1),(13296,'looks','page',14,2),(13297,'like','page',14,2),(13298,'long','page',14,1),(13299,'space','page',14,1),(13300,'bar','page',14,1),(13301,'page','page',14,1),(13302,'q','page',14,2),(13303,'quit','page',14,1),(13304,'get','page',14,1),(13305,'back','page',14,2),(13306,'where','page',14,2),(13307,'After','page',14,1),(13308,'ve','page',14,3),(13309,'decided','page',14,1),(13310,'above','page',14,2),(13311,'write','page',14,1),(13312,'memorize','page',14,1),(13313,'exit','page',14,1),(13314,'take','page',14,1),(13315,'previous','page',14,1),(13316,'From','page',14,1),(13317,'54','page',14,2),(13318,'88','page',14,2),(13319,'220','page',14,2),(13320,'10','page',14,1),(13321,'1/22','page',14,1),(13322,'point','page',14,3),(13323,'either','page',14,1),(13324,'pulls','page',14,1),(13325,'files','page',14,1),(13326,'/root/Profiles','page',14,1),(13327,'make','page',14,1),(13328,'sure','page',14,1),(13329,'save','page',14,1),(13330,'humanzoo2','page',14,1),(13331,'password','page',14,2),(13332,'toor','page',14,1),(13333,'all','page',14,1),(13334,'settings','page',14,1),(13335,'needed','page',14,1),(13336,'once','page',14,1),(13337,'over','page',14,1),(13338,'happy','page',14,1),(13339,'exits','page',14,1),(13340,'should','page',14,1),(13341,'running','page',14,1),(13342,'Information','page',14,1),(13343,'about','page',14,1),(13344,'placed','page',14,1),(13345,'/root/services/TS1/','page',14,1),(13346,'directory','page',14,1),(13347,'To','page',14,1),(13348,'check','page',14,1),(13349,'ps','page',14,1),(13350,'screenshot','page',14,1),(13351,'Making','page',15,40),(13352,'a','page',15,69),(13353,'HAProxy','page',15,44),(13354,'Redirector','page',15,40),(13355,'buildredteam','page',15,40),(13356,'sh','page',15,40),(13357,'NOTE','page',15,4),(13358,'The','page',15,8),(13359,'NRTS','page',15,4),(13360,'is','page',15,21),(13361,'designed','page',15,2),(13362,'to','page',15,51),(13363,'run','page',15,1),(13364,'red','page',15,1),(13365,'team','page',15,2),(13366,'infrastructure','page',15,1),(13367,'using','page',15,5),(13368,'docker','page',15,5),(13369,'containers','page',15,1),(13370,' ','page',15,193),(13371,'Building','page',15,1),(13372,'these','page',15,7),(13373,'out','page',15,4),(13374,'and','page',15,20),(13375,'managing','page',15,1),(13376,'the','page',15,87),(13377,'network','page',15,1),(13378,'for','page',15,27),(13379,'this','page',15,26),(13380,'best','page',15,1),(13381,'left','page',15,1),(13382,'up','page',15,4),(13383,'script','page',15,10),(13384,'do','page',15,3),(13385,'so','page',15,6),(13386,'redirector','page',15,10),(13387,'only','page',15,5),(13388,'compatible','page',15,1),(13389,'with','page',15,3),(13390,'Cobalt','page',15,10),(13391,'Strike','page',15,10),(13392,'teamserver','page',15,5),(13393,'due','page',15,1),(13394,'information','page',15,5),(13395,'from','page',15,10),(13396,'cobalt','page',15,2),(13397,'strike','page',15,2),(13398,'teamservers','page',15,1),(13399,'C2','page',15,6),(13400,'profile','page',15,9),(13401,'add','page',15,6),(13402,'ACLs','page',15,3),(13403,'detect','page',15,1),(13404,'traffic','page',15,6),(13405,'if','page',15,10),(13406,'hitting','page',15,2),(13407,'one','page',15,4),(13408,'of','page',15,16),(13409,'redirect','page',15,5),(13410,'domains','page',15,7),(13411,'doesn','page',15,2),(13412,'t','page',15,6),(13413,'match','page',15,2),(13414,'it','page',15,29),(13415,'will','page',15,42),(13416,'forward','page',15,1),(13417,'decoy','page',15,2),(13418,'website','page',15,2),(13419,'This','page',15,13),(13420,'guide','page',15,3),(13421,'assuming','page',15,1),(13422,'you','page',15,45),(13423,'already','page',15,2),(13424,'have','page',15,11),(13425,'server','page',15,2),(13426,'running','page',15,4),(13427,'For','page',15,11),(13428,'example','page',15,13),(13429,'we','page',15,13),(13430,'ll','page',15,12),(13431,'assume','page',15,1),(13432,'at','page',15,6),(13433,'54','page',15,2),(13434,'88','page',15,2),(13435,'220','page',15,2),(13436,'10','page',15,2),(13437,'that','page',15,8),(13438,'humanzoo2','page',15,2),(13439,'Use','page',15,2),(13440,'following','page',15,1),(13441,'start','page',15,3),(13442,'on','page',15,10),(13443,'an','page',15,6),(13444,'\r','page',15,6),(13445,'/root/scripts/buildredteam','page',15,1),(13446,'sh\r','page',15,1),(13447,'bring','page',15,1),(13448,'text-based','page',15,1),(13449,'menu','page',15,13),(13450,'seen','page',15,1),(13451,'below','page',15,4),(13452,'select','page',15,12),(13453,'option','page',15,6),(13454,'2','page',15,4),(13455,'Set','page',15,4),(13456,'http','page',15,2),(13457,'and/or','page',15,2),(13458,'https','page',15,2),(13459,'Next','page',15,6),(13460,'ask','page',15,12),(13461,'service','page',15,1),(13462,'tag','page',15,2),(13463,'by','page',15,3),(13464,'default','page',15,8),(13465,'give','page',15,2),(13466,'RD1','page',15,4),(13467,'or','page',15,7),(13468,'there','page',15,2),(13469,'RD2','page',15,1),(13470,'You','page',15,5),(13471,'can','page',15,7),(13472,'keep','page',15,2),(13473,'name','page',15,6),(13474,'own','page',15,2),(13475,'be','page',15,9),(13476,'folder','page',15,2),(13477,'creates','page',15,1),(13478,'in','page',15,9),(13479,'/root/services','page',15,1),(13480,'its','page',15,2),(13481,'container','page',15,2),(13482,'build','page',15,7),(13483,'also','page',15,1),(13484,'itself','page',15,1),(13485,'leave','page',15,3),(13486,'as','page',15,4),(13487,'  ','page',15,2),(13488,'number','page',15,1),(13489,'IPs','page',15,17),(13490,'limits','page',15,1),(13491,'20','page',15,1),(13492,'sanity','page',15,1),(13493,'reasons','page',15,1),(13494,'use','page',15,13),(13495,'5','page',15,2),(13496,'Then','page',15,5),(13497,'Geo-location','page',15,2),(13498,'pull','page',15,1),(13499,'IP','page',15,23),(13500,'addresses','page',15,1),(13501,'has','page',15,4),(13502,'list','page',15,5),(13503,'subnets','page',15,6),(13504,'stored','page',15,1),(13505,'based','page',15,3),(13506,'structure','page',15,1),(13507,'/root/backbonerouters','page',15,1),(13508,'UK','page',15,1),(13509,'city','page',15,1),(13510,'some','page',15,2),(13511,'few','page',15,2),(13512,'but','page',15,4),(13513,'lot','page',15,1),(13514,'London','page',15,1),(13515,'want','page',15,4),(13516,'set','page',15,3),(13517,'randomly','page',15,4),(13518,'manually','page',15,5),(13519,'walk','page',15,2),(13520,'through','page',15,4),(13521,'both','page',15,2),(13522,'processes','page',15,1),(13523,'Setting','page',15,2),(13524,'-','page',15,6),(13525,'Option','page',15,4),(13526,'1','page',15,5),(13527,'random','page',15,3),(13528,'When','page',15,2),(13529,'during','page',15,2),(13530,'processing','page',15,2),(13531,'move','page',15,2),(13532,'next','page',15,6),(13533,'step','page',15,2),(13534,'shown','page',15,3),(13535,'after','page',15,3),(13536,'going','page',15,2),(13537,'manual','page',15,4),(13538,'process','page',15,6),(13539,'screenshots','page',15,1),(13540,'shows','page',15,2),(13541,'Below','page',15,2),(13542,'when','page',15,2),(13543,'Ips','page',15,1),(13544,'At','page',15,3),(13545,'screen','page',15,2),(13546,'enter','page',15,8),(13547,'s','page',15,4),(13548,'see','page',15,5),(13549,'blank','page',15,1),(13550,'items','page',15,1),(13551,'store','page',15,1),(13552,'them','page',15,3),(13553,'                                                                                                      ','page',15,1),(13554,'available','page',15,2),(13555,'geo-location','page',15,1),(13556,'selections','page',15,1),(13557,'made','page',15,1),(13558,'previously','page',15,1),(13559,'typically','page',15,1),(13560,'long','page',15,1),(13561,'hit','page',15,1),(13562,'spacebar','page',15,1),(13563,'page','page',15,1),(13564,'down','page',15,1),(13565,'press','page',15,4),(13566,'q','page',15,2),(13567,'then','page',15,3),(13568,'exit','page',15,1),(13569,'subnet','page',15,2),(13570,'view','page',15,1),(13571,'go','page',15,1),(13572,'back','page',15,4),(13573,'previous','page',15,2),(13574,'pick','page',15,3),(13575,'any','page',15,2),(13576,'well','page',15,1),(13577,'12','page',15,1),(13578,'9','page',15,1),(13579,'80','page',15,1),(13580,'129/25','page',15,1),(13581,'Note','page',15,2),(13582,'multiple','page',15,1),(13583,'don','page',15,2),(13584,'just','page',15,4),(13585,'After','page',15,1),(13586,'pressing','page',15,1),(13587,'put','page',15,2),(13588,'first','page',15,1),(13589,'slot','page',15,1),(13590,'Once','page',15,4),(13591,'take','page',15,4),(13592,'time','page',15,1),(13593,'validate','page',15,2),(13594,'original','page',15,2),(13595,'should','page',15,5),(13596,'now','page',15,4),(13597,'entered','page',15,3),(13598,'continue','page',15,2),(13599,'steps','page',15,1),(13600,'until','page',15,1),(13601,'ve','page',15,2),(13602,'added','page',15,3),(13603,'all','page',15,4),(13604,'empty','page',15,2),(13605,'slots','page',15,2),(13606,'If','page',15,5),(13607,'fill','page',15,1),(13608,'say','page',15,2),(13609,'asked','page',15,1),(13610,'3','page',15,1),(13611,'our','page',15,1),(13612,'those','page',15,1),(13613,'three','page',15,1),(13614,'point','page',15,2),(13615,'either','page',15,2),(13616,'Here','page',15,2),(13617,'asks','page',15,1),(13618,'what','page',15,3),(13619,'ports','page',15,1),(13620,'HTTP','page',15,1),(13621,'HTTPS','page',15,2),(13622,'selected','page',15,3),(13623,'change','page',15,2),(13624,'port','page',15,3),(13625,'8443','page',15,2),(13626,'instead','page',15,1),(13627,'443','page',15,2),(13628,'changes','page',15,1),(13629,'bind','page',15,2),(13630,'your','page',15,6),(13631,'payload','page',15,1),(13632,'still','page',15,1),(13633,'call','page',15,1),(13634,'listen','page',15,1),(13635,'return','page',15,1),(13636,'configure','page',15,1),(13637,'Listener','page',15,1),(13638,'Bind','page',15,1),(13639,'address','page',15,1),(13640,'However','page',15,1),(13641,'redirectors','page',15,1),(13642,'residing','page',15,1),(13643,'same','page',15,2),(13644,'isn','page',15,2),(13645,'really','page',15,1),(13646,'necessary','page',15,1),(13647,'To','page',15,1),(13648,'accept','page',15,1),(13649,'                     ','page',15,1),(13650,'about','page',15,1),(13651,'changing','page',15,1),(13652,'again','page',15,1),(13653,'Just','page',15,1),(13654,'mind','page',15,1),(13655,'need','page',15,4),(13656,'listener','page',15,1),(13657,'accordingly','page',15,1),(13658,'redirecting','page',15,2),(13659,'Teamserver','page',15,1),(13660,'which','page',15,1),(13661,'used','page',15,4),(13662,'These','page',15,1),(13663,'are','page',15,4),(13664,'identify','page',15,2),(13665,'other','page',15,2),(13666,'things','page',15,1),(13667,'domain','page',15,10),(13668,'wrong','page',15,1),(13669,'not','page',15,1),(13670,'work','page',15,1),(13671,'where','page',15,2),(13672,'HAproxy','page',15,2),(13673,'hits','page',15,1),(13674,'ACL','page',15,1),(13675,'created','page',15,3),(13676,'site','page',15,1),(13677,'exist','page',15,1),(13678,'range','page',15,1),(13679,'reachable','page',15,2),(13680,'stop','page',15,1),(13681,'working','page',15,2),(13682,'redbook','page',15,1),(13683,'com','page',15,2),(13684,'We','page',15,2),(13685,'   ','page',15,1),(13686,'create','page',15,3),(13687,'generated','page',15,2),(13688,'order','page',15,1),(13689,'SSL','page',15,1),(13690,'certificates','page',15,1),(13691,'options','page',15,1),(13692,'Assigning','page',15,2),(13693,'Domains','page',15,2),(13694,'one/s','page',15,1),(13695,'moves','page',15,1),(13696,'cover','page',15,1),(13697,'Manually','page',15,1),(13698,'name/s','page',15,1),(13699,'get','page',15,2),(13700,'and ','page',15,1),(13701,'entering','page',15,1),(13702,'1 ','page',15,1),(13703,'208','page',15,2),(13704,'82','page',15,2),(13705,'7','page',15,2),(13706,'57','page',15,2),(13707,'make','page',15,1),(13708,'called','page',15,1),(13709,'goatfarmer','page',15,1),(13710,'named','page',15,1),(13711,'pressed','page',15,1),(13712,'takes','page',15,1),(13713,'populated','page',15,1),(13714,'Repeat','page',15,1),(13715,'d','page',15,1),(13716,'done','page',15,1),(13717,'finished','page',15,1),(13718,'generation','page',15,1),(13719,'names','page',15,1),(13720,'re','page',15,1),(13721,'thing','page',15,1),(13722,'Tag','page',15,1),(13723,'scripts','page',15,1),(13724,'who','page',15,1),(13725,'purpose','page',15,1),(13726,'allow','page',15,1),(13727,'deleted','page',15,1),(13728,'later','page',15,1),(13729,'like','page',15,1),(13730,'engagement','page',15,1),(13731,'no','page',15,1),(13732,'longer','page',15,1),(13733,'I','page',15,1),(13734,'test-DNS','page',15,1),(13735,'Finally','page',15,1),(13736,'everything','page',15,1),(13737,'needs','page',15,1),(13738,'look','page',15,1),(13739,'settings','page',15,1),(13740,'good','page',15,1),(13741,'screenshot','page',15,1),(13742,'regarding','page',15,1),(13743,'located','page',15,1),(13744,'/root/services/RD1','page',15,1),(13745,'directory','page',15,1),(13746,'DNS','page',15,1),(13747,'looking','page',15,1),(13748,'Run','page',15,1),(13749,'ps','page',15,1),(13750,'Making','page',16,40),(13751,'a','page',16,66),(13752,'NGINX','page',16,46),(13753,'Redirector','page',16,40),(13754,'buildredteam','page',16,40),(13755,'sh','page',16,40),(13756,' NOTE','page',16,1),(13757,'The','page',16,6),(13758,'NRTS','page',16,3),(13759,'is','page',16,12),(13760,'designed','page',16,2),(13761,'to','page',16,42),(13762,'run','page',16,2),(13763,'red','page',16,1),(13764,'team','page',16,2),(13765,'infrastructure','page',16,1),(13766,'using','page',16,2),(13767,'docker','page',16,5),(13768,'containers','page',16,2),(13769,' ','page',16,49),(13770,'Building','page',16,1),(13771,'these','page',16,3),(13772,'out','page',16,3),(13773,'and','page',16,17),(13774,'managing','page',16,1),(13775,'the','page',16,63),(13776,'network','page',16,1),(13777,'for','page',16,22),(13778,'this','page',16,25),(13779,'best','page',16,1),(13780,'left','page',16,1),(13781,'up','page',16,5),(13782,'script','page',16,7),(13783,'do','page',16,3),(13784,'so','page',16,5),(13785,'NOTE','page',16,2),(13786,'redirector','page',16,7),(13787,'can','page',16,11),(13788,'be','page',16,7),(13789,'use','page',16,14),(13790,'with','page',16,4),(13791,'most','page',16,1),(13792,'C2','page',16,2),(13793,'servers','page',16,1),(13794,'redirect','page',16,4),(13795,'DNS','page',16,6),(13796,'traffic','page',16,1),(13797,'This','page',16,14),(13798,'guide','page',16,3),(13799,'assuming','page',16,1),(13800,'you','page',16,31),(13801,'already','page',16,2),(13802,'have','page',16,6),(13803,'Cobalt','page',16,1),(13804,'Strike','page',16,1),(13805,'or','page',16,7),(13806,'other','page',16,1),(13807,'server','page',16,4),(13808,'running','page',16,6),(13809,'For','page',16,11),(13810,'example','page',16,15),(13811,'we','page',16,15),(13812,'ll','page',16,12),(13813,'assume','page',16,1),(13814,'teamserver','page',16,4),(13815,'at','page',16,4),(13816,'54','page',16,2),(13817,'88','page',16,2),(13818,'220','page',16,2),(13819,'10','page',16,2),(13820,'Use','page',16,2),(13821,'following','page',16,1),(13822,'start','page',16,2),(13823,'on','page',16,6),(13824,'an','page',16,3),(13825,'\r','page',16,6),(13826,'/root/scripts/buildredteam','page',16,1),(13827,'sh\r','page',16,1),(13828,'will','page',16,27),(13829,'bring','page',16,1),(13830,'text-based','page',16,1),(13831,'menu','page',16,13),(13832,'seen','page',16,1),(13833,'below','page',16,4),(13834,'select','page',16,11),(13835,'Option','page',16,5),(13836,'1','page',16,6),(13837,'Set','page',16,1),(13838,'http','page',16,1),(13839,'https','page',16,1),(13840,'Next','page',16,8),(13841,'it','page',16,23),(13842,'ask','page',16,6),(13843,'service','page',16,2),(13844,'tag','page',16,2),(13845,'by','page',16,3),(13846,'default','page',16,5),(13847,'give','page',16,3),(13848,'RD1','page',16,3),(13849,'if','page',16,4),(13850,'there','page',16,3),(13851,'of','page',16,13),(13852,'RD2','page',16,1),(13853,'You','page',16,3),(13854,'keep','page',16,1),(13855,'set','page',16,11),(13856,'your','page',16,9),(13857,'own','page',16,1),(13858,'name','page',16,5),(13859,'folder','page',16,3),(13860,'creates','page',16,1),(13861,'in','page',16,3),(13862,'/root/services','page',16,1),(13863,'its','page',16,1),(13864,'container','page',16,5),(13865,'build','page',16,5),(13866,'also','page',16,1),(13867,'itself','page',16,1),(13868,'leave','page',16,2),(13869,'asks','page',16,4),(13870,'number','page',16,2),(13871,'IPs','page',16,9),(13872,'5','page',16,1),(13873,'geo-location','page',16,1),(13874,'base','page',16,1),(13875,'setting','page',16,1),(13876,'IP','page',16,22),(13877,'s','page',16,6),(13878,'has','page',16,2),(13879,'list','page',16,6),(13880,'subnets','page',16,4),(13881,'stored','page',16,1),(13882,'Geo-location','page',16,1),(13883,'based','page',16,1),(13884,'structure','page',16,1),(13885,'/root/backbonerouters','page',16,1),(13886,'option','page',16,8),(13887,'4','page',16,2),(13888,'Canada','page',16,1),(13889,'Then','page',16,2),(13890,'narrows','page',16,1),(13891,'down','page',16,2),(13892,'city','page',16,1),(13893,'Toronto','page',16,1),(13894,'want','page',16,5),(13895,'manually','page',16,4),(13896,'randomly','page',16,6),(13897,'walk','page',16,2),(13898,'through','page',16,2),(13899,'both','page',16,2),(13900,'options','page',16,2),(13901,'Setting','page',16,2),(13902,'-','page',16,5),(13903,'random','page',16,2),(13904,'When','page',16,2),(13905,'add','page',16,1),(13906,'during','page',16,2),(13907,'processing','page',16,2),(13908,'move','page',16,1),(13909,'next','page',16,6),(13910,'step','page',16,1),(13911,'shown','page',16,3),(13912,'after','page',16,2),(13913,'going','page',16,2),(13914,'over','page',16,2),(13915,'Manual','page',16,2),(13916,'IPs ','page',16,1),(13917,'2','page',16,3),(13918,'Manually','page',16,2),(13919,'few','page',16,1),(13920,'screenshots','page',16,1),(13921,'shows','page',16,3),(13922,'manual','page',16,5),(13923,'process','page',16,5),(13924,'Below','page',16,3),(13925,'when','page',16,3),(13926,'At','page',16,3),(13927,'screen','page',16,1),(13928,'enter','page',16,9),(13929,'see','page',16,4),(13930,'from','page',16,4),(13931,'screenshot','page',16,1),(13932,'show','page',16,2),(13933,'available','page',16,2),(13934,'Subnets','page',16,1),(13935,'information','page',16,3),(13936,'long','page',16,1),(13937,'spacebar','page',16,1),(13938,'page','page',16,1),(13939,'then','page',16,3),(13940,'q','page',16,2),(13941,'press','page',16,4),(13942,'exit','page',16,2),(13943,'get','page',16,3),(13944,'back','page',16,4),(13945,'previous','page',16,1),(13946,'                                                                                                                                                ','page',16,1),(13947,'Using','page',16,1),(13948,'any','page',16,1),(13949,'I','page',16,2),(13950,'72','page',16,2),(13951,'3','page',16,2),(13952,'244','page',16,2),(13953,'1/25','page',16,1),(13954,'but','page',16,2),(13955,'multiple','page',16,1),(13956,'Press','page',16,1),(13957,'subnet','page',16,1),(13958,'view','page',16,1),(13959,'first','page',16,1),(13960,'blank','page',16,1),(13961,'space','page',16,1),(13962,'brings','page',16,2),(13963,'entry','page',16,1),(13964,'20','page',16,1),(13965,'Once','page',16,2),(13966,'ve','page',16,3),(13967,'pressed','page',16,2),(13968,'goes','page',16,1),(13969,'now','page',16,3),(13970,'slot','page',16,1),(13971,'one','page',16,1),(13972,'populated','page',16,2),(13973,'continue','page',16,1),(13974,'until','page',16,1),(13975,'filled','page',16,1),(13976,'all','page',16,3),(13977,'blanks','page',16,1),(13978,'d','page',16,2),(13979,'done','page',16,1),(13980,'point','page',16,2),(13981,'either','page',16,2),(13982,'selected','page',16,2),(13983,'which','page',16,1),(13984,'us','page',16,1),(13985,'that','page',16,4),(13986,'what','page',16,1),(13987,'ports','page',16,1),(13988,'as','page',16,1),(13989,'  ','page',16,2),(13990,'HTTP','page',16,1),(13991,'HTTPS','page',16,3),(13992,'different','page',16,3),(13993,'port','page',16,5),(13994,'bind','page',16,2),(13995,'related','page',16,1),(13996,'cobalt','page',16,1),(13997,'strike','page',16,1),(13998,'feature','page',16,1),(13999,'where','page',16,2),(14000,'listener','page',16,1),(14001,'payload','page',16,2),(14002,'still','page',16,1),(14003,'443','page',16,1),(14004,'listen','page',16,1),(14005,'like','page',16,2),(14006,'say','page',16,1),(14007,'8443','page',16,1),(14008,'need','page',16,3),(14009,'something','page',16,1),(14010,'however','page',16,1),(14011,'since','page',16,1),(14012,'redirectors','page',16,1),(14013,'are','page',16,4),(14014,'isn','page',16,1),(14015,'t','page',16,1),(14016,'really','page',16,1),(14017,'screenshoot','page',16,1),(14018,'each','page',16,1),(14019,'being','page',16,1),(14020,'redirected','page',16,1),(14021,'should','page',16,4),(14022,'generated','page',16,3),(14023,'let','page',16,1),(14024,'create','page',16,2),(14025,'domain','page',16,14),(14026,'names','page',16,5),(14027,'necessary','page',16,1),(14028,'whenever','page',16,1),(14029,'generator','page',16,1),(14030,'CA','page',16,2),(14031,'signed','page',16,2),(14032,'SSL','page',16,1),(14033,'certificates','page',16,1),(14034,'automatically','page',16,1),(14035,'connect','page',16,1),(14036,'they','page',16,1),(14037,'used','page',16,2),(14038,'Random','page',16,1),(14039,'Assigning','page',16,2),(14040,'domains','page',16,3),(14041,'one/s','page',16,1),(14042,'generate','page',16,1),(14043,'just','page',16,1),(14044,'moves','page',16,1),(14045,'names/s','page',16,1),(14046,'take','page',16,1),(14047,'Note','page',16,1),(14048,'205','page',16,1),(14049,'225','page',16,1),(14050,'141','page',16,1),(14051,'68','page',16,1),(14052,'Enter','page',16,1),(14053,'goatfarmer','page',16,1),(14054,'com','page',16,1),(14055,'entered','page',16,1),(14056,'takes','page',16,1),(14057,'repeat','page',16,1),(14058,'finished','page',16,1),(14059,'completed','page',16,1),(14060,'adding','page',16,1),(14061,'identify','page',16,1),(14062,'later','page',16,1),(14063,'remove','page',16,1),(14064,'them','page',16,1),(14065,'test-DNS','page',16,1),(14066,'Now','page',16,1),(14067,'needs','page',16,1),(14068,'Review','page',16,1),(14069,'settings','page',16,1),(14070,'happy','page',16,1),(14071,'about','page',16,1),(14072,'/root/services/RD1','page',16,1),(14073,'To','page',16,1),(14074,'check','page',16,1),(14075,'ps','page',16,1),(14076,'Docker','page',16,1),(14077,'Tag','page',16,1),(14078,'above','page',16,1),(14079,'Building','page',17,41),(14080,'a','page',17,60),(14081,'Payload','page',17,41),(14082,'Host','page',17,41),(14083,'buildredteam','page',17,40),(14084,'sh','page',17,40),(14085,'NOTE','page',17,1),(14086,'The','page',17,2),(14087,'NRTS','page',17,4),(14088,'is','page',17,9),(14089,'designed','page',17,2),(14090,'to','page',17,34),(14091,'run','page',17,1),(14092,'red','page',17,1),(14093,'team','page',17,1),(14094,'infrastructure','page',17,1),(14095,'using','page',17,1),(14096,'docker','page',17,4),(14097,'containers','page',17,1),(14098,' ','page',17,36),(14099,'these','page',17,2),(14100,'out','page',17,2),(14101,'and','page',17,14),(14102,'managing','page',17,1),(14103,'the','page',17,49),(14104,'network','page',17,1),(14105,'for','page',17,14),(14106,'this','page',17,15),(14107,'best','page',17,1),(14108,'left','page',17,1),(14109,'up','page',17,4),(14110,'script','page',17,6),(14111,'do','page',17,1),(14112,'so','page',17,5),(14113,'Use','page',17,1),(14114,'following','page',17,1),(14115,'start','page',17,2),(14116,'on','page',17,6),(14117,'an','page',17,4),(14118,'server','page',17,2),(14119,'\r','page',17,6),(14120,'/root/scripts/buildredteam','page',17,1),(14121,'sh\r','page',17,1),(14122,'This','page',17,8),(14123,'will','page',17,25),(14124,'bring','page',17,2),(14125,'text-based','page',17,1),(14126,'menu','page',17,10),(14127,'seen','page',17,1),(14128,'below','page',17,3),(14129,'select','page',17,10),(14130,'option','page',17,11),(14131,'4','page',17,1),(14132,'Set','page',17,3),(14133,'payload','page',17,5),(14134,'host','page',17,6),(14135,'Next','page',17,5),(14136,'it','page',17,19),(14137,'ask','page',17,7),(14138,'service','page',17,4),(14139,'tag','page',17,5),(14140,'by','page',17,3),(14141,'default','page',17,4),(14142,'give','page',17,2),(14143,'you','page',17,29),(14144,'P1','page',17,4),(14145,'or','page',17,7),(14146,'if','page',17,4),(14147,'there','page',17,3),(14148,'already','page',17,1),(14149,'of','page',17,11),(14150,'P2','page',17,1),(14151,'You','page',17,5),(14152,'can','page',17,7),(14153,'keep','page',17,1),(14154,'name','page',17,8),(14155,'add','page',17,3),(14156,'your','page',17,3),(14157,'own','page',17,1),(14158,'be','page',17,4),(14159,'folder','page',17,2),(14160,'creates','page',17,1),(14161,'at','page',17,6),(14162,'/root/services','page',17,1),(14163,'its','page',17,2),(14164,'container','page',17,4),(14165,'build','page',17,4),(14166,'also','page',17,1),(14167,'itself','page',17,1),(14168,'For','page',17,6),(14169,'example','page',17,6),(14170,'we','page',17,15),(14171,'ll','page',17,10),(14172,'leave','page',17,1),(14173,'as','page',17,2),(14174,'number','page',17,1),(14175,'IPs','page',17,12),(14176,'set','page',17,6),(14177,'several','page',17,1),(14178,'they','page',17,1),(14179,'all','page',17,3),(14180,'whatever','page',17,2),(14181,'place','page',17,2),(14182,'use','page',17,10),(14183,'5','page',17,1),(14184,'Then','page',17,3),(14185,'geo-location','page',17,1),(14186,'has','page',17,3),(14187,'list','page',17,4),(14188,'IP','page',17,19),(14189,'Subnets','page',17,1),(14190,'stored','page',17,1),(14191,'in','page',17,4),(14192,'Geo-location','page',17,1),(14193,'structure','page',17,1),(14194,'/root/backbonerouters','page',17,1),(14195,'our','page',17,1),(14196,'geolocation','page',17,1),(14197,'7','page',17,1),(14198,'-','page',17,4),(14199,'France','page',17,2),(14200,'city','page',17,1),(14201,'some','page',17,2),(14202,'options','page',17,2),(14203,'have','page',17,7),(14204,'few','page',17,1),(14205,'only','page',17,4),(14206,'one','page',17,3),(14207,'1','page',17,6),(14208,'-Paris','page',17,1),(14209,'since','page',17,1),(14210,'isn','page',17,1),(14211,'t','page',17,1),(14212,'another','page',17,1),(14213,'want','page',17,3),(14214,'s','page',17,6),(14215,'randomly','page',17,2),(14216,'manually','page',17,3),(14217,'guide','page',17,2),(14218,'walk','page',17,2),(14219,'through','page',17,3),(14220,'both','page',17,2),(14221,'paths','page',17,2),(14222,'Setting','page',17,2),(14223,'Option','page',17,4),(14224,'random','page',17,4),(14225,'When','page',17,3),(14226,'during','page',17,2),(14227,'processing','page',17,2),(14228,'move','page',17,2),(14229,'next','page',17,4),(14230,'step','page',17,2),(14231,'We','page',17,1),(14232,'cover','page',17,1),(14233,'that','page',17,7),(14234,'after','page',17,3),(14235,'going','page',17,1),(14236,'over','page',17,1),(14237,'manual','page',17,8),(14238,'process','page',17,5),(14239,'2','page',17,2),(14240,'get','page',17,3),(14241,'screen','page',17,2),(14242,'showing','page',17,1),(14243,'blank','page',17,4),(14244,'blanks','page',17,2),(14245,'need','page',17,2),(14246,'filled','page',17,1),(14247,'with','page',17,3),(14248,'entered','page',17,3),(14249,'Select','page',17,1),(14250,'input','page',17,1),(14251,'First','page',17,1),(14252,'see','page',17,3),(14253,'what','page',17,2),(14254,'are','page',17,3),(14255,'available','page',17,3),(14256,'show','page',17,2),(14257,'subnets','page',17,5),(14258,'Below','page',17,2),(14259,'screenshot','page',17,2),(14260,'long','page',17,1),(14261,'spacebar','page',17,1),(14262,'page','page',17,1),(14263,'down','page',17,1),(14264,'then ','page',17,1),(14265,'press','page',17,4),(14266,'q','page',17,1),(14267,'followed','page',17,1),(14268,'enter','page',17,5),(14269,'exit','page',17,1),(14270,'subnet','page',17,1),(14271,'view','page',17,1),(14272,'back','page',17,3),(14273,'previous','page',17,1),(14274,'Now','page',17,1),(14275,'know','page',17,1),(14276,'184','page',17,2),(14277,'84','page',17,2),(14278,'180','page',17,1),(14279,'1/22','page',17,1),(14280,'pick','page',17,1),(14281,'from','page',17,3),(14282,'any','page',17,1),(14283,'pull','page',17,1),(14284,'multiple','page',17,1),(14285,'Back','page',17,1),(14286,'first','page',17,1),(14287,'spot','page',17,1),(14288,' Then','page',17,1),(14289,'entry','page',17,2),(14290,'ll ','page',17,1),(14291,'put','page',17,1),(14292,'181','page',17,1),(14293,'201','page',17,1),(14294,'Once','page',17,2),(14295,'ve','page',17,1),(14296,'pressed','page',17,1),(14297,'take','page',17,3),(14298,'now','page',17,2),(14299,'populated','page',17,2),(14300,'just','page',17,1),(14301,'Repeat','page',17,2),(14302,'then','page',17,2),(14303,'d','page',17,2),(14304,'when','page',17,2),(14305,'done','page',17,1),(14306,'At','page',17,3),(14307,'point','page',17,3),(14308,'either','page',17,2),(14309,'selected','page',17,3),(14310,'Randomly','page',17,1),(14311,'completed','page',17,2),(14312,'entering','page',17,1),(14313,'brings','page',17,1),(14314,'Here','page',17,2),(14315,'asks','page',17,1),(14316,'how','page',17,1),(14317,'assign','page',17,1),(14318,'DNS','page',17,6),(14319,'                                        ','page',17,1),(14320,'Assigning','page',17,2),(14321,'Domains','page',17,2),(14322,'- ','page',17,2),(14323,'generated','page',17,1),(14324,'one/s','page',17,1),(14325,'generate','page',17,1),(14326,'domains','page',17,1),(14327,'covered','page',17,1),(14328,'walking','page',17,1),(14329,'Manually','page',17,1),(14330,'create','page',17,1),(14331,'domain','page',17,7),(14332,'name/s','page',17,1),(14333,'new','page',17,1),(14334,'shows','page',17,1),(14335,'199','page',17,1),(14336,'101','page',17,1),(14337,'132','page',17,1),(14338,'203','page',17,1),(14339,'goatfarmer','page',17,1),(14340,'com','page',17,1),(14341,'should','page',17,2),(14342,'complete','page',17,2),(14343,'names','page',17,1),(14344,'created','page',17,1),(14345,'Randomly ','page',17,1),(14346,'used','page',17,1),(14347,'identify','page',17,1),(14348,'register','page',17,1),(14349,'later','page',17,1),(14350,'like','page',17,1),(14351,'say','page',17,1),(14352,'engagement','page',17,1),(14353,'remove','page',17,1),(14354,'those','page',17,1),(14355,'records','page',17,1),(14356,'test-DNS','page',17,1),(14357,'everything','page',17,1),(14358,'needs','page',17,1),(14359,'check','page',17,2),(14360,'settings','page',17,1),(14361,'happy','page',17,1),(14362,'After','page',17,1),(14363,'information','page',17,1),(14364,'about','page',17,1),(14365,'located','page',17,1),(14366,'/root/services/P1','page',17,1),(14367,'                                                                              ','page',17,1),(14368,'running','page',17,2),(14369,'ps','page',17,1),(14370,'named','page',17,1),(14371,'Docker','page',17,1),(14372,'Service','page',17,1),(14373,'Tag','page',17,1),(14374,'payloads','page',17,2),(14375,'transfer','page',17,1),(14376,'them','page',17,1),(14377,'/root/services/P1/WWW','page',17,1),(14378,'directory','page',17,1),(14379,'Note','page',17,1),(14380,'custom','page',17,1),(14381,'go','page',17,1),(14382,'ex','page',17,1),(14383,'/root/services/','page',17,1),(14384,'/WWW','page',17,1),(14740,'Managing','page',19,40),(14741,'Services','page',19,40),(14742,'buildredteam','page',19,40),(14743,'sh','page',19,42),(14744,'Then','page',19,2),(14745,'NRTS','page',19,5),(14746,'builds','page',19,1),(14747,'red','page',19,2),(14748,'team','page',19,2),(14749,'infrastructure','page',19,2),(14750,'in','page',19,3),(14751,'docker','page',19,2),(14752,'containers','page',19,3),(14753,' ','page',19,93),(14754,'These','page',19,1),(14755,'and','page',19,5),(14756,'services','page',19,1),(14757,'can','page',19,5),(14758,'be','page',19,3),(14759,'managed','page',19,1),(14760,'using','page',19,1),(14761,'the','page',19,23),(14762,'/root/scripts/buildredteam','page',19,2),(14763,'NOTE','page',19,2),(14764,'phishing','page',19,5),(14765,'is','page',19,6),(14766,'currently','page',19,2),(14767,'only','page',19,1),(14768,'service','page',19,8),(14769,'not','page',19,2),(14770,'build','page',19,1),(14771,'a','page',19,10),(14772,'container','page',19,9),(14773,'but','page',19,1),(14774,'script','page',19,1),(14775,'will','page',19,6),(14776,'set','page',19,4),(14777,'up','page',19,4),(14778,'host','page',19,4),(14779,'to','page',19,8),(14780,'able','page',19,1),(14781,'mimic','page',19,1),(14782,'domain','page',19,1),(14783,'of','page',19,3),(14784,'your','page',19,1),(14785,'choosing','page',19,1),(14786,'for','page',19,3),(14787,'attacks','page',19,4),(14788,'To','page',19,1),(14789,'View','page',19,3),(14790,'restart','page',19,1),(14791,'or','page',19,5),(14792,'delete','page',19,5),(14793,'run','page',19,1),(14794,'get','page',19,1),(14795,'menu','page',19,4),(14796,'below','page',19,2),(14797,'\r','page',19,30),(14798,'select','page',19,3),(14799,'option','page',19,3),(14800,'6','page',19,1),(14801,'-','page',19,3),(14802,'Container','page',19,5),(14803,'management','page',19,1),(14804,'From','page',19,3),(14805,'this','page',19,1),(14806,'you','page',19,6),(14807,'view','page',19,2),(14808,'start','page',19,2),(14809,'stop','page',19,3),(14810,'saved','page',19,1),(14811,' \r','page',19,1),(14812,'The','page',19,2),(14813,'Menu','page',19,3),(14814,'show','page',19,4),(14815,'status','page',19,2),(14816,'various','page',19,1),(14817,'Below','page',19,1),(14818,'example','page',19,1),(14819,'This','page',19,4),(14820,'if','page',19,1),(14821,'running','page',19,4),(14822,'stopped','page',19,3),(14823,'You','page',19,1),(14824,'ll','page',19,1),(14825,'also','page',19,1),(14826,'notice','page',19,1),(14827,'phish','page',19,4),(14828,'doesn','page',19,2),(14829,'t','page',19,2),(14830,'because','page',19,1),(14831,'create','page',19,1),(14832,'Instead','page',19,1),(14833,'it','page',19,5),(14834,'prep','page',19,1),(14835,'s','page',19,2),(14836,'sending','page',19,1),(14837,'then','page',19,1),(14838,'are','page',19,1),(14839,'done','page',19,1),(14840,'from','page',19,1),(14841,'other','page',19,1),(14842,'scripts','page',19,1),(14843,'at','page',19,2),(14844,'/root/scripts/phish','page',19,1),(14845,'For','page',19,1),(14846,'more','page',19,2),(14847,'on','page',19,2),(14848,'goto','page',19,1),(14849,'Using','page',19,1),(14850,'Setting','page',19,1),(14851,'Phishing','page',19,1),(14852,'attacks\r','page',19,1),(14853,'see','page',19,1),(14854,'information','page',19,3),(14855,'about','page',19,1),(14856,'It','page',19,1),(14857,'all','page',19,1),(14858,'relevant','page',19,1),(14859,'examples','page',19,1),(14860,'looking','page',19,1),(14861,'page','page',19,1),(14862,'each','page',19,1),(14863,'type','page',19,1),(14864,' payload','page',19,1),(14865,'P1','page',19,1),(14866,'redirector','page',19,1),(14867,'RD1','page',19,1),(14868,'Cobalt','page',19,1),(14869,'strike','page',19,1),(14870,'teamserver','page',19,1),(14871,'TS1','page',19,1),(14872,'Delete','page',19,1),(14873,'shows','page',19,1),(14874,'following','page',19,1),(14875,'whether','page',19,1),(14876,'remove','page',19,3),(14877,'any','page',19,1),(14878,'IP','page',19,1),(14879,'out','page',19,1),(14880,'/root/services/','page',19,1),(14881,'servicetag','page',19,1),(14882,'directory','page',19,1),(14883,'The Start','page',19,1),(14884,'allows','page',19,2),(14885,'The Stop','page',19,1),(14886,'menu option','page',19,1),(14887,'just','page',19,1),(14888,'kill','page',19,1),(14889,'restarted','page',19,1),(14890,'later','page',19,1),(14891,'with','page',19,1),(14892,'no','page',19,1),(14893,'lose','page',19,1),(14894,'functionality','page',19,1),(14895,'Using','book',6,48),(14896,'the','book',6,50),(14897,'NRTS','book',6,50),(14898,'The','book',6,1),(14899,'Not','book',6,1),(14900,'Red','book',6,1),(14901,'Team','book',6,1),(14902,'Server','book',6,1),(14903,'is','book',6,1),(14904,'swiss','book',6,1),(14905,'army','book',6,1),(14906,'knife','book',6,1),(14907,'for','book',6,2),(14908,'building','book',6,1),(14909,'red','book',6,1),(14910,'team','book',6,1),(14911,'infrastructure','book',6,1),(14912,'  ','book',6,1),(14913,'This','book',6,1),(14914,'guide','book',6,1),(14915,'will','book',6,1),(14916,'provide','book',6,1),(14917,'step','book',6,2),(14918,'by','book',6,1),(14919,'instructions','book',6,1),(14920,'using','book',6,1),(14921,'it','book',6,1),(14922,'s','book',6,1),(14923,'key','book',6,1),(14924,'features','book',6,1),(14925,'For','book',6,1),(14926,'details','book',6,1),(14927,'on','book',6,1),(14928,'file','book',6,1),(14929,'structure','book',6,1),(14930,'go','book',6,1),(14931,'to','book',6,1),(14932,'-','book',6,2),(14933,'Cyber','book',6,1),(14934,'Range','book',6,1),(14935,'Systems','book',6,1),(14936,'Overview','book',6,1),(14937,'Creating','page',13,40),(14938,'Cobalt','page',13,51),(14939,'Strike','page',13,50),(14940,'C2','page',13,43),(14941,'Profiles','page',13,44),(14942,'Script','page',13,4),(14943,'generated','page',13,6),(14944,'There','page',13,2),(14945,'are','page',13,6),(14946,'two','page',13,3),(14947,'different','page',13,1),(14948,'solutions','page',13,1),(14949,'installed','page',13,1),(14950,'on','page',13,10),(14951,'the','page',13,41),(14952,'NRTS','page',13,6),(14953,'by','page',13,4),(14954,'default','page',13,2),(14955,' ','page',13,20),(14956,'These','page',13,1),(14957,'Forty','page',13,1),(14958,'North','page',13,1),(14959,'Securities','page',13,1),(14960,'C2Concealer','page',13,1),(14961,'and','page',13,15),(14962,'Tylous','page',13,1),(14963,'s','page',13,5),(14964,'Github','page',13,1),(14965,'SourcePoint','page',13,2),(14966,'You','page',13,1),(14967,'should','page',13,2),(14968,'test','page',13,7),(14969,'these','page',13,3),(14970,'out','page',13,2),(14971,'prior','page',13,1),(14972,'to','page',13,29),(14973,'building','page',13,2),(14974,'an','page',13,5),(14975,'engagement','page',13,2),(14976,'worth','page',13,1),(14977,'of','page',13,8),(14978,'payloads','page',13,1),(14979,'there','page',13,1),(14980,'some','page',13,2),(14981,'issues','page',13,2),(14982,'especially','page',13,1),(14983,'since','page',13,1),(14984,'updates','page',13,1),(14985,'have','page',13,1),(14986,'a','page',13,25),(14987,'tendency','page',13,1),(14988,'mess','page',13,1),(14989,'around','page',13,1),(14990,'with','page',13,5),(14991,'profile','page',13,19),(14992,'syntax','page',13,1),(14993,'One','page',13,1),(14994,'more','page',13,4),(14995,'common','page',13,1),(14996,'I','page',13,5),(14997,'ve','page',13,2),(14998,'seen','page',13,1),(14999,'is','page',13,15),(15000,'very','page',13,1),(15001,'slow','page',13,1),(15002,'download','page',13,2),(15003,'transfer','page',13,1),(15004,'rates','page',13,1),(15005,'through','page',13,3),(15006,'beacon','page',13,2),(15007,'After','page',13,1),(15008,'you','page',13,22),(15009,'build','page',13,1),(15010,'d','page',13,3),(15011,'advice','page',13,2),(15012,'generating','page',13,1),(15013,'payload','page',13,1),(15014,'dropping','page',13,1),(15015,'it','page',13,13),(15016,'target','page',13,2),(15017,'trying','page',13,2),(15018,'50mb','page',13,1),(15019,'or','page',13,3),(15020,'larger','page',13,2),(15021,'file','page',13,1),(15022,'see','page',13,3),(15023,'how','page',13,3),(15024,'long','page',13,1),(15025,'takes','page',13,1),(15026,'Another','page',13,1),(15027,'issue','page',13,1),(15028,'involves','page',13,1),(15029,'processes','page',13,1),(15030,'used','page',13,1),(15031,'for','page',13,6),(15032,'fork','page',13,1),(15033,'run','page',13,3),(15034,'actions','page',13,1),(15035,'like','page',13,2),(15036,'spawning','page',13,1),(15037,'running','page',13,1),(15038,'execute-assembly','page',13,1),(15039,'So','page',13,2),(15040,'would','page',13,1),(15041,'also','page',13,1),(15042,'testing','page',13,1),(15043,'this','page',13,7),(15044,'your','page',13,2),(15045,'as','page',13,3),(15046,'well','page',13,1),(15047,'Using','page',13,6),(15048,'C2concealer','page',13,9),(15049,'NOTE','page',13,2),(15050,'added','page',13,2),(15051,'path','page',13,3),(15052,'so','page',13,3),(15053,'don','page',13,1),(15054,'t','page',13,3),(15055,'need','page',13,2),(15056,'be','page',13,2),(15057,'in','page',13,10),(15058,'directory','page',13,5),(15059,'use','page',13,4),(15060,'\r','page',13,33),(15061,'arguments','page',13,5),(15062,'that','page',13,6),(15063,'accepts','page',13,1),(15064,'--variants','page',13,2),(15065,'--hostname','page',13,2),(15066,'The','page',13,5),(15067,'script','page',13,9),(15068,'will','page',13,12),(15069,'generate','page',13,2),(15070,'based','page',13,3),(15071,'off','page',13,1),(15072,'hostname','page',13,1),(15073,'provide','page',13,3),(15074,'add','page',13,3),(15075,'variants','page',13,4),(15076,'number','page',13,3),(15077,'set','page',13,2),(15078,'believe','page',13,1),(15079,'max','page',13,1),(15080,'10','page',13,1),(15081,'but','page',13,2),(15082,'advise','page',13,1),(15083,'setting','page',13,1),(15084,'0','page',13,2),(15085,'against','page',13,1),(15086,'Strikes','page',13,1),(15087,'c2lint','page',13,3),(15088,'great','page',13,2),(15089,'chance','page',13,1),(15090,'fail','page',13,2),(15091,'built','page',13,1),(15092,'comes','page',13,1),(15093,'designed','page',13,1),(15094,'test/validate','page',13,1),(15095,'Below','page',13,3),(15096,'usage','page',13,1),(15097,'example','page',13,2),(15098,'humanzoo','page',13,4),(15099,'com','page',13,2),(15100,'ask','page',13,1),(15101,'SSL','page',13,7),(15102,'option','page',13,3),(15103,'options','page',13,1),(15104,'Self-signed','page',13,1),(15105,'cert\r','page',13,2),(15106,'LetsEncrypt','page',13,2),(15107,'Existing','page',13,1),(15108,'Keystore\r','page',13,1),(15109,'No','page',13,2),(15110,'SSL\r','page',13,1),(15111,'If','page',13,2),(15112,'plan','page',13,1),(15113,'using','page',13,2),(15114,'redirector','page',13,3),(15115,'can','page',13,2),(15116,'select','page',13,3),(15117,'handle','page',13,1),(15118,'certs','page',13,3),(15119,'all','page',13,1),(15120,'domains','page',13,1),(15121,'aren','page',13,1),(15122,'generator','page',13,1),(15123,'CA-server','page',13,1),(15124,'then','page',13,1),(15125,'those','page',13,2),(15126,'keystore','page',13,2),(15127,'-','page',13,3),(15128,'check','page',13,2),(15129,'guide','page',13,2),(15130,'Or','page',13,1),(15131,'self-signed','page',13,3),(15132,'not','page',13,2),(15133,'solution','page',13,1),(15134,'unless','page',13,1),(15135,'indicator','page',13,1),(15136,'want','page',13,1),(15137,'emulate','page',13,1),(15138,'cert','page',13,1),(15139,'closed','page',13,1),(15140,'grayspace','page',13,1),(15141,'environment','page',13,1),(15142,'Once','page',13,1),(15143,'made','page',13,1),(15144,'selection','page',13,1),(15145,'tool','page',13,2),(15146,'get','page',13,2),(15147,'output','page',13,1),(15148,'scroll','page',13,1),(15149,'C2lint','page',13,2),(15150,'finish','page',13,1),(15151,'following','page',13,1),(15152,'############################################################\r','page',13,1),(15153,'#','page',13,3),(15154,'Profile','page',13,5),(15155,'successfully','page',13,1),(15156,'passed','page',13,1),(15157,'C2lintcheck','page',13,1),(15158,'#\r','page',13,3),(15159,'name','page',13,3),(15160,'ba3e5732','page',13,2),(15161,'Generated','page',13,2),(15162,'FortyNorthSecurity','page',13,1),(15163,'############################################################','page',13,1),(15164,'It','page',13,1),(15165,'saves','page',13,1),(15166,'randomly','page',13,1),(15167,'named','page',13,1),(15168,'ran','page',13,2),(15169,'from','page',13,1),(15170,'next','page',13,1),(15171,'step','page',13,1),(15172,'rename','page',13,1),(15173,'something','page',13,1),(15174,'meaningful','page',13,1),(15175,'moving','page',13,1),(15176,'buildredteam','page',13,1),(15177,'sh','page',13,1),(15178,'look','page',13,2),(15179,'when','page',13,2),(15180,'teamserver','page',13,2),(15181,'This','page',13,4),(15182,'/root/Profiles','page',13,1),(15183,'modify','page',13,1),(15184,'needed','page',13,1),(15185,'where','page',13,1),(15186,'created','page',13,1),(15187,'what','page',13,1),(15188,'regards','page',13,1),(15189,'randomized','page',13,1),(15190,'mv','page',13,2),(15191,'profile\r','page',13,3),(15192,'/root/Profiles/','page',13,1),(15193,'At','page',13,1),(15194,'point','page',13,1),(15195,'ready','page',13,1),(15196,'go','page',13,1),(15197,'up','page',13,1),(15198,'give','page',13,1),(15199,'Sourcepoint','page',13,5),(15200,'isn','page',13,1),(15201,'full','page',13,2),(15202,'navigate','page',13,1),(15203,'Sourepoint','page',13,1),(15204,'has','page',13,1),(15205,'gives','page',13,1),(15206,'lot','page',13,1),(15207,'control','page',13,1),(15208,'For','page',13,1),(15209,'we','page',13,1),(15210,'ll','page',13,1),(15211,'cover','page',13,1),(15212,'just','page',13,1),(15213,'required','page',13,1),(15214,'list','page',13,1),(15215,'/Sourcepoint','page',13,1),(15216,'-h','page',13,1),(15217,'Required','page',13,1),(15218,'-host  \r','page',13,1),(15219,'host','page',13,1),(15220,'server','page',13,1),(15221,'variable','page',13,1),(15222,'-Outfile\r','page',13,1),(15223,'name/path','page',13,1),(15224,'save','page',13,1),(15225,'as\r','page',13,1),(15226,'-Injector\r','page',13,1),(15227,'process','page',13,1),(15228,'injection','page',13,1),(15229,'method','page',13,1),(15230,'provides','page',13,1),(15231,'options \r','page',13,1),(15232,'VirtualAllocEx','page',13,3),(15233,'Great','page',13,1),(15234,'cross','page',13,1),(15235,'architecture','page',13,1),(15236,'i','page',13,1),(15237,'e','page',13,1),(15238,'x86','page',13,2),(15239,'x64','page',13,1),(15240,'x64-','page',13,1),(15241,'NtMapViewOfSection','page',13,1),(15242,'A','page',13,1),(15243,'stealthy','page',13,1),(15244,'however','page',13,1),(15245,'fails','page',13,1),(15246,'over','page',13,1),(15247,'Example','page',13,1),(15248,'Usage','page',13,1),(15249,'cd','page',13,2),(15250,'/root/SourcePoint\r','page',13,1),(15251,'/SourcePoint','page',13,1),(15252,'-Host','page',13,1),(15253,'-Outfile','page',13,1),(15254,'/root/Profiles/humanzoo2','page',13,3),(15255,'-Injector','page',13,1),(15256,'Output','page',13,1),(15257,'_____','page',13,1),(15258,'____','page',13,1),(15259,'_','page',13,3),(15260,'__','page',13,6),(15261,'/','page',13,18),(15262,'___/____','page',13,1),(15263,'_______________','page',13,1),(15264,'\\____','page',13,1),(15265,'___','page',13,1),(15266,'/_\r','page',13,1),(15267,'\\__','page',13,1),(15268,'\\/','page',13,5),(15269,'___/','page',13,3),(15270,'/_/','page',13,4),(15271,'__/\r','page',13,1),(15272,'/__/','page',13,1),(15273,'__/','page',13,1),(15274,'____/','page',13,1),(15275,'/_','page',13,1),(15276,'/____/\\____/\\__','page',13,1),(15277,'_/_/','page',13,1),(15278,'\\___/\\___/_/','page',13,1),(15279,'\\____/_/_/','page',13,1),(15280,'/_/\\__/','page',13,1),(15281,'@Tyl0us','page',13,1),(15282,'*','page',13,5),(15283,'Preparing','page',13,1),(15284,'Varibles','page',13,1),(15285,'Building','page',13,1),(15286,'Host','page',13,1),(15287,'Staging','page',13,1),(15288,'Is','page',13,2),(15289,'Disabled','page',13,1),(15290,'Staged','page',13,1),(15291,'Payloads','page',13,1),(15292,'Are','page',13,1),(15293,'Not','page',13,2),(15294,'Available','page',13,2),(15295,'But','page',13,1),(15296,'Your','page',13,1),(15297,'Beacon','page',13,4),(15298,'Payload','page',13,1),(15299,'To','page',13,2),(15300,'Anyone','page',13,1),(15301,'That','page',13,1),(15302,'Connects\r','page',13,1),(15303,'DLL','page',13,1),(15304,'Spoofed','page',13,1),(15305,'audioeng','page',13,1),(15306,'dll\r','page',13,1),(15307,'Post-Ex','page',13,1),(15308,'Process','page',13,1),(15309,'Name','page',13,1),(15310,'gpupdate','page',13,1),(15311,'exe\r','page',13,1),(15312,'Shellcode','page',13,1),(15313,'Will','page',13,1),(15314,'Obfuscate','page',13,1),(15315,'Memory','page',13,1),(15316,'Prior','page',13,1),(15317,'Sleeping\r','page',13,1),(15318,'Seleted','page',13,1),(15319,'+','page',13,2),(15320,'Happy','page',13,1),(15321,'Hacking\r','page',13,1),(15322,'root@nrts','page',13,1),(15323,'~/Source','page',13,1),(15324,'profiles','page',13,2),(15325,'via','page',13,1),(15326,'good','page',13,1),(15327,'idea','page',13,1),(15328,'before','page',13,1),(15329,'them','page',13,1),(15330,'/root/cobaltstrike-local\r','page',13,1),(15331,'/c2lint','page',13,1),(15657,'Phishing','page',18,41),(15658,'Attack','page',18,40),(15659,'buildredteam','page',18,40),(15660,'sh','page',18,43),(15661,'NOTE','page',18,2),(15662,'The','page',18,8),(15663,'attack','page',18,9),(15664,'option','page',18,8),(15665,'doesn','page',18,1),(15666,'t','page',18,3),(15667,'build','page',18,2),(15668,'a','page',18,21),(15669,'docker','page',18,1),(15670,'container','page',18,1),(15671,' ','page',18,78),(15672,'Instead','page',18,2),(15673,'it','page',18,8),(15674,'sets','page',18,1),(15675,'up','page',18,6),(15676,'the','page',18,54),(15677,'NRTS','page',18,4),(15678,'host','page',18,1),(15679,'to','page',18,40),(15680,'perform','page',18,1),(15681,'phishing','page',18,6),(15682,'This','page',18,10),(15683,'step','page',18,2),(15684,'is','page',18,9),(15685,'just','page',18,1),(15686,'preparing','page',18,1),(15687,'mimic','page',18,1),(15688,'domain','page',18,10),(15689,'for','page',18,13),(15690,'sending','page',18,2),(15691,'phish','page',18,9),(15692,'Use','page',18,2),(15693,'following','page',18,2),(15694,'script','page',18,10),(15695,'set','page',18,11),(15696,'on','page',18,5),(15697,'an','page',18,6),(15698,'server','page',18,3),(15699,'\r','page',18,14),(15700,'/root/scripts/buildredteam','page',18,1),(15701,'sh\r','page',18,4),(15702,'will','page',18,16),(15703,'bring','page',18,2),(15704,'text-based','page',18,1),(15705,'menu','page',18,6),(15706,'seen','page',18,1),(15707,'below','page',18,3),(15708,'select','page',18,6),(15709,'5','page',18,1),(15710,'Set','page',18,3),(15711,'then','page',18,5),(15712,'ask','page',18,5),(15713,'geo-location','page',18,2),(15714,'based','page',18,1),(15715,'IP','page',18,16),(15716,'first','page',18,1),(15717,'country','page',18,1),(15718,'For','page',18,3),(15719,'this','page',18,13),(15720,'example','page',18,5),(15721,'we','page',18,10),(15722,'ll','page',18,6),(15723,'use','page',18,8),(15724,'China','page',18,1),(15725,'       ','page',18,2),(15726,'Next','page',18,2),(15727,'you','page',18,24),(15728,'city','page',18,1),(15729,'Beijing','page',18,1),(15730,'if','page',18,3),(15731,'want','page',18,8),(15732,'randomly','page',18,6),(15733,'generated','page',18,5),(15734,'or','page',18,4),(15735,'manually','page',18,6),(15736,'guide','page',18,2),(15737,'walk','page',18,2),(15738,'through','page',18,2),(15739,'both','page',18,2),(15740,'paths','page',18,2),(15741,'        ','page',18,2),(15742,'Setting','page',18,1),(15743,'IPs','page',18,5),(15744,'-','page',18,3),(15745,'Option','page',18,4),(15746,'1','page',18,3),(15747,'random','page',18,2),(15748,'When','page',18,2),(15749,'take','page',18,2),(15750,'note','page',18,1),(15751,'of','page',18,8),(15752,'and','page',18,13),(15753,'assign','page',18,4),(15754,'during','page',18,2),(15755,'processing','page',18,2),(15756,'simply','page',18,1),(15757,'next','page',18,3),(15758,'be','page',18,3),(15759,'shown','page',18,1),(15760,'after','page',18,3),(15761,'going','page',18,2),(15762,'over','page',18,2),(15763,'process','page',18,1),(15764,'Setting ','page',18,1),(15765,'2','page',18,2),(15766,'provide','page',18,2),(15767,'Before','page',18,1),(15768,'can','page',18,3),(15769,'one','page',18,1),(15770,'need','page',18,1),(15771,'know','page',18,1),(15772,'what','page',18,3),(15773,'subnets','page',18,3),(15774,'are','page',18,3),(15775,'available','page',18,2),(15776,'Geo-location','page',18,1),(15777,'previously','page',18,1),(15778,'selected','page',18,6),(15779,'Enter','page',18,1),(15780,'s','page',18,1),(15781,'at','page',18,4),(15782,'see','page',18,1),(15783,'list','page',18,6),(15784,'                    ','page',18,2),(15785,'Below','page',18,3),(15786,'screenshot','page',18,2),(15787,'subnet','page',18,5),(15788,'view','page',18,2),(15789,'vary','page',18,1),(15790,'in','page',18,5),(15791,'size','page',18,1),(15792,'depending','page',18,1),(15793,'hit','page',18,3),(15794,'spacebar','page',18,1),(15795,'page','page',18,1),(15796,'down','page',18,1),(15797,'type','page',18,1),(15798,'q','page',18,2),(15799,'enter','page',18,4),(15800,'exit','page',18,2),(15801,'out','page',18,2),(15802,'thte','page',18,1),(15803,'get','page',18,2),(15804,'back','page',18,1),(15805,'input','page',18,1),(15806,'95','page',18,2),(15807,'213','page',18,2),(15808,'0','page',18,1),(15809,'1/22','page',18,1),(15810,'our','page',18,3),(15811,'30','page',18,1),(15812,'    ','page',18,1),(15813,'  ','page',18,2),(15814,'                                                                                ','page',18,1),(15815,'Type','page',18,1),(15816,'that','page',18,5),(15817,'falls','page',18,1),(15818,'within','page',18,1),(15819,'do','page',18,1),(15820,'not','page',18,1),(15821,'actual','page',18,1),(15822,'listed','page',18,1),(15823,'from','page',18,3),(15824,'At','page',18,2),(15825,'point','page',18,2),(15826,'have','page',18,7),(15827,'screen','page',18,2),(15828,'asks','page',18,1),(15829,'how','page',18,1),(15830,'Domain','page',18,3),(15831,'name','page',18,4),(15832,'Again','page',18,1),(15833,'done','page',18,1),(15834,'     ','page',18,1),(15835,'Assigning','page',18,2),(15836,'names','page',18,3),(15837,'- ','page',18,1),(15838,'one/s','page',18,1),(15839,'move','page',18,1),(15840,'We','page',18,1),(15841,'cover','page',18,1),(15842,'manual','page',18,1),(15843,'Manually','page',18,1),(15844,'create','page',18,1),(15845,'name/s','page',18,1),(15846,'Selecting','page',18,1),(15847,'up ','page',18,1),(15848,'It','page',18,1),(15849,'goatfarmer','page',18,1),(15850,'com','page',18,2),(15851,'either','page',18,1),(15852,'Tag','page',18,1),(15853,'your','page',18,9),(15854,'DNS','page',18,3),(15855,'tag','page',18,1),(15856,'used','page',18,4),(15857,'identify','page',18,1),(15858,'later','page',18,1),(15859,'like','page',18,1),(15860,'say','page',18,1),(15861,'engagement','page',18,1),(15862,'remove','page',18,1),(15863,'records','page',18,1),(15864,'test-DNS','page',18,1),(15865,'Finally','page',18,1),(15866,'has','page',18,1),(15867,'all','page',18,1),(15868,'information','page',18,2),(15869,'needs','page',18,3),(15870,'Press','page',18,1),(15871,'preparation','page',18,1),(15872,'edits','page',18,1),(15873,'postfix','page',18,1),(15874,'configuration','page',18,1),(15875,'match','page',18,2),(15876,'ve','page',18,1),(15877,'register','page',18,1),(15878,'rootDNS','page',18,1),(15879,'address','page',18,5),(15880,'After','page',18,1),(15881,'scripts','page',18,3),(15882,'/root/scripts/phish','page',18,2),(15883,'send','page',18,4),(15884,'In','page',18,1),(15885,'directory','page',18,1),(15886,'there','page',18,1),(15887,'two','page',18,1),(15888,'attacks','page',18,1),(15889,'They','page',18,1),(15890,'spam','page',18,1),(15891,'some','page',18,1),(15892,'modify','page',18,1),(15893,'these','page',18,1),(15894,'/root/scripts/phish/phish','page',18,1),(15895,'single','page',18,1),(15896,'email','page',18,6),(15897,'modified','page',18,1),(15898,' \r','page',18,2),(15899,'vi','page',18,1),(15900,'top','page',18,1),(15901,'lines','page',18,1),(15902,'From','page',18,1),(15903,'Edit','page',18,1),(15904,'realname','page',18,1),(15905,'prior','page',18,1),(15906,'whatever','page',18,1),(15907,'username','page',18,1),(15908,'Then','page',18,2),(15909,'last','page',18,1),(15910,'line','page',18,2),(15911,'Place','page',18,1),(15912,'subject','page',18,1),(15913,'edit','page',18,1),(15914,'/root/scripts/phish/body','page',18,1),(15915,'txt','page',18,2),(15916,'body','page',18,1),(15917,'attachment','page',18,3),(15918,'replace','page',18,2),(15919,'/root/scripts/phish/bad','page',18,1),(15920,'exe','page',18,1),(15921,'with','page',18,2),(15922,'If','page',18,1),(15923,'don','page',18,2),(15924,'delete','page',18,1),(15925,'-a','page',18,1),(15926,'/path','page',18,1),(15927,'end','page',18,1),(15928,'target@domain','page',18,1),(15929,'/root/scripts/phish/spam','page',18,1),(15930,'addresses','page',18,2),(15931,'edited','page',18,1),(15932,'change','page',18,1),(15933,'similar','page',18,1),(15934,'above','page',18,1),(15935,'instructions','page',18,1),(15936,'only','page',18,1),(15937,'difference','page',18,1),(15938,'here','page',18,1),(15939,'add','page',18,2),(15940,'target','page',18,2),(15941,'/root/scripts/phish/emaillist','page',18,1),(15942,'Managing','page',20,40),(15943,'DNS','page',20,49),(15944,'ManageDNS','page',20,40),(15945,'sh','page',20,44),(15946,'The','page',20,3),(15947,'Cyber','page',20,1),(15948,'range','page',20,1),(15949,'is','page',20,6),(15950,'designed','page',20,1),(15951,'for','page',20,7),(15952,'Red','page',20,1),(15953,'Team','page',20,1),(15954,'domain','page',20,2),(15955,'name','page',20,1),(15956,'registration','page',20,1),(15957,'via','page',20,1),(15958,'the','page',20,22),(15959,'NRTS','page',20,6),(15960,'server','page',20,5),(15961,' ','page',20,9),(15962,'various','page',20,1),(15963,'service','page',20,1),(15964,'scripts','page',20,1),(15965,'interact','page',20,1),(15966,'with','page',20,2),(15967,'RootDNS','page',20,2),(15968,'to','page',20,10),(15969,'create','page',20,1),(15970,'and','page',20,4),(15971,'register','page',20,2),(15972,'domains','page',20,2),(15973,'To','page',20,2),(15974,'help','page',20,1),(15975,'management','page',20,1),(15976,'there','page',20,2),(15977,'a','page',20,10),(15978,'script','page',20,4),(15979,'on','page',20,4),(15980,'that','page',20,3),(15981,'can','page',20,3),(15982,'view','page',20,2),(15983,'delete','page',20,4),(15984,'records','page',20,7),(15985,'from','page',20,2),(15986,'rootDNS','page',20,1),(15987,'enable','page',20,1),(15988,'these','page',20,1),(15989,'every','page',20,1),(15990,'time','page',20,1),(15991,'remotely','page',20,1),(15992,'adds','page',20,2),(15993,'it','page',20,5),(15994,'will','page',20,5),(15995,'tag','page',20,6),(15996,'in','page',20,2),(15997,'both','page',20,1),(15998,'zone','page',20,2),(15999,'reference','page',20,1),(16000,'config','page',20,1),(16001,'file','page',20,2),(16002,'as','page',20,4),(16003,'well','page',20,1),(16004,'each','page',20,1),(16005,'Then','page',20,1),(16006,'user','page',20,3),(16007,'created','page',20,1),(16008,'under','page',20,1),(16009,'also','page',20,1),(16010,'elect','page',20,1),(16011,'specific','page',20,1),(16012,'doing','page',20,1),(16013,'this','page',20,2),(16014,'resides','page',20,1),(16015,'any','page',20,1),(16016,'at','page',20,1),(16017,'/root/scripts/manageDNS','page',20,1),(16018,'NOTE','page',20,1),(16019,'if','page',20,1),(16020,'you','page',20,5),(16021,'want','page',20,1),(16022,'outside','page',20,1),(16023,'of','page',20,6),(16024,'automation','page',20,1),(16025,'built','page',20,1),(16026,'into','page',20,1),(16027,'buildredteam','page',20,1),(16028,'another','page',20,1),(16029,'called','page',20,1),(16030,'RegisterDNS','page',20,1),(16031,'For','page',20,2),(16032,'usage','page',20,1),(16033,'go','page',20,1),(16034,'-','page',20,4),(16035,'How','page',20,1),(16036,'guides','page',20,1),(16037,'Manual','page',20,1),(16038,'Domain','page',20,1),(16039,'Registration','page',20,1),(16040,'Launch','page',20,1),(16041,'cd','page',20,1),(16042,'/root/scripts\r','page',20,1),(16043,'/ManageDNS','page',20,1),(16044,'This','page',20,1),(16045,'bring','page',20,3),(16046,'up','page',20,3),(16047,'text','page',20,1),(16048,'based','page',20,1),(16049,'menu','page',20,2),(16050,'below','page',20,3),(16051,'\r','page',20,12),(16052,'Option','page',20,2),(16053,'1','page',20,1),(16054,'View','page',20,2),(16055,'list','page',20,2),(16056,'Tags','page',20,1),(16057,'shown','page',20,2),(16058,'below\r','page',20,1),(16059,'From','page',20,1),(16060,'pick','page',20,1),(16061,'an','page',20,1),(16062,'option','page',20,2),(16063,'see','page',20,1),(16064,'have','page',20,1),(16065,'been','page',20,1),(16066,'registered','page',20,1),(16067,'selected','page',20,1),(16068,'example','page',20,1),(16069,'2','page',20,2),(16070,'OPFOR-chip-test','page',20,1),(16071,'Delete','page',20,1),(16072,'tags','page',20,1),(16073,'When','page',20,1),(16074,'select','page',20,1),(16075,'give','page',20,1),(16076,'warning','page',20,1),(16077,'10','page',20,1),(16078,'second','page',20,2),(16079,'delay','page',20,2),(16080,'allow','page',20,1),(16081,'CTRL-C','page',20,1),(16082,'out','page',20,1),(16083,'If','page',20,1),(16084,'selects','page',20,1),(16085,'all','page',20,1),(16086,'30','page',20,1),(16087,'same','page',20,1),(16088,'reason','page',20,1),(16089,'Here','page',20,2),(16090,'screenshot','page',20,1),(16091,'showing','page',20,1),(16092,'deletion','page',20,1),(16093,'OPFOR-Chip-test','page',20,1),(16094,'what','page',20,1),(16095,'shows','page',20,1),(16096,'when','page',20,1),(16097,'enter','page',20,1),(16098,'y','page',20,1),(16099,'continue','page',20,1),(16100,'Reverting','page',21,40),(16101,'the','page',21,41),(16102,'NRTS','page',21,42),(16103,'If','page',21,1),(16104,'you','page',21,4),(16105,'want','page',21,2),(16106,'to','page',21,3),(16107,'wipe','page',21,1),(16108,'out','page',21,1),(16109,'all','page',21,1),(16110,'containers/services/configurations','page',21,1),(16111,'on','page',21,2),(16112,'an','page',21,1),(16113,'there','page',21,1),(16114,'is','page',21,2),(16115,'a','page',21,1),(16116,'revert','page',21,1),(16117,'sh','page',21,3),(16118,'script','page',21,1),(16119,'do','page',21,1),(16120,'this','page',21,2),(16121,' ','page',21,1),(16122,'It','page',21,1),(16123,'s','page',21,1),(16124,'located','page',21,1),(16125,'at','page',21,1),(16126,'/root/scripts/revert','page',21,1),(16127,'below','page',21,1),(16128,'usage','page',21,1),(16129,'cd','page',21,1),(16130,'/root/scripts\r','page',21,1),(16131,'/revert','page',21,1),(16132,'When','page',21,1),(16133,'run','page',21,1),(16134,'it','page',21,1),(16135,'will','page',21,1),(16136,'make','page',21,1),(16137,'sure','page',21,1),(16138,'by','page',21,1),(16139,'making','page',21,1),(16140,'confirm','page',21,1),(16147,'Default','book',7,48),(16148,'Creds','book',7,48),(16149,'for','book',7,48),(16150,'all','book',7,48),(16151,'the','book',7,48),(16152,'things','book',7,48),(16215,'Cred','page',22,40),(16216,'list','page',22,40),(16217,'System','page',22,1),(16218,'\r','page',22,56),(16219,'Username','page',22,1),(16220,'Password','page',22,1),(16221,'IA-Proxy','page',22,1),(16222,'user','page',22,7),(16223,'&','page',22,7),(16224,'root','page',22,7),(16225,'toor','page',22,10),(16226,'CA-Server','page',22,1),(16227,'rootDNS','page',22,1),(16228,'web-services','page',22,1),(16229,'Traffic-Gen','page',22,1),(16230,'Traffic-WebHost','page',22,1),(16231,'NRTS','page',22,1),(16232,'Adminnet-DHCP','page',22,1),(16233,'vyos','page',22,2),(16234,'SI-router','page',22,1),(16235,'redbook','page',22,1),(16236,'com','page',22,3),(16237,'web','page',22,2),(16238,'GUI','page',22,2),(16239,'bookstack','page',22,1),(16240,'admin@admin','page',22,1),(16241,'toortoor\r','page',22,1),(16242,'dropbox','page',22,1),(16243,'owncloud','page',22,1),(16244,'admin','page',22,1);
/*!40000 ALTER TABLE `search_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sessions`
--

DROP TABLE IF EXISTS `sessions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sessions` (
  `id` varchar(191) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `ip_address` varchar(45) DEFAULT NULL,
  `user_agent` text DEFAULT NULL,
  `payload` text NOT NULL,
  `last_activity` int(11) NOT NULL,
  UNIQUE KEY `sessions_id_unique` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sessions`
--

LOCK TABLES `sessions` WRITE;
/*!40000 ALTER TABLE `sessions` DISABLE KEYS */;
/*!40000 ALTER TABLE `sessions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `settings`
--

DROP TABLE IF EXISTS `settings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `settings` (
  `setting_key` varchar(191) NOT NULL,
  `value` text NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `type` varchar(50) NOT NULL DEFAULT 'string',
  PRIMARY KEY (`setting_key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `settings`
--

LOCK TABLES `settings` WRITE;
/*!40000 ALTER TABLE `settings` DISABLE KEYS */;
INSERT INTO `settings` VALUES ('app-disable-comments','false','2023-04-05 01:00:52','2023-04-05 01:00:52','string'),('app-public','true','2023-04-05 01:00:52','2023-04-05 01:00:52','string'),('app-secure-images','false','2023-04-05 01:00:52','2023-04-05 01:00:52','string'),('user:1:dark-mode-enabled','true','2023-03-30 17:46:44','2023-03-30 17:46:44','string'),('user:1:language','en','2023-04-05 00:45:35','2023-04-05 00:45:35','string');
/*!40000 ALTER TABLE `settings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `social_accounts`
--

DROP TABLE IF EXISTS `social_accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `social_accounts` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `driver` varchar(191) NOT NULL,
  `driver_id` varchar(191) NOT NULL,
  `avatar` varchar(191) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `social_accounts_user_id_index` (`user_id`),
  KEY `social_accounts_driver_index` (`driver`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `social_accounts`
--

LOCK TABLES `social_accounts` WRITE;
/*!40000 ALTER TABLE `social_accounts` DISABLE KEYS */;
/*!40000 ALTER TABLE `social_accounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `entity_id` int(11) NOT NULL,
  `entity_type` varchar(100) NOT NULL,
  `name` varchar(191) NOT NULL,
  `value` varchar(191) NOT NULL,
  `order` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `tags_name_index` (`name`),
  KEY `tags_value_index` (`value`),
  KEY `tags_order_index` (`order`),
  KEY `tags_entity_id_entity_type_index` (`entity_id`,`entity_type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_invites`
--

DROP TABLE IF EXISTS `user_invites`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_invites` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `token` varchar(191) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_invites_user_id_index` (`user_id`),
  KEY `user_invites_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_invites`
--

LOCK TABLES `user_invites` WRITE;
/*!40000 ALTER TABLE `user_invites` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_invites` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(191) NOT NULL,
  `email` varchar(191) NOT NULL,
  `password` varchar(60) NOT NULL,
  `remember_token` varchar(100) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `email_confirmed` tinyint(1) NOT NULL DEFAULT 1,
  `image_id` int(11) NOT NULL DEFAULT 0,
  `external_auth_id` varchar(191) NOT NULL,
  `system_name` varchar(191) DEFAULT NULL,
  `slug` varchar(180) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`),
  UNIQUE KEY `users_slug_unique` (`slug`),
  KEY `users_external_auth_id_index` (`external_auth_id`),
  KEY `users_system_name_index` (`system_name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Admin','admin@admin.com','$2y$10$JpOfpVhGBFe9A7QprhmjJumk8fcET5AVZZY3TofQYDcsqkc3zH/D.',NULL,'2023-03-28 22:04:38','2023-04-05 00:45:35',1,0,'',NULL,'admin'),(2,'Guest','guest@example.com','',NULL,'2023-03-28 22:04:38','2023-03-28 22:04:38',1,0,'','public','guest');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `views`
--

DROP TABLE IF EXISTS `views`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `views` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `viewable_id` int(11) NOT NULL,
  `viewable_type` varchar(191) NOT NULL,
  `views` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `views_user_id_index` (`user_id`),
  KEY `views_viewable_id_index` (`viewable_id`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `views`
--

LOCK TABLES `views` WRITE;
/*!40000 ALTER TABLE `views` DISABLE KEYS */;
INSERT INTO `views` VALUES (1,1,1,'book',4,'2023-03-28 22:06:48','2023-03-28 23:24:28'),(2,1,1,'page',3,'2023-03-28 22:07:12','2023-03-28 22:10:42'),(3,1,1,'bookshelf',1,'2023-03-28 22:35:13','2023-03-28 22:35:13'),(4,1,2,'bookshelf',63,'2023-03-28 22:35:57','2023-04-05 00:59:33'),(5,1,2,'book',30,'2023-03-28 22:36:18','2023-04-05 00:57:27'),(6,1,2,'page',19,'2023-03-28 22:58:26','2023-04-05 00:57:28'),(7,1,3,'page',11,'2023-03-28 23:25:21','2023-04-04 20:31:06'),(8,1,3,'book',29,'2023-03-28 23:58:23','2023-04-05 00:57:23'),(9,1,4,'page',6,'2023-03-29 00:43:27','2023-04-03 16:44:57'),(10,1,5,'page',8,'2023-03-29 01:21:11','2023-04-05 00:52:44'),(11,1,6,'page',5,'2023-03-29 01:21:22','2023-04-03 16:55:17'),(12,1,7,'page',6,'2023-03-29 01:39:47','2023-04-03 17:03:25'),(13,1,8,'page',2,'2023-03-29 01:41:20','2023-03-29 01:47:35'),(14,1,9,'page',4,'2023-03-29 01:41:30','2023-03-29 17:34:28'),(15,1,4,'book',24,'2023-03-30 16:36:37','2023-04-05 00:52:36'),(16,1,5,'book',7,'2023-03-30 17:46:16','2023-03-30 20:02:28'),(17,1,10,'page',19,'2023-03-30 17:48:43','2023-04-05 00:37:58'),(18,1,11,'page',2,'2023-04-03 19:54:51','2023-04-03 20:15:24'),(19,1,12,'page',1,'2023-04-03 20:18:59','2023-04-03 20:18:59'),(20,1,13,'page',15,'2023-04-03 21:31:36','2023-04-05 00:04:22'),(21,1,1,'chapter',1,'2023-04-03 21:32:05','2023-04-03 21:32:05'),(22,1,6,'book',55,'2023-04-03 21:33:04','2023-04-05 00:39:05'),(23,1,14,'page',12,'2023-04-03 21:36:18','2023-04-04 22:40:39'),(24,1,15,'page',17,'2023-04-03 22:23:22','2023-04-04 22:40:56'),(25,1,16,'page',7,'2023-04-04 00:13:48','2023-04-04 22:41:17'),(26,1,17,'page',9,'2023-04-04 01:12:48','2023-04-04 22:41:37'),(27,1,18,'page',10,'2023-04-04 01:53:10','2023-04-05 00:35:39'),(28,1,19,'page',6,'2023-04-04 17:42:40','2023-04-05 00:01:57'),(29,1,20,'page',7,'2023-04-05 00:09:09','2023-04-05 00:38:36'),(30,1,21,'page',1,'2023-04-05 00:42:16','2023-04-05 00:42:16'),(31,1,7,'book',7,'2023-04-05 00:46:20','2023-04-05 01:00:08'),(32,1,22,'page',5,'2023-04-05 00:47:39','2023-04-05 00:59:30');
/*!40000 ALTER TABLE `views` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `webhook_tracked_events`
--

DROP TABLE IF EXISTS `webhook_tracked_events`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `webhook_tracked_events` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `webhook_id` int(11) NOT NULL,
  `event` varchar(50) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `webhook_tracked_events_event_index` (`event`),
  KEY `webhook_tracked_events_webhook_id_index` (`webhook_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `webhook_tracked_events`
--

LOCK TABLES `webhook_tracked_events` WRITE;
/*!40000 ALTER TABLE `webhook_tracked_events` DISABLE KEYS */;
/*!40000 ALTER TABLE `webhook_tracked_events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `webhooks`
--

DROP TABLE IF EXISTS `webhooks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `webhooks` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `active` tinyint(1) NOT NULL,
  `endpoint` varchar(500) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `timeout` int(10) unsigned NOT NULL DEFAULT 3,
  `last_error` text NOT NULL DEFAULT '',
  `last_called_at` timestamp NULL DEFAULT NULL,
  `last_errored_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `webhooks_name_index` (`name`),
  KEY `webhooks_active_index` (`active`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `webhooks`
--

LOCK TABLES `webhooks` WRITE;
/*!40000 ALTER TABLE `webhooks` DISABLE KEYS */;
/*!40000 ALTER TABLE `webhooks` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-04-04 15:02:40
